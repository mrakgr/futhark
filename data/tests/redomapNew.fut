-- ==
-- input {
--   [1,2,3,4,5]
-- }
-- output {
--   ( [0.0, 30.0, 60.0]
--   , [[[0.0, 0.0, 0.0, 0.0, 0.0],
--       [2.0, 2.0, 2.0, 2.0, 2.0],
--       [4.0, 4.0, 4.0, 4.0, 4.0]],
--      [[0.0, 0.0, 0.0, 0.0, 0.0],
--       [4.0, 4.0, 4.0, 4.0, 4.0],
--       [8.0, 8.0, 8.0, 8.0, 8.0]],
--      [[0.0, 0.0, 0.0, 0.0, 0.0],
--       [6.0, 6.0, 6.0, 6.0, 6.0],
--       [12.0, 12.0, 12.0, 12.0, 12.0]],
--      [[0.0, 0.0, 0.0, 0.0, 0.0],
--       [8.0, 8.0, 8.0, 8.0, 8.0],
--       [16.0, 16.0, 16.0, 16.0, 16.0]],
--      [[0.0, 0.0, 0.0, 0.0, 0.0],
--       [10.0, 10.0, 10.0, 10.0, 10.0],
--       [20.0, 20.0, 20.0, 20.0, 20.0]]] )
--
--
-- }
fun ([f64],[[[f64]]]) main([int] arr) =
  let vs = map(fn [f64] (int a) =>
                  map( fn f64 (int x) => f64(2*x*a)
                     , iota(3) )
              ,  arr)
  in (reduce( fn [f64] ([f64] a, [f64] b) =>
                zipWith(+, a, b)
            , replicate(3,0.0), vs),
      map(fn [[f64]] ([f64] r) =>
             transpose(replicate(5, r)),
          vs))


fun f64 main0([int] arr) =
  reduce( +, 0.0, map(f64, map(2*, arr)))

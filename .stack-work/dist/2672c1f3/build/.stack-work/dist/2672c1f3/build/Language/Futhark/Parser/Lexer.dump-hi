
==================== FINAL INTERFACE ====================
2016-08-04 10:11:13.2891865 UTC

interface futha_GJqcXjzuDAgKwUW9oTf4td:Language.Futhark.Parser.Lexer 7103
  interface hash: b5b149f2edb51878e7c734177f2dce63
  ABI hash: 086a7f3058107d5585a81bf865cbc578
  export-list hash: baa5961847d4ca653f55f8c61f965cf8
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9d1c2e7fc293a342cc91697fce4484c7
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.Futhark.Parser.Lexer.scanTokens
  Language.Futhark.Parser.Lexer.L{Language.Futhark.Parser.Lexer.L}
  Language.Futhark.Parser.Lexer.Token{Language.Futhark.Parser.Lexer.ABS Language.Futhark.Parser.Lexer.AND Language.Futhark.Parser.Lexer.ARROW Language.Futhark.Parser.Lexer.AT Language.Futhark.Parser.Lexer.BAND Language.Futhark.Parser.Lexer.BANG Language.Futhark.Parser.Lexer.BOOL Language.Futhark.Parser.Lexer.BOR Language.Futhark.Parser.Lexer.CHAR Language.Futhark.Parser.Lexer.CHARLIT Language.Futhark.Parser.Lexer.COLON Language.Futhark.Parser.Lexer.COMMA Language.Futhark.Parser.Lexer.CONCAT Language.Futhark.Parser.Lexer.COPY Language.Futhark.Parser.Lexer.DEFAULT Language.Futhark.Parser.Lexer.DIVIDE Language.Futhark.Parser.Lexer.DO Language.Futhark.Parser.Lexer.DOT Language.Futhark.Parser.Lexer.ELSE Language.Futhark.Parser.Lexer.EMPTY Language.Futhark.Parser.Lexer.END Language.Futhark.Parser.Lexer.ENTRY Language.Futhark.Parser.Lexer.EOF Language.Futhark.Parser.Lexer.EQU Language.Futhark.Parser.Lexer.EQU2 Language.Futhark.Parser.Lexer.F32 Language.Futhark.Parser.Lexer.F32LIT Language.Futhark.Parser.Lexer.F64 Language.Futhark.Parser.Lexer.F64LIT Language.Futhark.Parser.Lexer.FALSE Language.Futhark.Parser.Lexer.FILTER Language.Futhark.Parser.Lexer.FLOAT Language.Futhark.Parser.Lexer.FN Language.Futhark.Parser.Lexer.FOR Language.Futhark.Parser.Lexer.FUN Language.Futhark.Parser.Lexer.GEQ Language.Futhark.Parser.Lexer.GTH Language.Futhark.Parser.Lexer.I16 Language.Futhark.Parser.Lexer.I16LIT Language.Futhark.Parser.Lexer.I32 Language.Futhark.Parser.Lexer.I32LIT Language.Futhark.Parser.Lexer.I64 Language.Futhark.Parser.Lexer.I64LIT Language.Futhark.Parser.Lexer.I8 Language.Futhark.Parser.Lexer.I8LIT Language.Futhark.Parser.Lexer.ID Language.Futhark.Parser.Lexer.IF Language.Futhark.Parser.Lexer.IN Language.Futhark.Parser.Lexer.INCLUDE Language.Futhark.Parser.Lexer.INT Language.Futhark.Parser.Lexer.INTLIT Language.Futhark.Parser.Lexer.IOTA Language.Futhark.Parser.Lexer.IS Language.Futhark.Parser.Lexer.LBRACKET Language.Futhark.Parser.Lexer.LCURLY Language.Futhark.Parser.Lexer.LEQ Language.Futhark.Parser.Lexer.LET Language.Futhark.Parser.Lexer.LOOP Language.Futhark.Parser.Lexer.LPAR Language.Futhark.Parser.Lexer.LTH Language.Futhark.Parser.Lexer.MAP Language.Futhark.Parser.Lexer.MINUS Language.Futhark.Parser.Lexer.MOD Language.Futhark.Parser.Lexer.NEQU Language.Futhark.Parser.Lexer.OR Language.Futhark.Parser.Lexer.PARTITION Language.Futhark.Parser.Lexer.PLUS Language.Futhark.Parser.Lexer.POW Language.Futhark.Parser.Lexer.QUOT Language.Futhark.Parser.Lexer.RBRACKET Language.Futhark.Parser.Lexer.RCURLY Language.Futhark.Parser.Lexer.REALLIT Language.Futhark.Parser.Lexer.REARRANGE Language.Futhark.Parser.Lexer.REDUCE Language.Futhark.Parser.Lexer.REDUCECOMM Language.Futhark.Parser.Lexer.REM Language.Futhark.Parser.Lexer.REPLICATE Language.Futhark.Parser.Lexer.RESHAPE Language.Futhark.Parser.Lexer.ROTATE Language.Futhark.Parser.Lexer.RPAR Language.Futhark.Parser.Lexer.SCAN Language.Futhark.Parser.Lexer.SETTO Language.Futhark.Parser.Lexer.SHIFTL Language.Futhark.Parser.Lexer.SHIFTR Language.Futhark.Parser.Lexer.SID Language.Futhark.Parser.Lexer.SIG Language.Futhark.Parser.Lexer.SIGNATURE Language.Futhark.Parser.Lexer.SIGNUM Language.Futhark.Parser.Lexer.SIZE Language.Futhark.Parser.Lexer.SPLIT Language.Futhark.Parser.Lexer.STREAM_MAP Language.Futhark.Parser.Lexer.STREAM_MAPPER Language.Futhark.Parser.Lexer.STREAM_RED Language.Futhark.Parser.Lexer.STREAM_REDPER Language.Futhark.Parser.Lexer.STREAM_SEQ Language.Futhark.Parser.Lexer.STRINGLIT Language.Futhark.Parser.Lexer.STRUCT Language.Futhark.Parser.Lexer.THEN Language.Futhark.Parser.Lexer.TILDE Language.Futhark.Parser.Lexer.TIMES Language.Futhark.Parser.Lexer.TRANSPOSE Language.Futhark.Parser.Lexer.TRUE Language.Futhark.Parser.Lexer.TYPE Language.Futhark.Parser.Lexer.TYPE_ARROW Language.Futhark.Parser.Lexer.U16 Language.Futhark.Parser.Lexer.U16LIT Language.Futhark.Parser.Lexer.U32 Language.Futhark.Parser.Lexer.U32LIT Language.Futhark.Parser.Lexer.U64 Language.Futhark.Parser.Lexer.U64LIT Language.Futhark.Parser.Lexer.U8 Language.Futhark.Parser.Lexer.U8LIT Language.Futhark.Parser.Lexer.UNDERSCORE Language.Futhark.Parser.Lexer.UNSAFE Language.Futhark.Parser.Lexer.UNZIP Language.Futhark.Parser.Lexer.VAL Language.Futhark.Parser.Lexer.WHILE Language.Futhark.Parser.Lexer.WITH Language.Futhark.Parser.Lexer.WRITE Language.Futhark.Parser.Lexer.XOR Language.Futhark.Parser.Lexer.ZIP Language.Futhark.Parser.Lexer.ZIPWITH Language.Futhark.Parser.Lexer.ZSHIFTR}
module dependencies: Futhark.Util.Pretty Language.Futhark.Core
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0 binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I integer-gmp-1.0.0.0
                      mainland-pretty-0.4.1.4@mainl_KnIUy4mTEecCOphhB8nGQj
                      srcloc-0.5.1.0@srclo_IrVSavrho0x78ZSJU92mrC
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
import  -/  array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA:Data.Array 6e22602c1cc5e362609f0924a7c0a209
import  -/  array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA:Data.Array.Base 7736ce724c32fec5ae0fcf43571e8a85
import  -/  base-4.8.2.0:Control.Applicative a8ebf5ad4932b411ad7725da68be9801
import  -/  base-4.8.2.0:Control.Monad 480c5067477275068c9b98be08410df9
import  -/  base-4.8.2.0:Data.Bits 87f514c5f0e66e224843da33c04aa38b
import  -/  base-4.8.2.0:Data.Char c8f827952d4111ae2e47c0b105217cdb
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Function 6b13a8d3a5e3bd757a91434dce3fc7f3
import  -/  base-4.8.2.0:Data.Int 1419fa899a36eeb2bd16fdb7f0a89738
import  -/  base-4.8.2.0:Data.Word ec8deb535202352cc8b509b14004bcbd
import  -/  base-4.8.2.0:GHC.Arr 70f35e6bfbc61995e045edb612354887
import  -/  base-4.8.2.0:GHC.Base a4939789b2cfd60b36ed163e56a623cd
import  -/  base-4.8.2.0:GHC.Exts dba55c2c113578dc7ef7f7530324cbc9
import  -/  base-4.8.2.0:GHC.IO bb5b81adcea33b14bd4abe16d7dde45f
import  -/  base-4.8.2.0:GHC.Int 28d8a9f7cfc272358fb4631d98c579ce
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Read b423b4506a014855edbd329b567629f3
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:GHC.Word 10dc88543d98000abab9695a1019767d
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.Read ef0ef92fb7358ae94bab089940adfd2a
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Internal fe5d057ff2b226bcbbb8dc734ad2495a
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Lazy 381d43ef4fab40c90f7ad267b585f3f2
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Lazy.Internal 53fadf747c97476e546e01c57d904b17
import  -/  Language.Futhark.Core 4d8fcc01b4c0611c71fec8b2caa41d68
  exports: 944381a39a11da48ff24531dca3a35c8
  Name 6f31ab23d447a5092c4e7208963f26d4
  nameFromText 2ca3b8f1a88b7067f79cfb73bd6e71ec
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  srcloc-0.5.1.0@srclo_IrVSavrho0x78ZSJU92mrC:Data.Loc f4b2b54fab2c8be1b1da75545acb27c8
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text a21462e4d9d23b8c5e0572484b88d821
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Encoding da0989e4949b30180073a856c4632e94
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Internal 762ad762817f3041e69c24778b8286ab
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show f0d5b3ef5924f10bcf05f86769423e58
addDependentFile "C:\Program Files\Haskell Platform\7.10.3\lib\include\ghcversion.h"
addDependentFile "C:\Program Files\Haskell Platform\7.10.3\lib\include\ghcconfig.h"
addDependentFile "C:\Program Files\Haskell Platform\7.10.3\lib\include\ghcplatform.h"
addDependentFile "C:\Program Files\Haskell Platform\7.10.3\lib\include\ghcautoconf.h"
addDependentFile ".stack-work\dist\2672c1f3\build\autogen\cabal_macros.h"
f6d9087504b8d47911ccdb8bc9bb8f2b
  $fApplicativeAlex ::
    GHC.Base.Applicative Language.Futhark.Parser.Lexer.Alex
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Parser.Lexer.Alex
                  Language.Futhark.Parser.Lexer.$fFunctorAlex
                  Language.Futhark.Parser.Lexer.$fApplicativeAlex_$cpure
                  Language.Futhark.Parser.Lexer.$fApplicativeAlex_$sap
                  Language.Futhark.Parser.Lexer.$fApplicativeAlex_$c*>
                  Language.Futhark.Parser.Lexer.$fApplicativeAlex_$c<* -}
f6d9087504b8d47911ccdb8bc9bb8f2b
  $fApplicativeAlex1 ::
    Language.Futhark.Parser.Lexer.Alex a
    -> Language.Futhark.Parser.Lexer.Alex b
    -> Language.Futhark.Parser.Lexer.AlexState
    -> Data.Either.Either
         GHC.Base.String (Language.Futhark.Parser.Lexer.AlexState, a)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: (\ @ a23
                   @ b
                   eta :: Language.Futhark.Parser.Lexer.Alex a23
                   eta1 :: Language.Futhark.Parser.Lexer.Alex b
                   eta2 :: Language.Futhark.Parser.Lexer.AlexState ->
                 Language.Futhark.Parser.Lexer.$fApplicativeAlex2
                   @ b
                   @ a23
                   (\ s :: Language.Futhark.Parser.Lexer.AlexState[OneShot] ->
                    case eta
                           `cast`
                         (Language.Futhark.Parser.Lexer.NTCo:Alex[0] <a23>_R)
                           s of wild {
                      Data.Either.Left msg
                      -> Data.Either.Left
                           @ GHC.Base.String
                           @ (Language.Futhark.Parser.Lexer.AlexState, b -> a23)
                           msg
                      Data.Either.Right ds
                      -> case ds of wild1 { (,) s' a24 ->
                         Data.Either.Right
                           @ GHC.Base.String
                           @ (Language.Futhark.Parser.Lexer.AlexState, b -> a23)
                           (s', \ ds1 :: b -> a24) } })
                     `cast`
                   (Sym (Language.Futhark.Parser.Lexer.NTCo:Alex[0] <b -> a23>_R))
                   eta1
                   eta2) -}
f6d9087504b8d47911ccdb8bc9bb8f2b
  $fApplicativeAlex2 ::
    Language.Futhark.Parser.Lexer.Alex (a -> b)
    -> Language.Futhark.Parser.Lexer.Alex a
    -> Language.Futhark.Parser.Lexer.AlexState
    -> Data.Either.Either
         GHC.Base.String (Language.Futhark.Parser.Lexer.AlexState, b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: (\ @ a23
                   @ b
                   m1 :: Language.Futhark.Parser.Lexer.Alex (a23 -> b)
                   m2 :: Language.Futhark.Parser.Lexer.Alex a23
                   eta :: Language.Futhark.Parser.Lexer.AlexState ->
                 case m1
                        `cast`
                      (Language.Futhark.Parser.Lexer.NTCo:Alex[0] <a23 -> b>_R)
                        eta of wild {
                   Data.Either.Left msg
                   -> Data.Either.Left
                        @ GHC.Base.String
                        @ (Language.Futhark.Parser.Lexer.AlexState, b)
                        msg
                   Data.Either.Right ds
                   -> case ds of wild1 { (,) s' a24 ->
                      case m2 `cast` (Language.Futhark.Parser.Lexer.NTCo:Alex[0] <a23>_R)
                             s' of wild2 {
                        Data.Either.Left msg
                        -> Data.Either.Left
                             @ GHC.Base.String
                             @ (Language.Futhark.Parser.Lexer.AlexState, b)
                             msg
                        Data.Either.Right ds1
                        -> case ds1 of wild3 { (,) s'1 a25 ->
                           Data.Either.Right
                             @ GHC.Base.String
                             @ (Language.Futhark.Parser.Lexer.AlexState, b)
                             (s'1, a24 a25) } } } }) -}
f6d9087504b8d47911ccdb8bc9bb8f2b
  $fApplicativeAlex3 ::
    Language.Futhark.Parser.Lexer.Alex a
    -> Language.Futhark.Parser.Lexer.Alex b
    -> Language.Futhark.Parser.Lexer.AlexState
    -> Data.Either.Either
         GHC.Base.String (Language.Futhark.Parser.Lexer.AlexState, b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: (\ @ a23
                   @ b
                   eta :: Language.Futhark.Parser.Lexer.Alex a23
                   eta1 :: Language.Futhark.Parser.Lexer.Alex b
                   eta2 :: Language.Futhark.Parser.Lexer.AlexState ->
                 Language.Futhark.Parser.Lexer.$fApplicativeAlex2
                   @ b
                   @ b
                   (\ eta3 :: Language.Futhark.Parser.Lexer.AlexState[OneShot] ->
                    case eta
                           `cast`
                         (Language.Futhark.Parser.Lexer.NTCo:Alex[0] <a23>_R)
                           eta3 of wild {
                      Data.Either.Left msg
                      -> Data.Either.Left
                           @ GHC.Base.String
                           @ (Language.Futhark.Parser.Lexer.AlexState, b -> b)
                           msg
                      Data.Either.Right ds
                      -> case ds of wild1 { (,) s' a24 ->
                         Data.Either.Right
                           @ GHC.Base.String
                           @ (Language.Futhark.Parser.Lexer.AlexState, b -> b)
                           (s', GHC.Base.id @ b) } })
                     `cast`
                   (Sym (Language.Futhark.Parser.Lexer.NTCo:Alex[0] <b -> b>_R))
                   eta1
                   eta2) -}
01772191f5ac686d3d38522b72bfd241
  $fApplicativeAlex4 ::
    a
    -> Language.Futhark.Parser.Lexer.AlexState
    -> Data.Either.Either
         GHC.Base.String (Language.Futhark.Parser.Lexer.AlexState, a)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ @ a23 a24 :: a23 s :: Language.Futhark.Parser.Lexer.AlexState ->
                 Data.Either.Right
                   @ GHC.Base.String
                   @ (Language.Futhark.Parser.Lexer.AlexState, a23)
                   (s, a24)) -}
f6d9087504b8d47911ccdb8bc9bb8f2b
  $fApplicativeAlex_$c*> ::
    Language.Futhark.Parser.Lexer.Alex a
    -> Language.Futhark.Parser.Lexer.Alex b
    -> Language.Futhark.Parser.Lexer.Alex b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Parser.Lexer.$fApplicativeAlex3
                  `cast`
                (forall a23 b.
                 <Language.Futhark.Parser.Lexer.Alex a23>_R
                 ->_R <Language.Futhark.Parser.Lexer.Alex b>_R
                 ->_R Sym (Language.Futhark.Parser.Lexer.NTCo:Alex[0] <b>_R)) -}
f6d9087504b8d47911ccdb8bc9bb8f2b
  $fApplicativeAlex_$c<* ::
    Language.Futhark.Parser.Lexer.Alex a
    -> Language.Futhark.Parser.Lexer.Alex b
    -> Language.Futhark.Parser.Lexer.Alex a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Parser.Lexer.$fApplicativeAlex1
                  `cast`
                (forall a23 b.
                 <Language.Futhark.Parser.Lexer.Alex a23>_R
                 ->_R <Language.Futhark.Parser.Lexer.Alex b>_R
                 ->_R Sym (Language.Futhark.Parser.Lexer.NTCo:Alex[0] <a23>_R)) -}
f6d9087504b8d47911ccdb8bc9bb8f2b
  $fApplicativeAlex_$cpure ::
    a -> Language.Futhark.Parser.Lexer.Alex a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Parser.Lexer.$fApplicativeAlex4
                  `cast`
                (forall a23.
                 <a23>_R
                 ->_R Sym (Language.Futhark.Parser.Lexer.NTCo:Alex[0] <a23>_R)) -}
f6d9087504b8d47911ccdb8bc9bb8f2b
  $fApplicativeAlex_$sap ::
    Language.Futhark.Parser.Lexer.Alex (a -> b)
    -> Language.Futhark.Parser.Lexer.Alex a
    -> Language.Futhark.Parser.Lexer.Alex b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Parser.Lexer.$fApplicativeAlex2
                  `cast`
                (forall a23 b.
                 <Language.Futhark.Parser.Lexer.Alex (a23 -> b)>_R
                 ->_R <Language.Futhark.Parser.Lexer.Alex a23>_R
                 ->_R Sym (Language.Futhark.Parser.Lexer.NTCo:Alex[0] <b>_R)) -}
0520c850c7f14cf9780a9cc7a2425f01
  $fEqAlexPosn ::
    GHC.Classes.Eq Language.Futhark.Parser.Lexer.AlexPosn
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Parser.Lexer.AlexPosn
                  Language.Futhark.Parser.Lexer.$fEqAlexPosn_$c==
                  Language.Futhark.Parser.Lexer.$fEqAlexPosn_$c/= -}
0520c850c7f14cf9780a9cc7a2425f01
  $fEqAlexPosn_$c/= ::
    Language.Futhark.Parser.Lexer.AlexPosn
    -> Language.Futhark.Parser.Lexer.AlexPosn -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(U,U,U)><S,1*U(U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a23 :: Language.Futhark.Parser.Lexer.AlexPosn
                   b :: Language.Futhark.Parser.Lexer.AlexPosn ->
                 case a23 of wild { Language.Futhark.Parser.Lexer.AlexPn dt dt1 dt2 ->
                 case b of wild1 { Language.Futhark.Parser.Lexer.AlexPn dt3 dt4 dt5 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# dt dt3) of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# dt1 dt4) of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# dt2 dt5) of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } } } }) -}
0520c850c7f14cf9780a9cc7a2425f01
  $fEqAlexPosn_$c== ::
    Language.Futhark.Parser.Lexer.AlexPosn
    -> Language.Futhark.Parser.Lexer.AlexPosn -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(U,U,U)><S,1*U(U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Language.Futhark.Parser.Lexer.AlexPosn
                   ds1 :: Language.Futhark.Parser.Lexer.AlexPosn ->
                 case ds of wild { Language.Futhark.Parser.Lexer.AlexPn dt dt1 dt2 ->
                 case ds1 of wild1 { Language.Futhark.Parser.Lexer.AlexPn dt3 dt4 dt5 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# dt dt3) of wild2 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# dt1 dt4) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# dt2 dt5) } } } }) -}
115386799e0e7fd1db294c1cf6ed8f65
  $fEqL ::
    GHC.Classes.Eq a =>
    GHC.Classes.Eq (Language.Futhark.Parser.Lexer.L a)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a23 $dEq :: GHC.Classes.Eq a23.
                  @ (Language.Futhark.Parser.Lexer.L a23)
                  (Language.Futhark.Parser.Lexer.$fEqL_$c== @ a23 $dEq)
                  (Language.Futhark.Parser.Lexer.$fEqL_$c/= @ a23 $dEq) -}
115386799e0e7fd1db294c1cf6ed8f65
  $fEqL_$c/= ::
    GHC.Classes.Eq a =>
    Language.Futhark.Parser.Lexer.L a
    -> Language.Futhark.Parser.Lexer.L a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a23
                   $dEq :: GHC.Classes.Eq a23
                   x :: Language.Futhark.Parser.Lexer.L a23
                   y :: Language.Futhark.Parser.Lexer.L a23 ->
                 GHC.Classes.not
                   (Language.Futhark.Parser.Lexer.$fEqL_$c== @ a23 $dEq x y)) -}
115386799e0e7fd1db294c1cf6ed8f65
  $fEqL_$c== ::
    GHC.Classes.Eq a =>
    Language.Futhark.Parser.Lexer.L a
    -> Language.Futhark.Parser.Lexer.L a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(A,U)><S,1*U(A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a23
                   $dEq :: GHC.Classes.Eq a23
                   ds :: Language.Futhark.Parser.Lexer.L a23
                   ds1 :: Language.Futhark.Parser.Lexer.L a23 ->
                 case ds of wild { Language.Futhark.Parser.Lexer.L ds2 x ->
                 case ds1 of wild1 { Language.Futhark.Parser.Lexer.L ds3 y ->
                 GHC.Classes.== @ a23 $dEq x y } }) -}
a14ab3129558c63a5645b2f0a6e0f0b4
  $fEqToken :: GHC.Classes.Eq Language.Futhark.Parser.Lexer.Token
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Parser.Lexer.Token
                  Language.Futhark.Parser.Lexer.$fEqToken_$c==
                  Language.Futhark.Parser.Lexer.$fEqToken_$c/= -}
a14ab3129558c63a5645b2f0a6e0f0b4
  $fEqToken_$c/= ::
    Language.Futhark.Parser.Lexer.Token
    -> Language.Futhark.Parser.Lexer.Token -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a23 :: Language.Futhark.Parser.Lexer.Token
                   b :: Language.Futhark.Parser.Lexer.Token ->
                 case Language.Futhark.Parser.Lexer.$fEqToken_$c== a23 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
a14ab3129558c63a5645b2f0a6e0f0b4
  $fEqToken_$c== ::
    Language.Futhark.Parser.Lexer.Token
    -> Language.Futhark.Parser.Lexer.Token -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
f6d9087504b8d47911ccdb8bc9bb8f2b
  $fFunctorAlex ::
    GHC.Base.Functor Language.Futhark.Parser.Lexer.Alex
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Parser.Lexer.Alex
                  Language.Futhark.Parser.Lexer.$fFunctorAlex_$cfmap
                  Language.Futhark.Parser.Lexer.$fFunctorAlex_$c<$ -}
f6d9087504b8d47911ccdb8bc9bb8f2b
  $fFunctorAlex1 ::
    a
    -> Language.Futhark.Parser.Lexer.Alex b
    -> Language.Futhark.Parser.Lexer.AlexState
    -> Data.Either.Either
         GHC.Base.String (Language.Futhark.Parser.Lexer.AlexState, a)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a23
                   @ b
                   eta :: a23
                   eta1 :: Language.Futhark.Parser.Lexer.Alex b
                   eta2 :: Language.Futhark.Parser.Lexer.AlexState ->
                 case eta1 `cast` (Language.Futhark.Parser.Lexer.NTCo:Alex[0] <b>_R)
                        eta2 of wild {
                   Data.Either.Left msg
                   -> Data.Either.Left
                        @ GHC.Base.String
                        @ (Language.Futhark.Parser.Lexer.AlexState, a23)
                        msg
                   Data.Either.Right ds
                   -> case ds of wild1 { (,) s' a24 ->
                      Data.Either.Right
                        @ GHC.Base.String
                        @ (Language.Futhark.Parser.Lexer.AlexState, a23)
                        (s', eta) } }) -}
f6d9087504b8d47911ccdb8bc9bb8f2b
  $fFunctorAlex2 ::
    (a -> b)
    -> Language.Futhark.Parser.Lexer.Alex a
    -> Language.Futhark.Parser.Lexer.AlexState
    -> Data.Either.Either
         GHC.Base.String (Language.Futhark.Parser.Lexer.AlexState, b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a23
                   @ b
                   f :: a23 -> b
                   m :: Language.Futhark.Parser.Lexer.Alex a23
                   s :: Language.Futhark.Parser.Lexer.AlexState ->
                 case m `cast` (Language.Futhark.Parser.Lexer.NTCo:Alex[0] <a23>_R)
                        s of wild {
                   Data.Either.Left msg
                   -> Data.Either.Left
                        @ GHC.Base.String
                        @ (Language.Futhark.Parser.Lexer.AlexState, b)
                        msg
                   Data.Either.Right ds
                   -> case ds of wild1 { (,) s' a24 ->
                      Data.Either.Right
                        @ GHC.Base.String
                        @ (Language.Futhark.Parser.Lexer.AlexState, b)
                        (s', f a24) } }) -}
c0933d2e723a0660c8270ac708eb449e
  $fFunctorAlexLastAcc ::
    GHC.Base.Functor Language.Futhark.Parser.Lexer.AlexLastAcc
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Parser.Lexer.AlexLastAcc
                  Language.Futhark.Parser.Lexer.$fFunctorAlexLastAcc_$cfmap
                  Language.Futhark.Parser.Lexer.$fFunctorAlexLastAcc_$c<$ -}
c0933d2e723a0660c8270ac708eb449e
  $fFunctorAlexLastAcc_$c<$ ::
    a
    -> Language.Futhark.Parser.Lexer.AlexLastAcc b
    -> Language.Futhark.Parser.Lexer.AlexLastAcc a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a23
                   @ b
                   eta :: a23
                   ds :: Language.Futhark.Parser.Lexer.AlexLastAcc b ->
                 case ds of wild {
                   Language.Futhark.Parser.Lexer.AlexNone
                   -> Language.Futhark.Parser.Lexer.AlexNone @ a23
                   Language.Futhark.Parser.Lexer.AlexLastAcc x y dt
                   -> Language.Futhark.Parser.Lexer.AlexLastAcc @ a23 eta y dt
                   Language.Futhark.Parser.Lexer.AlexLastSkip x dt
                   -> Language.Futhark.Parser.Lexer.AlexLastSkip @ a23 x dt }) -}
c0933d2e723a0660c8270ac708eb449e
  $fFunctorAlexLastAcc_$cfmap ::
    (a -> b)
    -> Language.Futhark.Parser.Lexer.AlexLastAcc a
    -> Language.Futhark.Parser.Lexer.AlexLastAcc b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a23
                   @ b
                   ds :: a23 -> b
                   ds1 :: Language.Futhark.Parser.Lexer.AlexLastAcc a23 ->
                 case ds1 of wild {
                   Language.Futhark.Parser.Lexer.AlexNone
                   -> Language.Futhark.Parser.Lexer.AlexNone @ b
                   Language.Futhark.Parser.Lexer.AlexLastAcc x y dt
                   -> Language.Futhark.Parser.Lexer.AlexLastAcc @ b (ds x) y dt
                   Language.Futhark.Parser.Lexer.AlexLastSkip x dt
                   -> Language.Futhark.Parser.Lexer.AlexLastSkip @ b x dt }) -}
f6d9087504b8d47911ccdb8bc9bb8f2b
  $fFunctorAlex_$c<$ ::
    a
    -> Language.Futhark.Parser.Lexer.Alex b
    -> Language.Futhark.Parser.Lexer.Alex a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Parser.Lexer.$fFunctorAlex1
                  `cast`
                (forall a23 b.
                 <a23>_R
                 ->_R <Language.Futhark.Parser.Lexer.Alex b>_R
                 ->_R Sym (Language.Futhark.Parser.Lexer.NTCo:Alex[0] <a23>_R)) -}
f6d9087504b8d47911ccdb8bc9bb8f2b
  $fFunctorAlex_$cfmap ::
    (a -> b)
    -> Language.Futhark.Parser.Lexer.Alex a
    -> Language.Futhark.Parser.Lexer.Alex b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Parser.Lexer.$fFunctorAlex2
                  `cast`
                (forall a23 b.
                 <a23 -> b>_R
                 ->_R <Language.Futhark.Parser.Lexer.Alex a23>_R
                 ->_R Sym (Language.Futhark.Parser.Lexer.NTCo:Alex[0] <b>_R)) -}
115386799e0e7fd1db294c1cf6ed8f65
  $fLocatedL :: Data.Loc.Located (Language.Futhark.Parser.Lexer.L a)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a23.
                  @ (Language.Futhark.Parser.Lexer.L a23)
                  (Language.Futhark.Parser.Lexer.$fLocatedL_$clocOf @ a23)
                  (Language.Futhark.Parser.Lexer.$fLocatedL_$clocOfList @ a23) -}
115386799e0e7fd1db294c1cf6ed8f65
  $fLocatedL_$clocOf ::
    Language.Futhark.Parser.Lexer.L a -> Data.Loc.Loc
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a23 ds :: Language.Futhark.Parser.Lexer.L a23 ->
                 case ds of wild { Language.Futhark.Parser.Lexer.L ds1 ds2 ->
                 ds1 `cast` (Data.Loc.NTCo:SrcLoc[0]) }) -}
115386799e0e7fd1db294c1cf6ed8f65
  $fLocatedL_$clocOfList ::
    [Language.Futhark.Parser.Lexer.L a] -> Data.Loc.Loc
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a23 xs :: [Language.Futhark.Parser.Lexer.L a23] ->
                 Data.Loc.$dmlocOfList_go
                   (GHC.Base.build
                      @ Data.Loc.Loc
                      (\ @ b1 c :: Data.Loc.Loc -> b1 -> b1[OneShot] n :: b1[OneShot] ->
                       GHC.Base.foldr
                         @ (Language.Futhark.Parser.Lexer.L a23)
                         @ b1
                         (GHC.Base.mapFB
                            @ Data.Loc.Loc
                            @ b1
                            @ (Language.Futhark.Parser.Lexer.L a23)
                            c
                            (Language.Futhark.Parser.Lexer.$fLocatedL_$clocOf @ a23))
                         n
                         xs))) -}
f6d9087504b8d47911ccdb8bc9bb8f2b
  $fMonadAlex :: GHC.Base.Monad Language.Futhark.Parser.Lexer.Alex
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Parser.Lexer.Alex
                  Language.Futhark.Parser.Lexer.$fApplicativeAlex
                  Language.Futhark.Parser.Lexer.$fMonadAlex_$c>>=
                  Language.Futhark.Parser.Lexer.$fMonadAlex_$c>>
                  Language.Futhark.Parser.Lexer.$fApplicativeAlex_$cpure
                  Language.Futhark.Parser.Lexer.$fMonadAlex_$s$dmfail -}
f6d9087504b8d47911ccdb8bc9bb8f2b
  $fMonadAlex1 ::
    Language.Futhark.Parser.Lexer.Alex a
    -> (a -> Language.Futhark.Parser.Lexer.Alex b)
    -> Language.Futhark.Parser.Lexer.AlexState
    -> Data.Either.Either
         GHC.Base.String (Language.Futhark.Parser.Lexer.AlexState, b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(C1(U))><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a23
                   @ b
                   m :: Language.Futhark.Parser.Lexer.Alex a23
                   k :: a23 -> Language.Futhark.Parser.Lexer.Alex b
                   s :: Language.Futhark.Parser.Lexer.AlexState ->
                 case m `cast` (Language.Futhark.Parser.Lexer.NTCo:Alex[0] <a23>_R)
                        s of wild {
                   Data.Either.Left msg
                   -> Data.Either.Left
                        @ GHC.Base.String
                        @ (Language.Futhark.Parser.Lexer.AlexState, b)
                        msg
                   Data.Either.Right ds
                   -> case ds of wild1 { (,) s' a24 ->
                      (k a24) `cast` (Language.Futhark.Parser.Lexer.NTCo:Alex[0] <b>_R)
                        s' } }) -}
f6d9087504b8d47911ccdb8bc9bb8f2b
  $fMonadAlex_$c>> ::
    Language.Futhark.Parser.Lexer.Alex a
    -> Language.Futhark.Parser.Lexer.Alex b
    -> Language.Futhark.Parser.Lexer.Alex b
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a23
                   @ b
                   m1 :: Language.Futhark.Parser.Lexer.Alex a23
                   k :: Language.Futhark.Parser.Lexer.Alex b
                   eta :: Language.Futhark.Parser.Lexer.AlexState ->
                 (Language.Futhark.Parser.Lexer.$fMonadAlex_$c>>=
                    @ a23
                    @ b
                    m1
                    (\ ds :: a23 -> k))
                   `cast`
                 (Language.Futhark.Parser.Lexer.NTCo:Alex[0] <b>_R)
                   eta)
                  `cast`
                (forall a23 b.
                 <Language.Futhark.Parser.Lexer.Alex a23>_R
                 ->_R <Language.Futhark.Parser.Lexer.Alex b>_R
                 ->_R Sym (Language.Futhark.Parser.Lexer.NTCo:Alex[0] <b>_R)) -}
f6d9087504b8d47911ccdb8bc9bb8f2b
  $fMonadAlex_$c>>= ::
    Language.Futhark.Parser.Lexer.Alex a
    -> (a -> Language.Futhark.Parser.Lexer.Alex b)
    -> Language.Futhark.Parser.Lexer.Alex b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(C1(U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Parser.Lexer.$fMonadAlex1
                  `cast`
                (forall a23 b.
                 <Language.Futhark.Parser.Lexer.Alex a23>_R
                 ->_R <a23 -> Language.Futhark.Parser.Lexer.Alex b>_R
                 ->_R Sym (Language.Futhark.Parser.Lexer.NTCo:Alex[0] <b>_R)) -}
f6d9087504b8d47911ccdb8bc9bb8f2b
  $fMonadAlex_$s$dmfail ::
    GHC.Base.String -> Language.Futhark.Parser.Lexer.Alex a
  {- Arity: 1, Strictness: <B,U>b,
     Unfolding: InlineRule (-1, True, True)
                (\ @ a23 eta :: [GHC.Types.Char] ->
                 GHC.Err.error @ (Language.Futhark.Parser.Lexer.Alex a23) eta) -}
0520c850c7f14cf9780a9cc7a2425f01
  $fShowAlexPosn ::
    GHC.Show.Show Language.Futhark.Parser.Lexer.AlexPosn
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Parser.Lexer.AlexPosn
                  Language.Futhark.Parser.Lexer.$fShowAlexPosn_$cshowsPrec
                  Language.Futhark.Parser.Lexer.$fShowAlexPosn_$cshow
                  Language.Futhark.Parser.Lexer.$fShowAlexPosn_$cshowList -}
0520c850c7f14cf9780a9cc7a2425f01
  $fShowAlexPosn1 ::
    Language.Futhark.Parser.Lexer.AlexPosn -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w12 :: Language.Futhark.Parser.Lexer.AlexPosn
                   w13 :: GHC.Base.String ->
                 case w12 of ww { Language.Futhark.Parser.Lexer.AlexPn ww1 ww2 ww3 ->
                 Language.Futhark.Parser.Lexer.$w$cshowsPrec 0 ww1 ww2 ww3 w13 }) -}
4f13ca0565deff194a09bac22361136a
  $fShowAlexPosn2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AlexPn "#) -}
0520c850c7f14cf9780a9cc7a2425f01
  $fShowAlexPosn_$cshow ::
    Language.Futhark.Parser.Lexer.AlexPosn -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Language.Futhark.Parser.Lexer.AlexPosn ->
                 Language.Futhark.Parser.Lexer.$fShowAlexPosn_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0520c850c7f14cf9780a9cc7a2425f01
  $fShowAlexPosn_$cshowList ::
    [Language.Futhark.Parser.Lexer.AlexPosn] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Language.Futhark.Parser.Lexer.AlexPosn
                   Language.Futhark.Parser.Lexer.$fShowAlexPosn1) -}
0520c850c7f14cf9780a9cc7a2425f01
  $fShowAlexPosn_$cshowsPrec ::
    GHC.Types.Int
    -> Language.Futhark.Parser.Lexer.AlexPosn -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w12 :: GHC.Types.Int
                   w13 :: Language.Futhark.Parser.Lexer.AlexPosn
                   w14 :: GHC.Base.String ->
                 case w12 of ww { GHC.Types.I# ww1 ->
                 case w13 of ww2 { Language.Futhark.Parser.Lexer.AlexPn ww3 ww4 ww5 ->
                 Language.Futhark.Parser.Lexer.$w$cshowsPrec
                   ww1
                   ww3
                   ww4
                   ww5
                   w14 } }) -}
a14ab3129558c63a5645b2f0a6e0f0b4
  $fShowToken :: GHC.Show.Show Language.Futhark.Parser.Lexer.Token
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Parser.Lexer.Token
                  Language.Futhark.Parser.Lexer.$fShowToken_$cshowsPrec
                  Language.Futhark.Parser.Lexer.$fShowToken_$cshow
                  Language.Futhark.Parser.Lexer.$fShowToken_$cshowList -}
a14ab3129558c63a5645b2f0a6e0f0b4
  $fShowToken1 ::
    Language.Futhark.Parser.Lexer.Token -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Language.Futhark.Parser.Lexer.$fShowToken_$cshowsPrec
                   Language.Futhark.Parser.Lexer.$fShowToken2) -}
5d0f097c987b99f9bbcf6e965999ce58
  $fShowToken10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COLON"#) -}
9a321d4b67f2670ea9a2a4d26a175337
  $fShowToken100 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IOTA"#) -}
559c5f5584eaf445a3c5ebd70bef306c
  $fShowToken101 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken102) -}
a95248aca0bf3c1d26cdd1c45acf1529
  $fShowToken102 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SIZE"#) -}
26b6fd7ff8937e93ec0120ab3133ff03
  $fShowToken103 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken104) -}
9cdee7825c7c2f450cc4f1dae946b32f
  $fShowToken104 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "WITH"#) -}
66b49dfab83a7f7b4081e5a1c080431f
  $fShowToken105 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken106) -}
50228b33efb5d1ca98fe448d4de46620
  $fShowToken106 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DO"#) -}
4abaefa366c3b97a738d06744dcd03d5
  $fShowToken107 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken108) -}
562cb21895c1b22ae993beb6962f2f4b
  $fShowToken108 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FOR"#) -}
86bcd39e71a92862c41e5313b7493d68
  $fShowToken109 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken110) -}
0c42ada60a9aa62a5f0ef96a747be373
  $fShowToken11 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken12) -}
a0338f4c34c48baefea08a4a91b33b15
  $fShowToken110 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SETTO"#) -}
5e650e126e7ae3047fdbd139765b978f
  $fShowToken111 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken112) -}
0841cf02c1d6bc6d92b6194b3312dbe2
  $fShowToken112 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ARROW"#) -}
384fc8a59e56e61fe74887d91ee0eb20
  $fShowToken113 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken114) -}
29ca3fab74254ba4e12e7c15c7365bf9
  $fShowToken114 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FN"#) -}
3093d1f50e072ec896ad14ee7fb9418b
  $fShowToken115 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken116) -}
edbbe24e3d1c964ac7b40a750c238039
  $fShowToken116 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FUN"#) -}
92b069e20c0dabf79688853ce3e809c8
  $fShowToken117 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken118) -}
ca50598db35a101ff59cb1e42215a5b3
  $fShowToken118 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UNDERSCORE"#) -}
1b12c2471bd7a36f94f6f963d11856c5
  $fShowToken119 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken120) -}
4ee5294d130a5f1b4f427529d52f4dda
  $fShowToken12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VAL"#) -}
cd135996736512c409788a52bb759fa3
  $fShowToken120 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COMMA"#) -}
51a602ee106ceee275977df079e1ce48
  $fShowToken121 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken122) -}
e3e0bb6079eaf3cda665a41270f6097f
  $fShowToken122 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RCURLY"#) -}
aafbddcc28aef1d799c86488d5b12d45
  $fShowToken123 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken124) -}
c2ec8d5608c74561d95c75e93cb4b43c
  $fShowToken124 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LCURLY"#) -}
93e75c20037b45c74ad5db6c36b1d0f1
  $fShowToken125 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken126) -}
78480330162aabb3c9269577230ca83b
  $fShowToken126 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RBRACKET"#) -}
94f7aea650f5283386bc44f54e956059
  $fShowToken127 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken128) -}
b2cb3aa012ae872b6d3dcde553584995
  $fShowToken128 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LBRACKET"#) -}
2eaa21db9c37e477c40385f0d70f6758
  $fShowToken129 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken130) -}
62e5bcb8b17b382fd6c864aa31523a60
  $fShowToken13 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken14) -}
3a43f83651870be521415605ecb193b3
  $fShowToken130 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RPAR"#) -}
fbbf23cbd1deddc248dfa0a8e2b52149
  $fShowToken131 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken132) -}
a099f97e2d67fcb06c53a0e9ae4408dc
  $fShowToken132 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LPAR"#) -}
b6c0277faa7b17b77d71aa1fff13ae2b
  $fShowToken133 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken134) -}
802189fe079291bb59a2730684f68517
  $fShowToken134 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "XOR"#) -}
a2cde3961910eda052185be139a51e19
  $fShowToken135 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken136) -}
c29719f51613b35ef2f8a965578ec9c9
  $fShowToken136 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BAND"#) -}
c5e00af84e278d7541deefc8d1426fc3
  $fShowToken137 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken138) -}
a09a6e43019a439d4c59d5251f77c772
  $fShowToken138 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BOR"#) -}
bc66027861bb2852e1bea3062717a9c3
  $fShowToken139 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken140) -}
297307bf01bbd94687cb5214a9439459
  $fShowToken14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "END"#) -}
0702e6ec725eb11aed944199a2038d1a
  $fShowToken140 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ZSHIFTR"#) -}
807e8ad39760f43f94cb7c55d4326bb1
  $fShowToken141 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken142) -}
b1745ad81774cd18825738162a32e22d
  $fShowToken142 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SHIFTR"#) -}
a43940530a5728866da2c08a9e73175c
  $fShowToken143 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken144) -}
1b2d7990aada89f5e9b3abf44fd5d5d4
  $fShowToken144 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SHIFTL"#) -}
edc3ffff5c6189124c6a7007f5d50f50
  $fShowToken145 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken146) -}
7c1cdf93345807c89c6861081e1894bb
  $fShowToken146 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "POW"#) -}
5e23c592bbb8d91fec8691ea71c9a9e3
  $fShowToken147 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken148) -}
2df40d3b9f107fd9ab42f830f32da2db
  $fShowToken148 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GEQ"#) -}
7766a5924a6cff66e83779bcc42eb20b
  $fShowToken149 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken150) -}
525bbf91f68c5528f053f36a646256b4
  $fShowToken15 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken16) -}
509f59b87e62efd61183c5812a6279a6
  $fShowToken150 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LEQ"#) -}
cdd79773b657fe8e48f8fd64142bcb91
  $fShowToken151 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken152) -}
22b4b466609a144922590d99d3729a07
  $fShowToken152 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GTH"#) -}
f983e98ddbad377e534646ad93242758
  $fShowToken153 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken154) -}
c20f4851bf00ac2581d950c3b02b95e9
  $fShowToken154 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LTH"#) -}
470d69cfa8dacf170110f2589c06a479
  $fShowToken155 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken156) -}
10dcb26efca3232ea55d63b1fc811491
  $fShowToken156 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NEQU"#) -}
b65ce7c91f48e3b0e24d2031c6a37e5e
  $fShowToken157 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken158) -}
7caceec1023775ad832c8556f3aaae27
  $fShowToken158 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EQU2"#) -}
1d49a2eff555c329bf5e26ad4d60bd99
  $fShowToken159 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken160) -}
6564320c3cc16cdf8622f92158451f0a
  $fShowToken16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "STRUCT"#) -}
09dbee4cfe0c2536ae9c40d7ddf56e0b
  $fShowToken160 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EQU"#) -}
f39071ee5685939e5071bfc99fe9df0b
  $fShowToken161 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken162) -}
56599e86b22a5cfa1b0c02f078b3b4fd
  $fShowToken162 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REM"#) -}
dd57d3a4e14b318dc055c366d46b0c94
  $fShowToken163 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken164) -}
462b1b22ba9b9a44121240c132538510
  $fShowToken164 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "QUOT"#) -}
637e7aea579324fa0bebc7c2864e47de
  $fShowToken165 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken166) -}
58410fcc64d5e99dbb9cf1a3b755cf89
  $fShowToken166 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MOD"#) -}
9f49577d3307c303c2c8ba733e909afd
  $fShowToken167 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken168) -}
1b4bc7292daf5d7598860fbffa7e1ee7
  $fShowToken168 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DIVIDE"#) -}
d668813c3e9a72edeb36c3b1cc3c6e1d
  $fShowToken169 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken170) -}
451436a89a575f7c0092514350433166
  $fShowToken17 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken18) -}
c35187e573ba1ab9fc57e4608b48938e
  $fShowToken170 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TIMES"#) -}
222848ffa9ce42e8d8887ee0e568a508
  $fShowToken171 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken172) -}
c503dfff242cdae612e7d877f70ca188
  $fShowToken172 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MINUS"#) -}
c3817067660e3fb6079092d3e2d88ec6
  $fShowToken173 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken174) -}
092cf4ff3e37fec0c101ecc10dbb40ec
  $fShowToken174 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PLUS"#) -}
b45d1eb38cc081561862a8d65e9617a1
  $fShowToken175 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CHARLIT "#) -}
d9bcf3d737df0832d20db080c509c747
  $fShowToken176 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "F64LIT "#) -}
bb003b9df739c3efb567b42ff38e7b99
  $fShowToken177 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "F32LIT "#) -}
4ad3ec67c1b9e1d1678038684979955b
  $fShowToken178 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REALLIT "#) -}
720918834c744085deff0d7cae30aa17
  $fShowToken179 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11) -}
79471b371ef890cf835271c81895b84b
  $fShowToken18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SIG"#) -}
e9c93147fbc835c9485767340216d9c6
  $fShowToken180 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "U64LIT "#) -}
7c5a17226c95cc6d1b85543a55febec9
  $fShowToken181 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "U32LIT "#) -}
6c8d1c6c24c15d638d54da01764c5dce
  $fShowToken182 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "U16LIT "#) -}
4d84ffe0ed6a4c8c69c6a95d80c54713
  $fShowToken183 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "U8LIT "#) -}
768b9843978aac89a39cc25734850207
  $fShowToken184 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "I64LIT "#) -}
340405a0387a63b1b04cfc0ad626fab1
  $fShowToken185 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "I32LIT "#) -}
059ea35070684c8d612cd3667e803cee
  $fShowToken186 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "I16LIT "#) -}
554dd5142073a79c44d24cc6407730e0
  $fShowToken187 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "I8LIT "#) -}
1ce8460986c724956ac11e914a532878
  $fShowToken188 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INTLIT "#) -}
31d7ff0ad5825db9dcb3a8d757879cfc
  $fShowToken189 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken190) -}
10926a42da87710b79f1c6adfbb6b149
  $fShowToken19 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken20) -}
f8ac895aa495288fe06d173dc13cc67d
  $fShowToken190 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DEFAULT"#) -}
97f4838d5cba3409e1adcd36f68c8cde
  $fShowToken191 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "STRINGLIT "#) -}
749d0a1725d8b628d45ea9114348745d
  $fShowToken192 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SID "#) -}
6e987ce2168c9630addbb8a14401ac06
  $fShowToken193 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ID "#) -}
5eb46ec1572909c4c4bef42376965a24
  $fShowToken194 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken195) -}
7168209a47daebe86eeb7fd63eee6f64
  $fShowToken195 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "F64"#) -}
d02431b852f96ce5e77a943e7db02537
  $fShowToken196 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken197) -}
fa5dc98419c68e6784020ecac5f2e1eb
  $fShowToken197 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "F32"#) -}
f8e6e954ee8c79800cd3dc4d3d29478a
  $fShowToken198 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken199) -}
91df66aa1eda9ee210821fda77bbbe40
  $fShowToken199 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FLOAT"#) -}
3df4c9be326194fc3be33d5ce73abb64
  $fShowToken2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
b86f7d00fb53607741e426d33b6ca5ab
  $fShowToken20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SIGNATURE"#) -}
194736df60d48b772947dd3891557a99
  $fShowToken200 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken201) -}
f58d14d537a442aac3a404afe4a6b5a8
  $fShowToken201 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CHAR"#) -}
4c9de0f63d5446aa641b036af19d0f91
  $fShowToken202 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken203) -}
2146a54c1a10a9d9eb4aa03d43d7cf66
  $fShowToken203 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BOOL"#) -}
08c8ebbb234e3f561244367bffe76561
  $fShowToken204 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken205) -}
9bd805417d22e24d0c6ff4fea200acb7
  $fShowToken205 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "U64"#) -}
c1ecb2c64ca85b7b84627b5d3a4d03b0
  $fShowToken206 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken207) -}
7e34a1bfc1f79f1ef9b5a65e0c2096b8
  $fShowToken207 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "U32"#) -}
f4eb2864c96c67bd15763dc693a4b1ad
  $fShowToken208 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken209) -}
ee6e2da39b69da6d2c7f96766d5c5faf
  $fShowToken209 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "U16"#) -}
57b7244bf7371fcbc7e1011961a13897
  $fShowToken21 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken22) -}
9e4af8f6ce39c940ca86064c323cb752
  $fShowToken210 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken211) -}
4f3f3dd2cbcb2745aad138c55139e243
  $fShowToken211 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "U8"#) -}
3037bb0a2397a07f909a8ee86d970f85
  $fShowToken212 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken213) -}
b509c4f6e7972f012f4fcc75afa0f137
  $fShowToken213 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "I64"#) -}
7c174faeaf4d90b6b01a1806b0663be0
  $fShowToken214 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken215) -}
b8828876dcf27dc90de51bb80aaf3495
  $fShowToken215 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "I32"#) -}
26383c791393039048393a610e8392d7
  $fShowToken216 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken217) -}
7f940cdb6cc18a10b908cdbc786de599
  $fShowToken217 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "I16"#) -}
544f1d1349621930fd6c42bf130ef0c5
  $fShowToken218 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken219) -}
70cd13fdbba53d0ba4f243734e489c3d
  $fShowToken219 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "I8"#) -}
b4719c2f9dae691777a53c957edc6835
  $fShowToken22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EOF"#) -}
a44e1e75043a45064f3ea710295c25c6
  $fShowToken220 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken221) -}
a264713a4aebf45c8d7c0a17b7bcddac
  $fShowToken221 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INT"#) -}
bc26a1578b786f9d8eb59e219b163cc2
  $fShowToken222 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken223) -}
63f51418f0ba76fffee997cd7975c963
  $fShowToken223 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IN"#) -}
debcea99e43b6827da502728260c062d
  $fShowToken224 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken225) -}
b0e94681736b6229b7013b15b5ddbbab
  $fShowToken225 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LOOP"#) -}
0a2788febff9ab1445539c320694e20f
  $fShowToken226 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken227) -}
01ed697cba064b0761fd2295d4b3d7df
  $fShowToken227 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LET"#) -}
87a44cf9ff225400f19114199db3eb5a
  $fShowToken228 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken229) -}
cc53b001290e90497705451d3d215faa
  $fShowToken229 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ELSE"#) -}
4de93a34cf806f3abfa7f139b3dde847
  $fShowToken23 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken24) -}
973638d4afcefcbd33fa69287f2425de
  $fShowToken230 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken231) -}
238fb251b5d6f5d9f104326ab656548a
  $fShowToken231 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "THEN"#) -}
dd24a5f9c43180ef9f8dc07b85ba7d7a
  $fShowToken232 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken233) -}
8e816b0d17d18b39c7a40a262fee69b9
  $fShowToken233 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IF"#) -}
3f227ab14524a2a0fc255a52f4feda94
  $fShowToken24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TYPE"#) -}
4a3c315e63d2ea2a82264a880237d002
  $fShowToken25 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken26) -}
6c6fec949c0deaaa4beaea5247be8f9c
  $fShowToken26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ENTRY"#) -}
ea21fb578dea91162e5feca3671e5220
  $fShowToken27 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken28) -}
5246b1e1a6c704802ea68c19f6468009
  $fShowToken28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INCLUDE"#) -}
4feedd7db68303550839a889de0e0971
  $fShowToken29 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken30) -}
ebf6ffe87da80724e10336dad4b45d65
  $fShowToken3 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken4) -}
2807465a568df455743fd0101dfdb803
  $fShowToken30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "WRITE"#) -}
1680565b95ab25b93793518a7d130dab
  $fShowToken31 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken32) -}
8f197ad6ba605c81eaf7145cc492fce0
  $fShowToken32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SIGNUM"#) -}
17f9b53ba79354d3cee0a288cd30f3e8
  $fShowToken33 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken34) -}
0d809ec94b1be9d99051ed1e334c6104
  $fShowToken34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABS"#) -}
09de8a5df367f2e6e8147c70c65f0fc6
  $fShowToken35 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken36) -}
d91d7d67f8b968f18308be7e03b9e7bc
  $fShowToken36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DOT"#) -}
3217891025ac617870ae2cf2d806bd8b
  $fShowToken37 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken38) -}
4406942b36109097d20d686810be993d
  $fShowToken38 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BANG"#) -}
b505108e9914c3057ed63ba20a219235
  $fShowToken39 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken40) -}
6f6397899b7d53fe25e4d9bfee2cd8ae
  $fShowToken4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TYPE_ARROW"#) -}
14f75bd19582531b044be57604fd5b7c
  $fShowToken40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "STREAM_SEQ"#) -}
905456d4254093c84ca524cbeff296f5
  $fShowToken41 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken42) -}
87b4a3aa1a5201b88257f5775ba96461
  $fShowToken42 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "STREAM_REDPER"#) -}
292d1dab1b6e505106d0baf54d009508
  $fShowToken43 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken44) -}
d1d4a496d3579e3e798d4b6b0728935e
  $fShowToken44 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "STREAM_RED"#) -}
37fdc8edb31d43f5326dbf185e2c01fe
  $fShowToken45 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken46) -}
37aaa948dbf39e2fdb19fd33b9f33d4d
  $fShowToken46 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "STREAM_MAPPER"#) -}
b02ccee9f84efa147d19798c64900d7a
  $fShowToken47 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken48) -}
e3455aa50cb34c509ec8c931e85dac77
  $fShowToken48 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "STREAM_MAP"#) -}
391920cd902779133b84e65ab9726b8a
  $fShowToken49 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken50) -}
375a5fe9081d86752f3756570687e6cf
  $fShowToken5 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken6) -}
71eb07485cb2c2451cea6a2a91605704
  $fShowToken50 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "WHILE"#) -}
82fe16664021cf26f84d16338622d502
  $fShowToken51 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken52) -}
6bb871e139712de012fa930425c41fd2
  $fShowToken52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COPY"#) -}
3cc69007f834b69e6dfcf892e1fae1ad
  $fShowToken53 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken54) -}
a53612ee34bd55f26e36e1e5f44febe6
  $fShowToken54 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EMPTY"#) -}
c995c24cbd1dc29b92171751d1c3f657
  $fShowToken55 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken56) -}
23e10cb12d5ac780d35f4842fb05793b
  $fShowToken56 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OR"#) -}
1942ec53bb9771c9115909173a9ed69b
  $fShowToken57 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken58) -}
12d8a3e54a49b74b46946c68c39c5e92
  $fShowToken58 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AND"#) -}
08a45b47678712939a7bb73df61af152
  $fShowToken59 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken60) -}
595a561e8ea103d0b27404b7201be682
  $fShowToken6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IS"#) -}
1018cac23000757de4d087d30ff4ab49
  $fShowToken60 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TILDE"#) -}
8010949874410c313bb1e1fa66bb830d
  $fShowToken61 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken62) -}
6b539b54498a03690deed7f3d593a7bb
  $fShowToken62 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FALSE"#) -}
9b19c7c714eb625c849b7c88a117a6c9
  $fShowToken63 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken64) -}
382b5e59bd644e64715d7feb2d52bdc1
  $fShowToken64 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TRUE"#) -}
07a35fc3560e8d214828950909a6807b
  $fShowToken65 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken66) -}
6d976c194c62d831ed18cf19008fb700
  $fShowToken66 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PARTITION"#) -}
d74d221a951b7dd5b007f2b4482463ba
  $fShowToken67 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken68) -}
bcc7b1478599d62cbc92818d4fbc4841
  $fShowToken68 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FILTER"#) -}
c5a8d4e67aec62a8b772326e069674ae
  $fShowToken69 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken70) -}
cf6293002689bc06238efa85cc7a5a08
  $fShowToken7 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken8) -}
b090aaa484d0ac38b94c27cc5fef5664
  $fShowToken70 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CONCAT"#) -}
d47cca52984224bf1484e5628c80482d
  $fShowToken71 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken72) -}
49548ddd07fa231b5fae7169b32408ea
  $fShowToken72 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SPLIT"#) -}
8d88bc6770c8438911060a3219ca8516
  $fShowToken73 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken74) -}
398d0a283d97b0f2e0b7bf00468adb6c
  $fShowToken74 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SCAN"#) -}
5751b76cde58bf482429caa3b8cac58e
  $fShowToken75 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken76) -}
5279f0bb3edfa112c53dce6abe3ca96a
  $fShowToken76 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UNSAFE"#) -}
89d5d6199e4d03226ef7e72269302c2b
  $fShowToken77 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken78) -}
9e991dd0f5dcd49518f38545caf2edec
  $fShowToken78 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UNZIP"#) -}
e147fbd6d1c0c7282ae25b0a9800dbbf
  $fShowToken79 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken80) -}
2a1b669dfc4f0e2bc1851fbec0040d6f
  $fShowToken8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AT"#) -}
8a3d903acd9fc5d2339e69a8a8934ecc
  $fShowToken80 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ZIP"#) -}
f76df211f69531c04c3c7de9d40616e8
  $fShowToken81 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken82) -}
c7fb805a3b1374d10ef31b0046d57a33
  $fShowToken82 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ZIPWITH"#) -}
2f1cf7814b7c56426317a65ffa258f14
  $fShowToken83 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken84) -}
205d78cda10ba69e018f46567b57b9bd
  $fShowToken84 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ROTATE"#) -}
84b9e1b67ce60a11a3151fff86e5b69a
  $fShowToken85 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken86) -}
8f7c69a1b6635830405f42216d5d474b
  $fShowToken86 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TRANSPOSE"#) -}
b544379382941b25e13d1aa3553dc1f7
  $fShowToken87 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken88) -}
a7b2d291750ff7de9b61b032698f30a8
  $fShowToken88 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REARRANGE"#) -}
bafc8187a64bb7a6a2b1cd24b48cbf58
  $fShowToken89 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken90) -}
494f229103585889d140c9f81e514bae
  $fShowToken9 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken10) -}
46078f7af5299342ccbbc230f9037b68
  $fShowToken90 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RESHAPE"#) -}
c0dc1e10a5bcaa93a548839543cb3da6
  $fShowToken91 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken92) -}
5276da0ae33f665e9aaaa9111b6a2184
  $fShowToken92 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REDUCECOMM"#) -}
a03d21866e22c36e0c9d4d11d42a754a
  $fShowToken93 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken94) -}
0a190b4a002fc0dc67bef87c81c99566
  $fShowToken94 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REDUCE"#) -}
bcc0aeab22dc6ac97608125a19315aa0
  $fShowToken95 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken96) -}
ff868393cb38c9d7a5b00556e7714642
  $fShowToken96 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MAP"#) -}
0014d47be689b1229ae3bfb1b197e575
  $fShowToken97 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken98) -}
41ec9db044ff6278767c3ae0adb1bd73
  $fShowToken98 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REPLICATE"#) -}
1ed4bcb49b8d2df3b473173ce23a56a8
  $fShowToken99 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Parser.Lexer.$fShowToken100) -}
a14ab3129558c63a5645b2f0a6e0f0b4
  $fShowToken_$cshow ::
    Language.Futhark.Parser.Lexer.Token -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
a14ab3129558c63a5645b2f0a6e0f0b4
  $fShowToken_$cshowList ::
    [Language.Futhark.Parser.Lexer.Token] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Language.Futhark.Parser.Lexer.Token
                   Language.Futhark.Parser.Lexer.$fShowToken1) -}
a14ab3129558c63a5645b2f0a6e0f0b4
  $fShowToken_$cshowsPrec ::
    GHC.Types.Int
    -> Language.Futhark.Parser.Lexer.Token -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: Language.Futhark.Parser.Lexer.Token ->
                 case ds1 of wild {
                   Language.Futhark.Parser.Lexer.IF
                   -> Language.Futhark.Parser.Lexer.$fShowToken232
                   Language.Futhark.Parser.Lexer.THEN
                   -> Language.Futhark.Parser.Lexer.$fShowToken230
                   Language.Futhark.Parser.Lexer.ELSE
                   -> Language.Futhark.Parser.Lexer.$fShowToken228
                   Language.Futhark.Parser.Lexer.LET
                   -> Language.Futhark.Parser.Lexer.$fShowToken226
                   Language.Futhark.Parser.Lexer.LOOP
                   -> Language.Futhark.Parser.Lexer.$fShowToken224
                   Language.Futhark.Parser.Lexer.IN
                   -> Language.Futhark.Parser.Lexer.$fShowToken222
                   Language.Futhark.Parser.Lexer.INT
                   -> Language.Futhark.Parser.Lexer.$fShowToken220
                   Language.Futhark.Parser.Lexer.I8
                   -> Language.Futhark.Parser.Lexer.$fShowToken218
                   Language.Futhark.Parser.Lexer.I16
                   -> Language.Futhark.Parser.Lexer.$fShowToken216
                   Language.Futhark.Parser.Lexer.I32
                   -> Language.Futhark.Parser.Lexer.$fShowToken214
                   Language.Futhark.Parser.Lexer.I64
                   -> Language.Futhark.Parser.Lexer.$fShowToken212
                   Language.Futhark.Parser.Lexer.U8
                   -> Language.Futhark.Parser.Lexer.$fShowToken210
                   Language.Futhark.Parser.Lexer.U16
                   -> Language.Futhark.Parser.Lexer.$fShowToken208
                   Language.Futhark.Parser.Lexer.U32
                   -> Language.Futhark.Parser.Lexer.$fShowToken206
                   Language.Futhark.Parser.Lexer.U64
                   -> Language.Futhark.Parser.Lexer.$fShowToken204
                   Language.Futhark.Parser.Lexer.BOOL
                   -> Language.Futhark.Parser.Lexer.$fShowToken202
                   Language.Futhark.Parser.Lexer.CHAR
                   -> Language.Futhark.Parser.Lexer.$fShowToken200
                   Language.Futhark.Parser.Lexer.FLOAT
                   -> Language.Futhark.Parser.Lexer.$fShowToken198
                   Language.Futhark.Parser.Lexer.F32
                   -> Language.Futhark.Parser.Lexer.$fShowToken196
                   Language.Futhark.Parser.Lexer.F64
                   -> Language.Futhark.Parser.Lexer.$fShowToken194
                   Language.Futhark.Parser.Lexer.ID b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Parser.Lexer.$fShowToken193
                             (Language.Futhark.Core.$w$cshowsPrec1 11 b1 x1)
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Parser.Lexer.$fShowToken193
                                (Language.Futhark.Core.$w$cshowsPrec1
                                   11
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1))) } }
                   Language.Futhark.Parser.Lexer.SID b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Parser.Lexer.$fShowToken192
                             (Language.Futhark.Core.$w$cshowsPrec1 11 b1 x1)
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Parser.Lexer.$fShowToken192
                                (Language.Futhark.Core.$w$cshowsPrec1
                                   11
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1))) } }
                   Language.Futhark.Parser.Lexer.STRINGLIT b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Parser.Lexer.$fShowToken191
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows6
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 x1)))
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Parser.Lexer.$fShowToken191
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows6
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows6
                                         (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1))))) } }
                   Language.Futhark.Parser.Lexer.DEFAULT
                   -> Language.Futhark.Parser.Lexer.$fShowToken189
                   Language.Futhark.Parser.Lexer.INTLIT b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Language.Futhark.Parser.Lexer.$fShowToken188
                            (case b1 of wild2 { GHC.Int.I64# x# ->
                             case GHC.Show.$wshowSignedInt 11 x# x1 of ww4 { (#,#) ww5 ww6 ->
                             GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1)) } }
                   Language.Futhark.Parser.Lexer.I8LIT b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Language.Futhark.Parser.Lexer.$fShowToken187
                            (case b1 of wild2 { GHC.Int.I8# x# ->
                             case GHC.Show.$wshowSignedInt 11 x# x1 of ww4 { (#,#) ww5 ww6 ->
                             GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1)) } }
                   Language.Futhark.Parser.Lexer.I16LIT b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Language.Futhark.Parser.Lexer.$fShowToken186
                            (case b1 of wild2 { GHC.Int.I16# x# ->
                             case GHC.Show.$wshowSignedInt 11 x# x1 of ww4 { (#,#) ww5 ww6 ->
                             GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1)) } }
                   Language.Futhark.Parser.Lexer.I32LIT b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Language.Futhark.Parser.Lexer.$fShowToken185
                            (case b1 of wild2 { GHC.Int.I32# x# ->
                             case GHC.Show.$wshowSignedInt 11 x# x1 of ww4 { (#,#) ww5 ww6 ->
                             GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1)) } }
                   Language.Futhark.Parser.Lexer.I64LIT b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Language.Futhark.Parser.Lexer.$fShowToken184
                            (case b1 of wild2 { GHC.Int.I64# x# ->
                             case GHC.Show.$wshowSignedInt 11 x# x1 of ww4 { (#,#) ww5 ww6 ->
                             GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1)) } }
                   Language.Futhark.Parser.Lexer.U8LIT b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Language.Futhark.Parser.Lexer.$fShowToken183
                            (case b1 of wild2 { GHC.Int.I8# x# ->
                             case GHC.Show.$wshowSignedInt 11 x# x1 of ww4 { (#,#) ww5 ww6 ->
                             GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1)) } }
                   Language.Futhark.Parser.Lexer.U16LIT b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Language.Futhark.Parser.Lexer.$fShowToken182
                            (case b1 of wild2 { GHC.Int.I16# x# ->
                             case GHC.Show.$wshowSignedInt 11 x# x1 of ww4 { (#,#) ww5 ww6 ->
                             GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1)) } }
                   Language.Futhark.Parser.Lexer.U32LIT b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Language.Futhark.Parser.Lexer.$fShowToken181
                            (case b1 of wild2 { GHC.Int.I32# x# ->
                             case GHC.Show.$wshowSignedInt 11 x# x1 of ww4 { (#,#) ww5 ww6 ->
                             GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1)) } }
                   Language.Futhark.Parser.Lexer.U64LIT b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Language.Futhark.Parser.Lexer.$fShowToken180
                            (case b1 of wild2 { GHC.Int.I64# x# ->
                             case GHC.Show.$wshowSignedInt 11 x# x1 of ww4 { (#,#) ww5 ww6 ->
                             GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1)) } }
                   Language.Futhark.Parser.Lexer.REALLIT b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww { GHC.Types.D# ww1 ->
                          GHC.Float.$w$sshowSignedFloat
                            GHC.Float.$fShowDouble_$sshowFloat
                            Language.Futhark.Parser.Lexer.$fShowToken179
                            ww1 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Parser.Lexer.$fShowToken178
                             (g x1)
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Parser.Lexer.$fShowToken178
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1))) } }
                   Language.Futhark.Parser.Lexer.F32LIT b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww { GHC.Types.F# ww1 ->
                          GHC.Float.$w$sshowSignedFloat1
                            GHC.Float.$fShowFloat_$sshowFloat
                            Language.Futhark.Parser.Lexer.$fShowToken179
                            ww1 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Parser.Lexer.$fShowToken177
                             (g x1)
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Parser.Lexer.$fShowToken177
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1))) } }
                   Language.Futhark.Parser.Lexer.F64LIT b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww { GHC.Types.D# ww1 ->
                          GHC.Float.$w$sshowSignedFloat
                            GHC.Float.$fShowDouble_$sshowFloat
                            Language.Futhark.Parser.Lexer.$fShowToken179
                            ww1 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Parser.Lexer.$fShowToken176
                             (g x1)
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Parser.Lexer.$fShowToken176
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1))) } }
                   Language.Futhark.Parser.Lexer.CHARLIT b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Parser.Lexer.$fShowToken175
                             (case b1 of ww { GHC.Types.C# ww1 ->
                              case ww1 of ds2 {
                                DEFAULT
                                -> GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.shows15
                                     (GHC.Show.$wshowLitChar
                                        ds2
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.shows15 x1))
                                '\'' -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows14 x1 } })
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Parser.Lexer.$fShowToken175
                                (case b1 of ww { GHC.Types.C# ww1 ->
                                 case ww1 of ds2 {
                                   DEFAULT
                                   -> GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.shows15
                                        (GHC.Show.$wshowLitChar
                                           ds2
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.shows15
                                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1)))
                                   '\''
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        GHC.Show.shows14
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1) } })) } }
                   Language.Futhark.Parser.Lexer.PLUS
                   -> Language.Futhark.Parser.Lexer.$fShowToken173
                   Language.Futhark.Parser.Lexer.MINUS
                   -> Language.Futhark.Parser.Lexer.$fShowToken171
                   Language.Futhark.Parser.Lexer.TIMES
                   -> Language.Futhark.Parser.Lexer.$fShowToken169
                   Language.Futhark.Parser.Lexer.DIVIDE
                   -> Language.Futhark.Parser.Lexer.$fShowToken167
                   Language.Futhark.Parser.Lexer.MOD
                   -> Language.Futhark.Parser.Lexer.$fShowToken165
                   Language.Futhark.Parser.Lexer.QUOT
                   -> Language.Futhark.Parser.Lexer.$fShowToken163
                   Language.Futhark.Parser.Lexer.REM
                   -> Language.Futhark.Parser.Lexer.$fShowToken161
                   Language.Futhark.Parser.Lexer.EQU
                   -> Language.Futhark.Parser.Lexer.$fShowToken159
                   Language.Futhark.Parser.Lexer.EQU2
                   -> Language.Futhark.Parser.Lexer.$fShowToken157
                   Language.Futhark.Parser.Lexer.NEQU
                   -> Language.Futhark.Parser.Lexer.$fShowToken155
                   Language.Futhark.Parser.Lexer.LTH
                   -> Language.Futhark.Parser.Lexer.$fShowToken153
                   Language.Futhark.Parser.Lexer.GTH
                   -> Language.Futhark.Parser.Lexer.$fShowToken151
                   Language.Futhark.Parser.Lexer.LEQ
                   -> Language.Futhark.Parser.Lexer.$fShowToken149
                   Language.Futhark.Parser.Lexer.GEQ
                   -> Language.Futhark.Parser.Lexer.$fShowToken147
                   Language.Futhark.Parser.Lexer.POW
                   -> Language.Futhark.Parser.Lexer.$fShowToken145
                   Language.Futhark.Parser.Lexer.SHIFTL
                   -> Language.Futhark.Parser.Lexer.$fShowToken143
                   Language.Futhark.Parser.Lexer.SHIFTR
                   -> Language.Futhark.Parser.Lexer.$fShowToken141
                   Language.Futhark.Parser.Lexer.ZSHIFTR
                   -> Language.Futhark.Parser.Lexer.$fShowToken139
                   Language.Futhark.Parser.Lexer.BOR
                   -> Language.Futhark.Parser.Lexer.$fShowToken137
                   Language.Futhark.Parser.Lexer.BAND
                   -> Language.Futhark.Parser.Lexer.$fShowToken135
                   Language.Futhark.Parser.Lexer.XOR
                   -> Language.Futhark.Parser.Lexer.$fShowToken133
                   Language.Futhark.Parser.Lexer.LPAR
                   -> Language.Futhark.Parser.Lexer.$fShowToken131
                   Language.Futhark.Parser.Lexer.RPAR
                   -> Language.Futhark.Parser.Lexer.$fShowToken129
                   Language.Futhark.Parser.Lexer.LBRACKET
                   -> Language.Futhark.Parser.Lexer.$fShowToken127
                   Language.Futhark.Parser.Lexer.RBRACKET
                   -> Language.Futhark.Parser.Lexer.$fShowToken125
                   Language.Futhark.Parser.Lexer.LCURLY
                   -> Language.Futhark.Parser.Lexer.$fShowToken123
                   Language.Futhark.Parser.Lexer.RCURLY
                   -> Language.Futhark.Parser.Lexer.$fShowToken121
                   Language.Futhark.Parser.Lexer.COMMA
                   -> Language.Futhark.Parser.Lexer.$fShowToken119
                   Language.Futhark.Parser.Lexer.UNDERSCORE
                   -> Language.Futhark.Parser.Lexer.$fShowToken117
                   Language.Futhark.Parser.Lexer.FUN
                   -> Language.Futhark.Parser.Lexer.$fShowToken115
                   Language.Futhark.Parser.Lexer.FN
                   -> Language.Futhark.Parser.Lexer.$fShowToken113
                   Language.Futhark.Parser.Lexer.ARROW
                   -> Language.Futhark.Parser.Lexer.$fShowToken111
                   Language.Futhark.Parser.Lexer.SETTO
                   -> Language.Futhark.Parser.Lexer.$fShowToken109
                   Language.Futhark.Parser.Lexer.FOR
                   -> Language.Futhark.Parser.Lexer.$fShowToken107
                   Language.Futhark.Parser.Lexer.DO
                   -> Language.Futhark.Parser.Lexer.$fShowToken105
                   Language.Futhark.Parser.Lexer.WITH
                   -> Language.Futhark.Parser.Lexer.$fShowToken103
                   Language.Futhark.Parser.Lexer.SIZE
                   -> Language.Futhark.Parser.Lexer.$fShowToken101
                   Language.Futhark.Parser.Lexer.IOTA
                   -> Language.Futhark.Parser.Lexer.$fShowToken99
                   Language.Futhark.Parser.Lexer.REPLICATE
                   -> Language.Futhark.Parser.Lexer.$fShowToken97
                   Language.Futhark.Parser.Lexer.MAP
                   -> Language.Futhark.Parser.Lexer.$fShowToken95
                   Language.Futhark.Parser.Lexer.REDUCE
                   -> Language.Futhark.Parser.Lexer.$fShowToken93
                   Language.Futhark.Parser.Lexer.REDUCECOMM
                   -> Language.Futhark.Parser.Lexer.$fShowToken91
                   Language.Futhark.Parser.Lexer.RESHAPE
                   -> Language.Futhark.Parser.Lexer.$fShowToken89
                   Language.Futhark.Parser.Lexer.REARRANGE
                   -> Language.Futhark.Parser.Lexer.$fShowToken87
                   Language.Futhark.Parser.Lexer.TRANSPOSE
                   -> Language.Futhark.Parser.Lexer.$fShowToken85
                   Language.Futhark.Parser.Lexer.ROTATE
                   -> Language.Futhark.Parser.Lexer.$fShowToken83
                   Language.Futhark.Parser.Lexer.ZIPWITH
                   -> Language.Futhark.Parser.Lexer.$fShowToken81
                   Language.Futhark.Parser.Lexer.ZIP
                   -> Language.Futhark.Parser.Lexer.$fShowToken79
                   Language.Futhark.Parser.Lexer.UNZIP
                   -> Language.Futhark.Parser.Lexer.$fShowToken77
                   Language.Futhark.Parser.Lexer.UNSAFE
                   -> Language.Futhark.Parser.Lexer.$fShowToken75
                   Language.Futhark.Parser.Lexer.SCAN
                   -> Language.Futhark.Parser.Lexer.$fShowToken73
                   Language.Futhark.Parser.Lexer.SPLIT
                   -> Language.Futhark.Parser.Lexer.$fShowToken71
                   Language.Futhark.Parser.Lexer.CONCAT
                   -> Language.Futhark.Parser.Lexer.$fShowToken69
                   Language.Futhark.Parser.Lexer.FILTER
                   -> Language.Futhark.Parser.Lexer.$fShowToken67
                   Language.Futhark.Parser.Lexer.PARTITION
                   -> Language.Futhark.Parser.Lexer.$fShowToken65
                   Language.Futhark.Parser.Lexer.TRUE
                   -> Language.Futhark.Parser.Lexer.$fShowToken63
                   Language.Futhark.Parser.Lexer.FALSE
                   -> Language.Futhark.Parser.Lexer.$fShowToken61
                   Language.Futhark.Parser.Lexer.TILDE
                   -> Language.Futhark.Parser.Lexer.$fShowToken59
                   Language.Futhark.Parser.Lexer.AND
                   -> Language.Futhark.Parser.Lexer.$fShowToken57
                   Language.Futhark.Parser.Lexer.OR
                   -> Language.Futhark.Parser.Lexer.$fShowToken55
                   Language.Futhark.Parser.Lexer.EMPTY
                   -> Language.Futhark.Parser.Lexer.$fShowToken53
                   Language.Futhark.Parser.Lexer.COPY
                   -> Language.Futhark.Parser.Lexer.$fShowToken51
                   Language.Futhark.Parser.Lexer.WHILE
                   -> Language.Futhark.Parser.Lexer.$fShowToken49
                   Language.Futhark.Parser.Lexer.STREAM_MAP
                   -> Language.Futhark.Parser.Lexer.$fShowToken47
                   Language.Futhark.Parser.Lexer.STREAM_MAPPER
                   -> Language.Futhark.Parser.Lexer.$fShowToken45
                   Language.Futhark.Parser.Lexer.STREAM_RED
                   -> Language.Futhark.Parser.Lexer.$fShowToken43
                   Language.Futhark.Parser.Lexer.STREAM_REDPER
                   -> Language.Futhark.Parser.Lexer.$fShowToken41
                   Language.Futhark.Parser.Lexer.STREAM_SEQ
                   -> Language.Futhark.Parser.Lexer.$fShowToken39
                   Language.Futhark.Parser.Lexer.BANG
                   -> Language.Futhark.Parser.Lexer.$fShowToken37
                   Language.Futhark.Parser.Lexer.DOT
                   -> Language.Futhark.Parser.Lexer.$fShowToken35
                   Language.Futhark.Parser.Lexer.ABS
                   -> Language.Futhark.Parser.Lexer.$fShowToken33
                   Language.Futhark.Parser.Lexer.SIGNUM
                   -> Language.Futhark.Parser.Lexer.$fShowToken31
                   Language.Futhark.Parser.Lexer.WRITE
                   -> Language.Futhark.Parser.Lexer.$fShowToken29
                   Language.Futhark.Parser.Lexer.INCLUDE
                   -> Language.Futhark.Parser.Lexer.$fShowToken27
                   Language.Futhark.Parser.Lexer.ENTRY
                   -> Language.Futhark.Parser.Lexer.$fShowToken25
                   Language.Futhark.Parser.Lexer.TYPE
                   -> Language.Futhark.Parser.Lexer.$fShowToken23
                   Language.Futhark.Parser.Lexer.EOF
                   -> Language.Futhark.Parser.Lexer.$fShowToken21
                   Language.Futhark.Parser.Lexer.SIGNATURE
                   -> Language.Futhark.Parser.Lexer.$fShowToken19
                   Language.Futhark.Parser.Lexer.SIG
                   -> Language.Futhark.Parser.Lexer.$fShowToken17
                   Language.Futhark.Parser.Lexer.STRUCT
                   -> Language.Futhark.Parser.Lexer.$fShowToken15
                   Language.Futhark.Parser.Lexer.END
                   -> Language.Futhark.Parser.Lexer.$fShowToken13
                   Language.Futhark.Parser.Lexer.VAL
                   -> Language.Futhark.Parser.Lexer.$fShowToken11
                   Language.Futhark.Parser.Lexer.COLON
                   -> Language.Futhark.Parser.Lexer.$fShowToken9
                   Language.Futhark.Parser.Lexer.AT
                   -> Language.Futhark.Parser.Lexer.$fShowToken7
                   Language.Futhark.Parser.Lexer.IS
                   -> Language.Futhark.Parser.Lexer.$fShowToken5
                   Language.Futhark.Parser.Lexer.TYPE_ARROW
                   -> Language.Futhark.Parser.Lexer.$fShowToken3 }) -}
87ffd079b9d30925f38a7aeed976f5b1
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Prim.Int#
                   ww2 :: GHC.Prim.Int#
                   ww3 :: GHC.Prim.Int#
                   w12 :: GHC.Base.String ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ x :: GHC.Base.String[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Language.Futhark.Parser.Lexer.$fShowAlexPosn2
                       (case GHC.Show.$wshowSignedInt
                               11
                               ww1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case GHC.Show.$wshowSignedInt
                                          11
                                          ww2
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showSpace1
                                             (case GHC.Show.$wshowSignedInt
                                                     11
                                                     ww3
                                                     x of ww4 { (#,#) ww5 ww6 ->
                                              GHC.Types.:
                                                @ GHC.Types.Char
                                                ww5
                                                ww6 })) of ww4 { (#,#) ww5 ww6 ->
                                   GHC.Types.:
                                     @ GHC.Types.Char
                                     ww5
                                     ww6 })) of ww4 { (#,#) ww5 ww6 ->
                        GHC.Types.: @ GHC.Types.Char ww5 ww6 })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p w12
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w12)) }) -}
3461f54d965cc3f061fe676c3a71c71e
  $wa ::
    Language.Futhark.Parser.Lexer.AlexPosn
    -> GHC.Prim.Int#
    -> Data.ByteString.Lazy.Internal.ByteString
    -> GHC.Prim.Char#
    -> GHC.Prim.Int#
    -> Data.Either.Either
         GHC.Base.String
         (Language.Futhark.Parser.Lexer.AlexState,
          ((GHC.Types.Int, GHC.Types.Int, GHC.Types.Int),
           (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int),
           Language.Futhark.Parser.Lexer.Token))
  {- Arity: 5, Strictness: <S,U><L,U><L,U><L,U><L,U>, Inline: [0] -}
f6d9087504b8d47911ccdb8bc9bb8f2b
  newtype Alex a
    = Alex {unAlex :: Language.Futhark.Parser.Lexer.AlexState
                      -> Data.Either.Either
                           GHC.Base.String (Language.Futhark.Parser.Lexer.AlexState, a)}
91b7781c90fd8507b028fa88f2fdd497
  type role AlexAcc representational phantom
  data AlexAcc a user = AlexAccNone | AlexAcc a | AlexAccSkip
    Promotable
4e5f3745d70167eecdd08aa77d36ea63
  type AlexAction result =
    Language.Futhark.Parser.Lexer.AlexInput
    -> GHC.Int.Int64 -> Language.Futhark.Parser.Lexer.Alex result
bf2bde22e0f4fc9d8bf21bce695256da
  data AlexAddr = AlexA# GHC.Prim.Addr#
f4b6588539ab7c366090daa99f56ed1f
  type AlexInput =
    (Language.Futhark.Parser.Lexer.AlexPosn,
     GHC.Types.Char,
     Data.ByteString.Lazy.Internal.ByteString,
     GHC.Int.Int64)
c0933d2e723a0660c8270ac708eb449e
  data AlexLastAcc a
    = AlexNone
    | AlexLastAcc a
                  !Language.Futhark.Parser.Lexer.AlexInput
                  {-# UNPACK #-}GHC.Types.Int
    | AlexLastSkip !Language.Futhark.Parser.Lexer.AlexInput
                   {-# UNPACK #-}GHC.Types.Int
0520c850c7f14cf9780a9cc7a2425f01
  data AlexPosn
    = AlexPn {-# UNPACK #-}GHC.Types.Int
             {-# UNPACK #-}GHC.Types.Int
             {-# UNPACK #-}GHC.Types.Int
f225dc121373b49ac4bd6d6e8b305e74
  data AlexReturn a
    = AlexEOF
    | AlexError !Language.Futhark.Parser.Lexer.AlexInput
    | AlexSkip !Language.Futhark.Parser.Lexer.AlexInput
               {-# UNPACK #-}GHC.Types.Int
    | AlexToken !Language.Futhark.Parser.Lexer.AlexInput
                {-# UNPACK #-}GHC.Types.Int
                a
32c697ea901d9e55b5f4ab9e00385707
  data AlexState
    = AlexState {alex_pos :: !Language.Futhark.Parser.Lexer.AlexPosn,
                 alex_bpos :: {-# UNPACK #-}GHC.Int.Int64,
                 alex_inp :: Data.ByteString.Lazy.Internal.ByteString,
                 alex_chr :: {-# UNPACK #-}GHC.Types.Char,
                 alex_scd :: {-# UNPACK #-}GHC.Types.Int}
ec53f7b2c90736fcb6f478ba2e44a78a
  type Byte = GHC.Word.Word8
115386799e0e7fd1db294c1cf6ed8f65
  data L a = L Data.Loc.SrcLoc a
a14ab3129558c63a5645b2f0a6e0f0b4
  data Token
    = IF
    | THEN
    | ELSE
    | LET
    | LOOP
    | IN
    | INT
    | I8
    | I16
    | I32
    | I64
    | U8
    | U16
    | U32
    | U64
    | BOOL
    | CHAR
    | FLOAT
    | F32
    | F64
    | ID Language.Futhark.Core.Name
    | SID Language.Futhark.Core.Name
    | STRINGLIT GHC.Base.String
    | DEFAULT
    | INTLIT GHC.Int.Int64
    | I8LIT GHC.Int.Int8
    | I16LIT GHC.Int.Int16
    | I32LIT GHC.Int.Int32
    | I64LIT GHC.Int.Int64
    | U8LIT GHC.Int.Int8
    | U16LIT GHC.Int.Int16
    | U32LIT GHC.Int.Int32
    | U64LIT GHC.Int.Int64
    | REALLIT GHC.Types.Double
    | F32LIT GHC.Types.Float
    | F64LIT GHC.Types.Double
    | CHARLIT GHC.Types.Char
    | PLUS
    | MINUS
    | TIMES
    | DIVIDE
    | MOD
    | QUOT
    | REM
    | EQU
    | EQU2
    | NEQU
    | LTH
    | GTH
    | LEQ
    | GEQ
    | POW
    | SHIFTL
    | SHIFTR
    | ZSHIFTR
    | BOR
    | BAND
    | XOR
    | LPAR
    | RPAR
    | LBRACKET
    | RBRACKET
    | LCURLY
    | RCURLY
    | COMMA
    | UNDERSCORE
    | FUN
    | FN
    | ARROW
    | SETTO
    | FOR
    | DO
    | WITH
    | SIZE
    | IOTA
    | REPLICATE
    | MAP
    | REDUCE
    | REDUCECOMM
    | RESHAPE
    | REARRANGE
    | TRANSPOSE
    | ROTATE
    | ZIPWITH
    | ZIP
    | UNZIP
    | UNSAFE
    | SCAN
    | SPLIT
    | CONCAT
    | FILTER
    | PARTITION
    | TRUE
    | FALSE
    | TILDE
    | AND
    | OR
    | EMPTY
    | COPY
    | WHILE
    | STREAM_MAP
    | STREAM_MAPPER
    | STREAM_RED
    | STREAM_REDPER
    | STREAM_SEQ
    | BANG
    | DOT
    | ABS
    | SIGNUM
    | WRITE
    | INCLUDE
    | ENTRY
    | TYPE
    | EOF
    | SIGNATURE
    | SIG
    | STRUCT
    | END
    | VAL
    | COLON
    | AT
    | IS
    | TYPE_ARROW
f37949528d511de6da82724f68c3443e
  alexStartPos :: Language.Futhark.Parser.Lexer.AlexPosn
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.Futhark.Parser.Lexer.AlexPn 0 1 1) -}
cb67c12c932bcb019eab7a79e0595eeb
  alex_bpos ::
    Language.Futhark.Parser.Lexer.AlexState -> GHC.Int.Int64
  RecSel Language.Futhark.Parser.Lexer.AlexState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*H,U,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Language.Futhark.Parser.Lexer.AlexState ->
                 case ds of wild { Language.Futhark.Parser.Lexer.AlexState ds1 dt ds2 dt1 dt2 ->
                 GHC.Int.I64# dt }) -}
07484931cd8eb37a278c7e2922c360b4
  alex_chr ::
    Language.Futhark.Parser.Lexer.AlexState -> GHC.Types.Char
  RecSel Language.Futhark.Parser.Lexer.AlexState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*H,A,A,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Language.Futhark.Parser.Lexer.AlexState ->
                 case ds of wild { Language.Futhark.Parser.Lexer.AlexState ds1 dt ds2 dt1 dt2 ->
                 GHC.Types.C# dt1 }) -}
b8863a8112d1c2449425f1f763fae100
  alex_inp ::
    Language.Futhark.Parser.Lexer.AlexState
    -> Data.ByteString.Lazy.Internal.ByteString
  RecSel Language.Futhark.Parser.Lexer.AlexState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLSLL),1*U(1*H,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Language.Futhark.Parser.Lexer.AlexState ->
                 case ds of wild { Language.Futhark.Parser.Lexer.AlexState ds1 dt ds2 dt1 dt2 ->
                 ds2 }) -}
94a717fae2505097aa9ed079bf477fab
  alex_pos ::
    Language.Futhark.Parser.Lexer.AlexState
    -> Language.Futhark.Parser.Lexer.AlexPosn
  RecSel Language.Futhark.Parser.Lexer.AlexState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(U(U,U,U),A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Language.Futhark.Parser.Lexer.AlexState ->
                 case ds of wild { Language.Futhark.Parser.Lexer.AlexState ds1 dt ds2 dt1 dt2 ->
                 ds1 }) -}
20e400c8eb671eeeb704afffc474b061
  alex_scd ::
    Language.Futhark.Parser.Lexer.AlexState -> GHC.Types.Int
  RecSel Language.Futhark.Parser.Lexer.AlexState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*H,A,A,A,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Language.Futhark.Parser.Lexer.AlexState ->
                 case ds of wild { Language.Futhark.Parser.Lexer.AlexState ds1 dt ds2 dt1 dt2 ->
                 GHC.Types.I# dt2 }) -}
fb15c63ddedfa52b2c5c444d72153d0e
  scanTokens ::
    GHC.IO.FilePath
    -> Data.Text.Internal.Text
    -> Data.Either.Either
         GHC.Base.String
         [Language.Futhark.Parser.Lexer.L
            Language.Futhark.Parser.Lexer.Token]
  {- Arity: 2, Strictness: <L,U><L,1*U(U,U,1*U)>,
     Unfolding: (\ file :: GHC.IO.FilePath
                   str :: Data.Text.Internal.Text ->
                 letrec {
                   $wa1 :: Language.Futhark.Parser.Lexer.AlexPosn
                           -> GHC.Prim.Int#
                           -> Data.ByteString.Lazy.Internal.ByteString
                           -> GHC.Prim.Char#
                           -> GHC.Prim.Int#
                           -> Data.Either.Either
                                GHC.Base.String
                                (Language.Futhark.Parser.Lexer.AlexState,
                                 [Language.Futhark.Parser.Lexer.L
                                    Language.Futhark.Parser.Lexer.Token])
                     {- Arity: 5, Strictness: <S,U><L,U><L,U><L,U><L,U>, Inline: [0] -}
                   = \ ww :: Language.Futhark.Parser.Lexer.AlexPosn
                       ww1 :: GHC.Prim.Int#
                       ww2 :: Data.ByteString.Lazy.Internal.ByteString
                       ww3 :: GHC.Prim.Char#
                       ww4 :: GHC.Prim.Int# ->
                     case Language.Futhark.Parser.Lexer.$wa ww ww1 ww2 ww3 ww4 of wild {
                       Data.Either.Left msg
                       -> Data.Either.Left
                            @ GHC.Base.String
                            @ (Language.Futhark.Parser.Lexer.AlexState,
                               [Language.Futhark.Parser.Lexer.L
                                  Language.Futhark.Parser.Lexer.Token])
                            msg
                       Data.Either.Right ds
                       -> case ds of wild1 { (,) s' a23 ->
                          case a23 of wild2 { (,,) start end ds1 ->
                          case ds1 of wild3 {
                            DEFAULT
                            -> case s' of ww5 { Language.Futhark.Parser.Lexer.AlexState ww6 ww7 ww8 ww9 ww10 ->
                               case $wa1 ww6 ww7 ww8 ww9 ww10 of wild4 {
                                 Data.Either.Left msg -> wild4
                                 Data.Either.Right ds2
                                 -> case ds2 of wild5 { (,) s'1 a24 ->
                                    Data.Either.Right
                                      @ GHC.Base.String
                                      @ (Language.Futhark.Parser.Lexer.AlexState,
                                         [Language.Futhark.Parser.Lexer.L
                                            Language.Futhark.Parser.Lexer.Token])
                                      (s'1,
                                       GHC.Types.:
                                         @ (Language.Futhark.Parser.Lexer.L
                                              Language.Futhark.Parser.Lexer.Token)
                                         (Language.Futhark.Parser.Lexer.L
                                            @ Language.Futhark.Parser.Lexer.Token
                                            (case start of wild6 { (,,) line col addr ->
                                             case file of dt { DEFAULT ->
                                             case line of dt1 { GHC.Types.I# dt2 ->
                                             case col of dt3 { GHC.Types.I# dt4 ->
                                             case addr of dt5 { GHC.Types.I# dt6 ->
                                             case end of wild7 { (,,) line1 col1 addr1 ->
                                             case line1 of dt7 { GHC.Types.I# dt8 ->
                                             case col1 of dt9 { GHC.Types.I# dt10 ->
                                             case addr1 of dt11 { GHC.Types.I# dt12 ->
                                             (Data.Loc.Loc dt dt2 dt4 dt6 dt dt8 dt10 dt12)
                                               `cast`
                                             (Sym (Data.Loc.NTCo:SrcLoc[0])) } } } } } } } } })
                                            wild3)
                                         a24) } } }
                            Language.Futhark.Parser.Lexer.EOF
                            -> Data.Either.Right
                                 @ GHC.Base.String
                                 @ (Language.Futhark.Parser.Lexer.AlexState,
                                    [Language.Futhark.Parser.Lexer.L
                                       Language.Futhark.Parser.Lexer.Token])
                                 (s',
                                  GHC.Types.[]
                                    @ (Language.Futhark.Parser.Lexer.L
                                         Language.Futhark.Parser.Lexer.Token)) } } } }
                 } in
                 case $wa1
                        Language.Futhark.Parser.Lexer.alexStartPos
                        0
                        (case str of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                         case Data.Text.Encoding.$wencodeUtf8
                                ww1
                                ww2
                                ww3 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.<=# dt3 0) of wild1 {
                           GHC.Types.False
                           -> Data.ByteString.Lazy.Internal.Chunk
                                dt
                                dt1
                                dt2
                                dt3
                                Data.ByteString.Lazy.Internal.Empty
                           GHC.Types.True -> Data.ByteString.Lazy.Internal.Empty } } })
                        '\n'
                        0 of wild {
                   Data.Either.Left msg
                   -> Data.Either.Left
                        @ GHC.Base.String
                        @ [Language.Futhark.Parser.Lexer.L
                             Language.Futhark.Parser.Lexer.Token]
                        msg
                   Data.Either.Right ds
                   -> case ds of wild1 { (,) ds1 a23 ->
                      Data.Either.Right
                        @ GHC.Base.String
                        @ [Language.Futhark.Parser.Lexer.L
                             Language.Futhark.Parser.Lexer.Token]
                        a23 } }) -}
dd6bcb8aa2b516c3acd83519040a6272
  unAlex ::
    Language.Futhark.Parser.Lexer.Alex a
    -> Language.Futhark.Parser.Lexer.AlexState
    -> Data.Either.Either
         GHC.Base.String (Language.Futhark.Parser.Lexer.AlexState, a)
  RecSel Language.Futhark.Parser.Lexer.Alex
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Parser.Lexer.unAlex1
                  `cast`
                (forall a23.
                 <Language.Futhark.Parser.Lexer.Alex a23>_R
                 ->_R Language.Futhark.Parser.Lexer.NTCo:Alex[0] <a23>_R) -}
1e4d62ad7e5d3fae02c14c6851012fb4
  unAlex1 ::
    Language.Futhark.Parser.Lexer.Alex a
    -> Language.Futhark.Parser.Lexer.Alex a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a23 ds :: Language.Futhark.Parser.Lexer.Alex a23 -> ds) -}
instance GHC.Base.Applicative [Language.Futhark.Parser.Lexer.Alex]
  = Language.Futhark.Parser.Lexer.$fApplicativeAlex
instance GHC.Classes.Eq [Language.Futhark.Parser.Lexer.AlexPosn]
  = Language.Futhark.Parser.Lexer.$fEqAlexPosn
instance GHC.Classes.Eq [Language.Futhark.Parser.Lexer.L]
  = Language.Futhark.Parser.Lexer.$fEqL
instance GHC.Classes.Eq [Language.Futhark.Parser.Lexer.Token]
  = Language.Futhark.Parser.Lexer.$fEqToken
instance GHC.Base.Functor [Language.Futhark.Parser.Lexer.Alex]
  = Language.Futhark.Parser.Lexer.$fFunctorAlex
instance GHC.Base.Functor [Language.Futhark.Parser.Lexer.AlexLastAcc]
  = Language.Futhark.Parser.Lexer.$fFunctorAlexLastAcc
instance Data.Loc.Located [Language.Futhark.Parser.Lexer.L]
  = Language.Futhark.Parser.Lexer.$fLocatedL
instance GHC.Base.Monad [Language.Futhark.Parser.Lexer.Alex]
  = Language.Futhark.Parser.Lexer.$fMonadAlex
instance GHC.Show.Show [Language.Futhark.Parser.Lexer.AlexPosn]
  = Language.Futhark.Parser.Lexer.$fShowAlexPosn
instance GHC.Show.Show [Language.Futhark.Parser.Lexer.Token]
  = Language.Futhark.Parser.Lexer.$fShowToken
"SPEC/Language.Futhark.Parser.Lexer $dmfail @ Alex" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                                 Language.Futhark.Parser.Lexer.Alex
  GHC.Base.$dmfail @ Language.Futhark.Parser.Lexer.Alex $dMonad
  = Language.Futhark.Parser.Lexer.$fMonadAlex_$s$dmfail
"SPEC/Language.Futhark.Parser.Lexer ap @ Alex _ _" [ALWAYS] forall @ a23
                                                                   @ b
                                                                   $dMonad :: GHC.Base.Monad
                                                                                Language.Futhark.Parser.Lexer.Alex
  GHC.Base.ap @ Language.Futhark.Parser.Lexer.Alex @ a23 @ b $dMonad
  = Language.Futhark.Parser.Lexer.$fApplicativeAlex_$sap @ a23 @ b
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False


{-# OPTIONS_GHC -w #-}
{-# OPTIONS -fglasgow-exts -cpp #-}
-- | Futhark parser written with Happy.
module Language.Futhark.Parser.Parser
  ( prog
  , expression
  , lambda
  , futharkType
  , anyValue
  , anyValues
  , ParserEnv (..)
  , ParserMonad
  , ReadLineMonad(..)
  , getLinesFromIO
  , getLinesFromTexts
  , getNoLines
  , newParserEnv
  )
  where

import Control.Applicative
import Control.Monad
import Control.Monad.Trans
import Control.Monad.Except
import Control.Monad.Reader
import Control.Monad.Trans.State
import Control.Applicative ((<$>), (<*>))
import Control.Arrow
import Data.Array
import qualified Data.Text as T
import qualified Data.Text.IO as T
import Data.Char (ord)
import Data.Maybe (fromMaybe)
import Data.Loc hiding (L) -- Lexer has replacements.
import qualified Data.HashMap.Lazy as HM
import Data.Monoid

import Language.Futhark.Syntax hiding (ID)
import Language.Futhark.Attributes
import Language.Futhark.Parser.Lexer
import Language.Futhark.Core(blankLongname)
import qualified Data.Array as Happy_Data_Array
import qualified GHC.Exts as Happy_GHC_Exts
import Control.Applicative(Applicative(..))
import Control.Monad (ap)

-- parser produced by Happy Version 1.19.5

newtype HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66 = HappyAbsSyn HappyAny
#if __GLASGOW_HASKELL__ >= 607
type HappyAny = Happy_GHC_Exts.Any
#else
type HappyAny = forall a . a
#endif
happyIn9 :: (UncheckedProgWithHeaders) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn9 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn9 #-}
happyOut9 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> (UncheckedProgWithHeaders)
happyOut9 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut9 #-}
happyIn10 :: ([DecBase f vn]) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn10 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn10 #-}
happyOut10 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> ([DecBase f vn])
happyOut10 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut10 #-}
happyIn11 :: ([DecBase f vn]) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn11 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn11 #-}
happyOut11 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> ([DecBase f vn])
happyOut11 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut11 #-}
happyIn12 :: ([DecBase f vn]) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn12 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn12 #-}
happyOut12 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> ([DecBase f vn])
happyOut12 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut12 #-}
happyIn13 :: t13 -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn13 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn13 #-}
happyOut13 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> t13
happyOut13 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut13 #-}
happyIn14 :: (SigDefBase f vn) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn14 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn14 #-}
happyOut14 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> (SigDefBase f vn)
happyOut14 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut14 #-}
happyIn15 :: (ModDefBase f vn) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn15 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn15 #-}
happyOut15 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> (ModDefBase f vn)
happyOut15 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut15 #-}
happyIn16 :: t16 -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn16 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn16 #-}
happyOut16 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> t16
happyOut16 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut16 #-}
happyIn17 :: t17 -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn17 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn17 #-}
happyOut17 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> t17
happyOut17 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut17 #-}
happyIn18 :: t18 -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn18 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn18 #-}
happyOut18 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> t18
happyOut18 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut18 #-}
happyIn19 :: t19 -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn19 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn19 #-}
happyOut19 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> t19
happyOut19 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut19 #-}
happyIn20 :: t20 -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn20 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn20 #-}
happyOut20 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> t20
happyOut20 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut20 #-}
happyIn21 :: t21 -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn21 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn21 #-}
happyOut21 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> t21
happyOut21 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut21 #-}
happyIn22 :: (()) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn22 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn22 #-}
happyOut22 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> (())
happyOut22 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut22 #-}
happyIn23 :: ((QualName , SrcLoc)) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn23 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn23 #-}
happyOut23 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> ((QualName , SrcLoc))
happyOut23 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut23 #-}
happyIn24 :: ((BinOp, SrcLoc)) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn24 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn24 #-}
happyOut24 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> ((BinOp, SrcLoc))
happyOut24 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut24 #-}
happyIn25 :: ((UnOp, SrcLoc)) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn25 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn25 #-}
happyOut25 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> ((UnOp, SrcLoc))
happyOut25 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut25 #-}
happyIn26 :: ([ProgHeader]) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn26 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn26 #-}
happyOut26 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> ([ProgHeader])
happyOut26 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut26 #-}
happyIn27 :: (ProgHeader) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn27 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn27 #-}
happyOut27 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> (ProgHeader)
happyOut27 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut27 #-}
happyIn28 :: ([String]) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn28 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn28 #-}
happyOut28 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> ([String])
happyOut28 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut28 #-}
happyIn29 :: t29 -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn29 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn29 #-}
happyOut29 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> t29
happyOut29 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut29 #-}
happyIn30 :: (TypeDeclBase NoInfo Name) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn30 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn30 #-}
happyOut30 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> (TypeDeclBase NoInfo Name)
happyOut30 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut30 #-}
happyIn31 :: t31 -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn31 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn31 #-}
happyOut31 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> t31
happyOut31 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut31 #-}
happyIn32 :: ([TypeDefBase f vn]) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn32 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn32 #-}
happyOut32 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> ([TypeDefBase f vn])
happyOut32 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut32 #-}
happyIn33 :: (UncheckedUserType) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn33 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn33 #-}
happyOut33 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> (UncheckedUserType)
happyOut33 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut33 #-}
happyIn34 :: ([UncheckedUserType]) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn34 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn34 #-}
happyOut34 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> ([UncheckedUserType])
happyOut34 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut34 #-}
happyIn35 :: (DimDecl Name) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn35 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn35 #-}
happyOut35 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> (DimDecl Name)
happyOut35 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut35 #-}
happyIn36 :: ((PrimType, SrcLoc)) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn36 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn36 #-}
happyOut36 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> ((PrimType, SrcLoc))
happyOut36 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut36 #-}
happyIn37 :: ((IntType, SrcLoc)) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn37 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn37 #-}
happyOut37 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> ((IntType, SrcLoc))
happyOut37 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut37 #-}
happyIn38 :: ((IntType, SrcLoc)) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn38 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn38 #-}
happyOut38 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> ((IntType, SrcLoc))
happyOut38 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut38 #-}
happyIn39 :: ((FloatType, SrcLoc)) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn39 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn39 #-}
happyOut39 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> ((FloatType, SrcLoc))
happyOut39 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut39 #-}
happyIn40 :: ([ParamBase NoInfo Name]) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn40 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn40 #-}
happyOut40 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> ([ParamBase NoInfo Name])
happyOut40 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut40 #-}
happyIn41 :: (UncheckedExp) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn41 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn41 #-}
happyOut41 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> (UncheckedExp)
happyOut41 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut41 #-}
happyIn42 :: (UncheckedExp) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn42 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn42 #-}
happyOut42 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> (UncheckedExp)
happyOut42 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut42 #-}
happyIn43 :: (UncheckedExp) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn43 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn43 #-}
happyOut43 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> (UncheckedExp)
happyOut43 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut43 #-}
happyIn44 :: t44 -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn44 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn44 #-}
happyOut44 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> t44
happyOut44 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut44 #-}
happyIn45 :: t45 -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn45 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn45 #-}
happyOut45 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> t45
happyOut45 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut45 #-}
happyIn46 :: t46 -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn46 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn46 #-}
happyOut46 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> t46
happyOut46 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut46 #-}
happyIn47 :: t47 -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn47 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn47 #-}
happyOut47 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> t47
happyOut47 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut47 #-}
happyIn48 :: t48 -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn48 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn48 #-}
happyOut48 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> t48
happyOut48 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut48 #-}
happyIn49 :: t49 -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn49 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn49 #-}
happyOut49 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> t49
happyOut49 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut49 #-}
happyIn50 :: (UncheckedLambda) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn50 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn50 #-}
happyOut50 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> (UncheckedLambda)
happyOut50 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut50 #-}
happyIn51 :: t51 -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn51 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn51 #-}
happyOut51 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> t51
happyOut51 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut51 #-}
happyIn52 :: t52 -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn52 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn52 #-}
happyOut52 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> t52
happyOut52 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut52 #-}
happyIn53 :: t53 -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn53 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn53 #-}
happyOut53 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> t53
happyOut53 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut53 #-}
happyIn54 :: (Int) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn54 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn54 #-}
happyOut54 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> (Int)
happyOut54 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut54 #-}
happyIn55 :: ([Int]) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn55 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn55 #-}
happyOut55 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> ([Int])
happyOut55 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut55 #-}
happyIn56 :: (Value) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn56 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn56 #-}
happyOut56 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> (Value)
happyOut56 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut56 #-}
happyIn57 :: (Value) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn57 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn57 #-}
happyOut57 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> (Value)
happyOut57 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut57 #-}
happyIn58 :: t58 -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn58 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn58 #-}
happyOut58 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> t58
happyOut58 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut58 #-}
happyIn59 :: t59 -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn59 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn59 #-}
happyOut59 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> t59
happyOut59 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut59 #-}
happyIn60 :: ((IntValue, SrcLoc)) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn60 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn60 #-}
happyOut60 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> ((IntValue, SrcLoc))
happyOut60 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut60 #-}
happyIn61 :: ((IntValue, SrcLoc)) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn61 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn61 #-}
happyOut61 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> ((IntValue, SrcLoc))
happyOut61 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut61 #-}
happyIn62 :: ((FloatValue, SrcLoc)) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn62 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn62 #-}
happyOut62 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> ((FloatValue, SrcLoc))
happyOut62 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut62 #-}
happyIn63 :: ((PrimValue, SrcLoc)) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn63 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn63 #-}
happyOut63 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> ((PrimValue, SrcLoc))
happyOut63 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut63 #-}
happyIn64 :: t64 -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn64 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn64 #-}
happyOut64 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> t64
happyOut64 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut64 #-}
happyIn65 :: t65 -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn65 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn65 #-}
happyOut65 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> t65
happyOut65 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut65 #-}
happyIn66 :: t66 -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyIn66 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn66 #-}
happyOut66 :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> t66
happyOut66 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut66 #-}
happyInTok :: (L Token) -> (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66)
happyInTok x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyInTok #-}
happyOutTok :: (HappyAbsSyn t13 t16 t17 t18 t19 t20 t21 t29 t31 t44 t45 t46 t47 t48 t49 t51 t52 t53 t58 t59 t64 t65 t66) -> (L Token)
happyOutTok x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOutTok #-}


happyActOffsets :: HappyAddr
happyActOffsets = HappyA# "\xa2\x00\x66\x0a\x31\x02\x01\x00\x4d\x03\x4d\x03\x2a\x04\x12\x01\x2a\x04\x8f\x02\x4d\x03\xe2\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x99\x15\x4d\x03\x4d\x03\x00\x00\x00\x00\x87\x04\xde\x03\xc7\xff\x31\x02\x00\x00\x86\x04\x85\x04\x83\x04\xc5\x09\x00\x00\x00\x00\xdd\x03\x00\x00\x00\x00\x00\x00\x00\x00\x31\x02\x22\x02\x82\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf5\x03\x00\x00\x00\x00\x31\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc1\x01\x31\x02\x31\x02\x66\x0a\x72\x04\x3f\x01\x67\x04\x66\x04\x64\x04\x63\x04\x53\x04\x4b\x04\x48\x04\x3e\x01\x47\x04\x46\x04\x45\x04\x31\x02\x43\x04\xe3\x00\xdd\x00\x42\x04\x40\x04\x00\x00\x00\x00\x31\x02\x31\x02\x31\x02\x00\x00\x00\x00\x3e\x04\x3d\x04\x3c\x04\x2d\x04\x1f\x04\x1e\x04\x0e\x04\x06\x04\x03\x04\x02\x04\x01\x04\x00\x04\x1a\x03\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x00\x00\xbe\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x0a\x66\x0a\x95\x00\xbe\x03\x00\x00\x00\x00\x82\x01\x00\x00\x00\x00\x82\x01\x00\x00\x00\x00\xf8\x03\x66\x0a\x66\x0a\x21\x04\x20\x04\x1d\x04\xe6\x03\x04\x04\xeb\x03\xd6\x03\xff\x03\x00\x00\xfe\x03\xc3\x15\x00\x00\x00\x00\xd2\x03\x00\x00\x00\x00\xc3\x03\xc0\x03\x00\x00\x04\x00\x04\x00\x04\x00\x04\x00\x04\x00\x00\x00\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\xe1\x03\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x51\x01\x31\x02\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x31\x02\x66\x0a\x01\x00\x01\x00\x31\x02\xe1\x03\xbd\x03\xdf\x03\x01\x00\x04\x00\x31\x02\x31\x02\x01\x00\x31\x02\xdf\x03\x31\x02\xbb\x03\xb9\x03\x01\x00\x01\x00\x01\x00\x31\x02\xdb\x03\xdb\x03\x31\x02\xb6\x03\xf6\x08\xb2\x03\x67\x03\x00\x00\xfe\xff\x63\x02\x5f\x00\x00\x00\x6a\x00\x5f\x00\xc2\x03\x96\x02\x00\x00\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x9f\x09\xe1\x00\xb6\x15\x32\x02\xad\x03\xb0\x03\x00\x00\x00\x00\x00\x00\x00\x00\x9a\x03\x8e\x03\x00\x00\x00\x00\x4c\x02\x4c\x02\x00\x00\x4d\x03\x00\x00\x4d\x03\x99\x03\x98\x03\xd3\xff\xe4\x09\xbc\x14\xdb\x14\xdb\x14\xdb\x14\xe7\x00\xe7\x00\xe7\x00\x04\x00\xed\x14\xed\x14\xed\x14\xed\x14\xed\x14\xed\x14\x74\x00\x74\x00\x74\x00\x74\x00\x74\x00\x73\x00\x73\x00\x31\x02\x31\x02\x97\x03\x8c\x03\x00\x00\x5f\x00\x00\x00\x7d\x03\x31\x02\x71\x00\x79\x00\x00\x00\x00\x00\x31\x02\x00\x00\x31\x02\x66\x0a\xd0\x08\x6e\x03\x00\x00\x7e\x03\xb1\x08\x75\x03\x6d\x03\x66\x03\x31\x02\x8a\x03\x8b\x08\x69\x03\x6c\x08\x4a\x03\x4e\x03\x46\x08\x48\x03\x45\x03\x31\x02\x42\x03\x27\x08\x3b\x03\x3a\x03\x3e\x03\x26\x03\x01\x08\x38\x03\x37\x03\x35\x03\x34\x03\x32\x03\xe2\x07\x25\x03\x00\x00\xbc\x07\x9d\x07\x77\x07\x00\x00\x20\x03\x00\x00\x66\x0a\x66\x0a\xc8\xff\x23\x03\x22\x03\x21\x03\x44\x03\x66\x0a\xe1\x02\x93\x00\x00\x00\x1d\x03\x93\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x46\x0a\x26\x0a\x00\x00\x00\x00\x3b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x02\x31\x02\x01\x00\x01\x00\x31\x02\x31\x02\x00\x00\x00\x00\x00\x00\x01\x00\x31\x02\x31\x02\x31\x02\x1c\x03\x1b\x03\x31\x02\x00\x00\x00\x00\x31\x02\x31\x02\x31\x02\x00\x00\x19\x03\xfd\x02\x0b\x03\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x31\x02\x00\x00\x27\x03\x00\x03\x00\x00\xff\x02\x31\x02\x0c\x03\x0a\x03\xfb\x02\xd9\x02\x31\x02\xfc\x02\x5f\x00\x09\x03\xfb\x02\xb5\x02\xc4\xff\x00\x00\xe0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x31\x02\x00\x00\x00\x00\x31\x02\x31\x02\x00\x00\x00\x00\xfb\x02\xdd\x02\x00\x00\x31\x02\x37\x00\x58\x07\x00\x00\xd6\x02\xd5\x02\x32\x07\x13\x07\xed\x06\xce\x06\xa8\x06\x89\x06\xd2\x02\xe4\x02\xd1\x02\x63\x06\x44\x06\xbf\x02\x1e\x06\x31\x02\xb9\x02\xff\x05\xbb\x02\xd9\x05\x80\x09\x00\x00\xba\x05\x94\x05\xb1\x02\xa1\x02\x75\x05\x4f\x05\x97\x02\x87\x02\x8e\x02\x7e\x02\x8a\x02\x3e\x02\x05\x00\x00\x00\x00\x00\x99\x02\x84\x02\x00\x00\x00\x00\x51\x02\x34\x02\x00\x00\x00\x00\x31\x02\x4e\x02\x31\x02\x40\x02\x00\x00\x31\x02\x31\x02\x31\x02\x31\x02\x00\x00\x00\x00\x00\x00\x00\x00\x31\x02\x31\x02\x35\x02\x31\x02\x00\x00\x00\x00\x31\x02\x31\x02\x00\x00\x31\x02\x31\x02\x31\x02\x00\x00\x00\x00\x00\x00\x00\x00\x66\x0a\x31\x02\x2c\x02\xf6\x01\x31\x02\x31\x02\xfb\x02\xeb\x01\x00\x00\xfb\x02\x5a\x09\x5a\x09\x00\x00\x31\x02\x00\x00\x5a\x09\x3b\x09\xd1\x01\x31\x02\x37\x00\x15\x09\x00\x00\x30\x05\x0a\x05\xeb\x04\xc5\x04\xa6\x04\x80\x04\xec\x01\x61\x04\xcf\x01\x3b\x04\x1c\x04\xf6\x03\xc7\x01\x31\x02\x15\x09\x31\x02\x15\x09\x66\x0a\x66\x0a\x00\x00\xca\x00\xaf\x01\x15\x09\x15\x09\x00\x00\x00\x00\x31\x02\x31\x02\x00\x00\x00\x00\x31\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xaa\x01\xfb\x02\x31\x02\x31\x02\x31\x02\xfb\x02\x00\x00\xc5\x01\x6d\x00\x15\x09\x00\x00\x31\x02\xd7\x03\xb1\x03\x92\x03\x66\x0a\x66\x0a\xb1\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfb\x02\x31\x02\x31\x02\x15\x09\x15\x09\x00\x00\x00\x00"#

happyGotoOffsets :: HappyAddr
happyGotoOffsets = HappyA# "\x02\x03\xd7\x0a\xaa\x14\x20\x0c\x77\x15\x61\x15\x17\x02\x7a\x01\xdc\x01\xd7\x01\x12\x0a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6e\x00\x52\x15\x6c\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9f\x14\x00\x00\x00\x00\x00\x00\x00\x00\x89\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8e\x14\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7d\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x72\x14\x86\x0d\x61\x14\x48\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x45\x14\x34\x14\x23\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc2\x01\x18\x14\x07\x14\xf6\x13\xeb\x13\xda\x13\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xbb\x0a\x56\x0c\xb9\x01\x00\x00\x00\x00\x00\x00\xed\x01\x00\x00\x00\x00\xe6\x01\x00\x00\x00\x00\x00\x00\x3d\x15\x32\x15\xc0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x98\x01\x98\x01\x98\x01\x98\x01\x98\x01\x00\x00\xc9\x13\xbe\x13\xad\x13\x9c\x13\x91\x13\x80\x13\x6f\x13\x64\x13\x53\x13\x42\x13\x37\x13\x26\x13\x15\x13\x0a\x13\xf9\x12\xe8\x12\xdd\x12\xcc\x12\xbb\x12\xb0\x12\x6b\x0d\x72\x01\x9f\x12\x8e\x12\x83\x12\x72\x12\x61\x12\x50\x0d\x56\x12\x04\x0c\xe8\x0b\xcc\x0b\xb0\x0b\x94\x0b\x45\x12\x27\x15\x97\x0a\x78\x0b\x34\x12\x6c\x01\x00\x00\x65\x01\x5c\x0b\x5a\x01\x29\x12\x35\x0d\x40\x0b\x18\x12\x63\x01\x07\x12\x00\x00\x00\x00\x24\x0b\x08\x0b\xec\x0a\xfc\x11\x57\x01\x54\x01\xeb\x11\x00\x00\x56\x01\x00\x00\x56\x01\x00\x00\x56\x01\x68\x01\x3b\x01\x00\x00\x30\x01\x91\x01\x00\x00\x28\x01\x00\x00\xda\x11\xcf\x11\xbe\x11\xad\x11\xa2\x11\x91\x11\x80\x11\x75\x11\x64\x11\x53\x11\x48\x11\x37\x11\x26\x11\x1b\x11\x0a\x11\xf9\x10\xee\x10\xdd\x10\xcc\x10\xc1\x10\xb0\x10\x9f\x10\x28\x01\x1a\x0d\xba\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x01\x13\x01\x00\x00\x47\x15\x00\x00\x3c\x15\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x94\x10\x83\x10\x00\x00\x00\x00\x00\x00\x62\x01\x00\x00\x00\x00\x72\x10\xff\x0c\x00\x00\x00\x00\x00\x00\xe4\x0c\x00\x00\xc9\x0c\x94\x02\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\xae\x0c\xf4\x00\xfc\x00\x00\x00\xfc\x00\x00\x00\x00\x00\xfc\x00\x00\x00\x00\x00\x93\x0c\x00\x00\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfc\x00\x00\x00\x00\x00\xfc\x00\xfc\x00\xfc\x00\x00\x00\x00\x00\x00\x00\x10\x01\xee\x02\x00\x00\x00\x00\x00\x00\x00\x00\x07\x01\x1c\x15\x00\x00\xa0\x02\x00\x00\x00\x00\x53\x02\x00\x00\x00\x00\x6b\x02\x00\x00\x00\x00\xf0\x01\x7f\x01\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x67\x10\x56\x10\xd0\x0a\xb4\x0a\x45\x10\x3a\x10\x00\x00\x00\x00\x00\x00\x78\x0a\x29\x10\x78\x0c\x18\x10\x00\x00\x00\x00\x0d\x10\x00\x00\x00\x00\x5d\x0c\xfc\x0f\xeb\x0f\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x0f\xcf\x0f\xbe\x0f\xb3\x0f\xa2\x0f\x91\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x86\x0f\x00\x00\x00\x00\xf6\x02\x00\x00\x75\x0f\x00\x00\x21\x01\x00\x00\xec\x02\xcf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x64\x0f\x00\x00\x00\x00\x59\x0f\x48\x0f\x00\x00\x00\x00\xd3\x02\xc0\x00\x00\x00\x37\x0f\x96\x00\xb8\x00\x00\x00\x00\x00\x00\x00\xb8\x00\xb8\x00\xb8\x00\xb8\x00\xb8\x00\xb8\x00\x00\x00\x76\x00\x00\x00\x48\x00\x48\x00\x00\x00\x48\x00\x42\x0c\x00\x00\x48\x00\x00\x00\x48\x00\x89\x00\x00\x00\x48\x00\x48\x00\x00\x00\x00\x00\x48\x00\x48\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2c\x0f\x00\x00\x1b\x0f\x00\x00\x00\x00\x27\x0c\x0a\x0f\xff\x0e\xee\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x48\x02\xdd\x0e\x00\x00\xd2\x0e\x00\x00\x00\x00\xc1\x0e\xb0\x0e\x00\x00\xa5\x0e\x94\x0e\x83\x0e\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x00\x78\x0e\x00\x00\x00\x00\x67\x0e\x56\x0e\xce\x02\x00\x00\x00\x00\xaf\x02\x48\x00\x48\x00\x00\x00\x4b\x0e\x00\x00\x48\x00\x48\x00\x00\x00\x3a\x0e\x2a\x00\x22\x00\x00\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x00\x00\x22\x00\x00\x00\x22\x00\x22\x00\x22\x00\x00\x00\x29\x0e\x22\x00\x1e\x0e\x22\x00\x96\x03\x11\x15\x00\x00\x00\x00\x00\x00\x22\x00\x22\x00\x00\x00\x00\x00\x0d\x0e\xfc\x0d\x00\x00\x00\x00\xf1\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x89\x02\xe0\x0d\xcf\x0d\xc4\x0d\xe5\x01\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\xb3\x0d\x22\x00\x22\x00\x22\x00\x74\x0a\x68\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x74\x01\xa2\x0d\x97\x0d\x22\x00\x22\x00\x00\x00\x00\x00"#

happyDefActions :: HappyAddr
happyDefActions = HappyA# "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\xff\x00\x00\x00\x00\xbd\xff\x00\x00\x1c\xff\x00\x00\x23\xff\x22\xff\x21\xff\x20\xff\x18\xff\x16\xff\x15\xff\x1f\xff\x1e\xff\x0c\xff\x10\xff\x0f\xff\x0e\xff\x0d\xff\x0a\xff\x09\xff\x08\xff\x07\xff\x04\xff\x06\xff\x05\xff\x13\xff\x0b\xff\x00\x00\xf8\xfe\x00\x00\x12\xff\x11\xff\x00\x00\x00\x00\x37\xff\x27\xff\x26\xff\xc1\xff\xc0\xff\xbf\xff\x00\x00\x52\xff\x91\xff\x00\x00\x03\xff\x02\xff\x01\xff\x93\xff\x00\x00\x00\x00\x00\x00\xa1\xff\x98\xff\xa0\xff\x9f\xff\x9e\xff\x9d\xff\x9c\xff\x9b\xff\x9a\xff\x99\xff\x97\xff\x96\xff\xdb\xff\x00\x00\x92\xff\xda\xff\x2b\xff\xd9\xff\xd8\xff\xd7\xff\xd6\xff\xd5\xff\xd4\xff\xd3\xff\xd2\xff\xd0\xff\xd1\xff\xcf\xff\xcc\xff\xc6\xff\xc8\xff\xc7\xff\xc9\xff\xca\xff\xcb\xff\x00\x00\x00\x00\xc4\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xfe\xc5\xff\xc3\xff\xc2\xff\xce\xff\xcd\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x37\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xab\xff\x00\x00\xaf\xff\xa4\xff\xa5\xff\xa3\xff\xa2\xff\x00\x00\x00\x00\xa6\xff\x00\x00\xf8\xff\xf6\xff\xf4\xff\xf1\xff\xf0\xff\x00\x00\xf3\xff\xf2\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xee\xff\x00\x00\xb3\xff\x00\x00\x00\x00\xf7\xff\xf5\xff\x00\x00\xa8\xff\xa7\xff\xa9\xff\x00\x00\xae\xff\x81\xff\x82\xff\x83\xff\x84\xff\x85\xff\x51\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x58\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x38\xff\x00\x00\x00\x00\x8d\xff\x85\xff\x00\x00\x00\x00\x37\xff\x00\x00\x34\xff\x00\x00\x00\x00\x28\xff\xda\xff\x2a\xff\xd9\xff\xd8\xff\xd7\xff\xd6\xff\xd5\xff\xd4\xff\xd3\xff\xd2\xff\xd0\xff\xd1\xff\xcf\xff\xcc\xff\xc6\xff\xc8\xff\xc7\xff\xc9\xff\xca\xff\xcb\xff\xce\xff\xcd\xff\x29\xff\x00\x00\x00\x00\x00\x00\xf9\xfe\x00\x00\x17\xff\x14\xff\x1d\xff\xbc\xff\xba\xff\xb8\xff\xbe\xff\xf9\xff\x00\x00\x00\x00\xfb\xfe\xf8\xfe\xfe\xfe\xf8\xfe\x00\x00\x00\x00\x6c\xff\x78\xff\x79\xff\x75\xff\x77\xff\x76\xff\x7b\xff\x7c\xff\x7a\xff\x7d\xff\x6f\xff\x71\xff\x70\xff\x72\xff\x73\xff\x74\xff\x86\xff\x87\xff\x88\xff\x89\xff\x8a\xff\x8b\xff\x8c\xff\x00\x00\x00\x00\x00\x00\x35\xff\x33\xff\x34\xff\x32\xff\x00\x00\x00\x00\x00\x00\x00\x00\xdc\xff\x53\xff\x00\x00\x8f\xff\x00\x00\x00\x00\x00\x00\x00\x00\x1b\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6c\xff\x00\x00\x00\x00\x00\x00\x50\xff\x00\x00\xac\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe7\xff\x00\x00\xea\xff\xe8\xff\xe9\xff\x00\x00\xb0\xff\xef\xff\x00\x00\x00\x00\xde\xff\xdf\xff\x00\x00\xad\xff\xaa\xff\x3a\xff\x7e\xff\x7f\xff\x80\xff\x6d\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\xff\x90\xff\x56\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x59\xff\x5a\xff\x00\x00\x00\x00\x00\x00\x65\xff\x00\x00\x1a\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6b\xff\x00\x00\x00\x00\x39\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x91\xff\x00\x00\x00\x00\x34\xff\x00\x00\x00\x00\x00\x00\x6d\xff\xfc\xfe\x00\x00\xfa\xfe\xbb\xff\xb9\xff\xfd\xfe\x00\x00\x40\xff\x48\xff\x00\x00\x00\x00\x36\xff\x31\xff\x00\x00\x00\x00\x49\xff\x00\x00\x00\x00\x00\x00\x8e\xff\x00\x00\x94\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x25\xff\x24\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe5\xff\xe4\xff\xe3\xff\x00\x00\x00\x00\xeb\xff\xec\xff\x00\x00\x00\x00\xe6\xff\xed\xff\x00\x00\x00\x00\x00\x00\x00\x00\xdd\xff\x00\x00\x00\x00\x00\x00\x00\x00\x4e\xff\x4f\xff\x57\xff\x60\xff\x00\x00\x00\x00\x00\x00\x00\x00\x55\xff\x63\xff\x00\x00\x00\x00\x19\xff\x00\x00\x00\x00\x00\x00\x5c\xff\x68\xff\x6a\xff\x69\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x45\xff\x00\x00\x41\xff\x6e\xff\x47\xff\x00\x00\x44\xff\x3b\xff\x00\x00\x91\xff\x00\x00\x00\x00\x30\xff\x95\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb6\xff\x00\x00\xb4\xff\x00\x00\x00\x00\xe0\xff\xe1\xff\x00\x00\xb5\xff\xb7\xff\x4a\xff\x4b\xff\x00\x00\x00\x00\x5f\xff\x62\xff\x00\x00\x5b\xff\x64\xff\x66\xff\x67\xff\x5d\xff\x5e\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x46\xff\x91\xff\x91\xff\x3f\xff\x43\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb1\xff\xb2\xff\xe2\xff\x4c\xff\x4d\xff\x61\xff\x00\x00\x00\x00\x00\x00\x3e\xff\x3d\xff\x42\xff"#

happyCheck :: HappyAddr
happyCheck = HappyA# "\xff\xff\x3a\x00\x01\x00\x3b\x00\x40\x00\x04\x00\x05\x00\x40\x00\x40\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x40\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x0e\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3e\x00\x79\x00\x40\x00\x3e\x00\x79\x00\x43\x00\x3e\x00\x42\x00\x09\x00\x26\x00\x24\x00\x43\x00\x47\x00\x1c\x00\x45\x00\x1e\x00\x79\x00\x23\x00\x13\x00\x14\x00\x4f\x00\x50\x00\x51\x00\x52\x00\x53\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x66\x00\x67\x00\x68\x00\x69\x00\x6a\x00\x24\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x01\x00\x72\x00\x15\x00\x04\x00\x05\x00\x79\x00\x73\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x4c\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x2c\x00\x26\x00\x0f\x00\x3a\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x32\x00\x41\x00\x33\x00\x6b\x00\x35\x00\x2e\x00\x2c\x00\x33\x00\x33\x00\x3e\x00\x07\x00\x15\x00\x3a\x00\x17\x00\x24\x00\x0e\x00\x3e\x00\x3f\x00\x3e\x00\x3e\x00\x42\x00\x3b\x00\x15\x00\x43\x00\x43\x00\x18\x00\x23\x00\x4d\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x4f\x00\x50\x00\x51\x00\x52\x00\x53\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x66\x00\x45\x00\x46\x00\x69\x00\x6a\x00\x24\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x01\x00\x72\x00\x24\x00\x04\x00\x05\x00\x45\x00\x46\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x24\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x73\x00\x26\x00\x1e\x00\x76\x00\x40\x00\x04\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x71\x00\x4a\x00\x73\x00\x74\x00\x3a\x00\x76\x00\x07\x00\x33\x00\x3a\x00\x3b\x00\x3a\x00\x0e\x00\x3e\x00\x24\x00\x44\x00\x2e\x00\x42\x00\x24\x00\x3e\x00\x13\x00\x44\x00\x18\x00\x19\x00\x43\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x13\x00\x4f\x00\x50\x00\x51\x00\x52\x00\x53\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x66\x00\x27\x00\x28\x00\x69\x00\x6a\x00\x24\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x01\x00\x72\x00\x24\x00\x04\x00\x05\x00\x45\x00\x46\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x28\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x0e\x00\x26\x00\x3a\x00\x3a\x00\x24\x00\x01\x00\x02\x00\x03\x00\x24\x00\x05\x00\x06\x00\x2d\x00\x44\x00\x44\x00\x2d\x00\x73\x00\x74\x00\x0d\x00\x76\x00\x27\x00\x28\x00\x3a\x00\x3b\x00\x0e\x00\x14\x00\x3e\x00\x2d\x00\x17\x00\x2d\x00\x42\x00\x15\x00\x21\x00\x22\x00\x18\x00\x24\x00\x2d\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x2d\x00\x4f\x00\x50\x00\x51\x00\x52\x00\x53\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x66\x00\x27\x00\x28\x00\x69\x00\x6a\x00\x24\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x01\x00\x72\x00\x04\x00\x04\x00\x05\x00\x45\x00\x46\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x1a\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x24\x00\x26\x00\x02\x00\x03\x00\x13\x00\x05\x00\x06\x00\x11\x00\x12\x00\x02\x00\x03\x00\x40\x00\x05\x00\x06\x00\x2f\x00\x73\x00\x74\x00\x4d\x00\x76\x00\x4a\x00\x14\x00\x3a\x00\x3b\x00\x17\x00\x0e\x00\x3e\x00\x2f\x00\x14\x00\x3b\x00\x42\x00\x17\x00\x15\x00\x21\x00\x22\x00\x18\x00\x24\x00\x3b\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x4f\x00\x50\x00\x51\x00\x52\x00\x53\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x66\x00\x11\x00\x12\x00\x69\x00\x6a\x00\x40\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x01\x00\x72\x00\x49\x00\x04\x00\x05\x00\x15\x00\x16\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x4d\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x0e\x00\x26\x00\x2c\x00\x06\x00\x07\x00\x08\x00\x3a\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x15\x00\x16\x00\x41\x00\x1c\x00\x1d\x00\x1e\x00\x14\x00\x20\x00\x21\x00\x17\x00\x3a\x00\x2c\x00\x25\x00\x26\x00\x3e\x00\x3b\x00\x3f\x00\x40\x00\x42\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x15\x00\x16\x00\x2c\x00\x33\x00\x34\x00\x35\x00\x36\x00\x4b\x00\x4f\x00\x50\x00\x51\x00\x52\x00\x53\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x66\x00\x02\x00\x15\x00\x69\x00\x6a\x00\x4b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x0e\x00\x72\x00\x15\x00\x16\x00\x06\x00\x07\x00\x08\x00\x15\x00\x21\x00\x22\x00\x18\x00\x24\x00\x15\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x14\x00\x77\x00\x2c\x00\x17\x00\x03\x00\x3b\x00\x2c\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x3b\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x21\x00\x22\x00\x3b\x00\x24\x00\x3e\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x40\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x21\x00\x22\x00\x40\x00\x24\x00\x3e\x00\x21\x00\x22\x00\x3b\x00\x24\x00\x43\x00\x40\x00\x3b\x00\x17\x00\x0e\x00\x67\x00\x68\x00\x04\x00\x05\x00\x06\x00\x00\x00\x01\x00\x02\x00\x03\x00\x18\x00\x05\x00\x06\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x21\x00\x22\x00\x0d\x00\x24\x00\x40\x00\x40\x00\x11\x00\x12\x00\x40\x00\x14\x00\x21\x00\x22\x00\x17\x00\x24\x00\x3e\x00\x67\x00\x68\x00\x48\x00\x3f\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x4e\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x2c\x00\x2c\x00\x3b\x00\x2c\x00\x3e\x00\x3b\x00\x3b\x00\x15\x00\x40\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x3b\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3b\x00\x3a\x00\x75\x00\x3b\x00\x3e\x00\x15\x00\x3d\x00\x3a\x00\x3a\x00\x43\x00\x3b\x00\x3f\x00\x3b\x00\x3b\x00\x67\x00\x68\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x40\x00\x26\x00\x40\x00\x40\x00\x0e\x00\x40\x00\x40\x00\x3b\x00\x40\x00\x40\x00\x3a\x00\x15\x00\x16\x00\x3a\x00\x18\x00\x67\x00\x68\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x3a\x00\x40\x00\x3b\x00\x40\x00\x3e\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x79\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x17\x00\x3b\x00\x3a\x00\x0e\x00\x3e\x00\x40\x00\x40\x00\x3a\x00\x2c\x00\x43\x00\x15\x00\x16\x00\x40\x00\x18\x00\x62\x00\x63\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x40\x00\x69\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x40\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x40\x00\x3b\x00\x67\x00\x68\x00\x3e\x00\x43\x00\x3b\x00\x3b\x00\x3b\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x43\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3b\x00\x3b\x00\x40\x00\x2c\x00\x3e\x00\x3a\x00\x3f\x00\x17\x00\x3a\x00\x43\x00\x3a\x00\x17\x00\x3a\x00\x17\x00\x67\x00\x68\x00\x3b\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x40\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3f\x00\x3b\x00\x15\x00\x15\x00\x3e\x00\x40\x00\x2c\x00\x67\x00\x68\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x3c\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x2c\x00\x3b\x00\x3a\x00\x16\x00\x3e\x00\x15\x00\x15\x00\x79\x00\x43\x00\x43\x00\x3a\x00\x3a\x00\x3a\x00\x3a\x00\x67\x00\x68\x00\x3a\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x3a\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x79\x00\x79\x00\x3a\x00\x3a\x00\x3e\x00\x79\x00\x40\x00\x67\x00\x68\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x3a\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\x3a\x00\x3a\x00\x3a\x00\x3e\x00\x3a\x00\x40\x00\x3a\x00\x3a\x00\x43\x00\x3a\x00\x3a\x00\x3a\x00\x3a\x00\x67\x00\x68\x00\x3a\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x3a\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x71\x00\x3b\x00\x3a\x00\x3a\x00\x3e\x00\x3a\x00\x3a\x00\x67\x00\x68\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x3a\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\x3b\x00\x3a\x00\x3a\x00\x3e\x00\x3a\x00\x3a\x00\x3a\x00\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\x68\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\x3b\x00\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\x67\x00\x68\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\x3b\x00\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\xff\xff\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\x68\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\x3b\x00\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\x67\x00\x68\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\x3b\x00\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\xff\xff\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\x68\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\x3b\x00\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\x67\x00\x68\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3e\x00\xff\xff\x40\x00\xff\xff\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\x68\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3e\x00\xff\xff\x40\x00\x67\x00\x68\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\x3b\x00\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\xff\xff\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\x68\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\x3b\x00\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\x67\x00\x68\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\x3b\x00\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\xff\xff\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\x68\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3e\x00\xff\xff\x40\x00\x67\x00\x68\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3e\x00\xff\xff\x40\x00\xff\xff\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\x68\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\x3b\x00\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\x67\x00\x68\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3e\x00\xff\xff\x40\x00\xff\xff\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\x68\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3e\x00\xff\xff\x40\x00\x67\x00\x68\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3e\x00\xff\xff\x40\x00\xff\xff\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\x68\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\x3b\x00\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\x67\x00\x68\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\x3b\x00\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\xff\xff\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\x68\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\x3b\x00\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\x67\x00\x68\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\x3b\x00\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\xff\xff\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\x68\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\x3b\x00\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\x67\x00\x68\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\x3b\x00\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\xff\xff\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\x68\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\x3b\x00\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\x67\x00\x68\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\x3b\x00\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\xff\xff\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\x68\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3e\x00\xff\xff\x40\x00\x67\x00\x68\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\x3b\x00\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\xff\xff\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\x68\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3e\x00\xff\xff\x40\x00\x67\x00\x68\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\x3b\x00\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\xff\xff\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\x68\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3e\x00\xff\xff\x40\x00\x67\x00\x68\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\x3b\x00\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\xff\xff\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\x68\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3e\x00\xff\xff\x40\x00\x67\x00\x68\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\x3b\x00\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\xff\xff\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\x68\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3e\x00\xff\xff\x40\x00\x67\x00\x68\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\xff\xff\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\x68\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\x67\x00\x68\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\xff\xff\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\x68\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\x67\x00\x68\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\xff\xff\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\x68\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\x67\x00\x68\x00\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\xff\xff\xff\xff\x43\x00\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\x68\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x2b\x00\x2c\x00\xff\xff\xff\xff\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\xff\xff\x37\x00\x38\x00\x67\x00\xff\xff\x27\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\xff\xff\xff\xff\xff\xff\x3a\x00\x3b\x00\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x27\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\xff\xff\xff\xff\xff\xff\x3a\x00\x3b\x00\x0e\x00\xff\xff\x3e\x00\xff\xff\x0e\x00\x0f\x00\x10\x00\x15\x00\xff\xff\xff\xff\x18\x00\x27\x00\xff\xff\x1b\x00\x1c\x00\x1d\x00\x1e\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x3a\x00\x29\x00\x2a\x00\xff\xff\x3e\x00\x0e\x00\x0f\x00\x10\x00\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\xff\xff\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\xff\xff\x29\x00\x2a\x00\x0e\x00\x0f\x00\x10\x00\xff\xff\xff\xff\xff\xff\xff\xff\x0e\x00\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\x18\x00\x20\x00\x21\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x26\x00\xff\xff\xff\xff\x29\x00\x0e\x00\x0f\x00\x10\x00\xff\xff\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x18\x00\x20\x00\x21\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x26\x00\xff\xff\xff\xff\x29\x00\x0e\x00\x0f\x00\x10\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\xff\xff\x29\x00\x0e\x00\x0f\x00\x10\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\xff\xff\x29\x00\x0e\x00\x0f\x00\x10\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\xff\xff\x29\x00\x0e\x00\x0f\x00\x10\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\xff\xff\x29\x00\x0e\x00\x0f\x00\x10\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\xff\xff\x29\x00\x0e\x00\x0f\x00\x10\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\xff\xff\x29\x00\x0e\x00\x0f\x00\x10\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\xff\xff\x29\x00\x0e\x00\x0f\x00\x10\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\xff\xff\x29\x00\x0e\x00\x0f\x00\x10\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\xff\xff\x29\x00\x0e\x00\x0f\x00\x10\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\xff\xff\x29\x00\x0e\x00\x0f\x00\x10\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\xff\xff\x29\x00\x0e\x00\x0f\x00\x10\x00\xff\xff\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x26\x00\x20\x00\x21\x00\x29\x00\xff\xff\xff\xff\x25\x00\x26\x00\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x0e\x00\xff\xff\xff\xff\x25\x00\x26\x00\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x18\x00\x19\x00\xff\xff\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x33\x00\x34\x00\x35\x00\x36\x00\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x0e\x00\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\xff\xff\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\x33\x00\x34\x00\x35\x00\x36\x00\x26\x00\x1c\x00\x1d\x00\x1e\x00\xff\xff\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x33\x00\x34\x00\x35\x00\x36\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\xff\xff\xff\xff\x43\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\xff\xff\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x3e\x00\xff\xff\xff\xff\xff\xff\xff\xff\x43\x00\x0e\x00\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\xff\xff\x15\x00\xff\xff\xff\xff\x18\x00\x0e\x00\x3e\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x43\x00\x15\x00\xff\xff\xff\xff\x18\x00\x0e\x00\xff\xff\x1b\x00\x1c\x00\x1d\x00\x1e\x00\xff\xff\x15\x00\xff\xff\xff\xff\x18\x00\x0e\x00\xff\xff\x1b\x00\x1c\x00\x1d\x00\x1e\x00\xff\xff\x15\x00\xff\xff\xff\xff\x18\x00\x0e\x00\xff\xff\x1b\x00\x1c\x00\x1d\x00\x1e\x00\xff\xff\x15\x00\xff\xff\xff\xff\x18\x00\x0e\x00\xff\xff\x1b\x00\x1c\x00\x1d\x00\x1e\x00\xff\xff\x15\x00\xff\xff\xff\xff\x18\x00\xff\xff\xff\xff\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x2b\x00\xff\xff\xff\xff\xff\xff\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x2b\x00\x37\x00\x38\x00\x39\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x2b\x00\x37\x00\x38\x00\x39\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\xff\xff\x37\x00\x38\x00\x39\x00\x2b\x00\x2c\x00\xff\xff\xff\xff\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x2b\x00\x37\x00\x38\x00\xff\xff\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x2b\x00\x37\x00\x38\x00\xff\xff\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\xff\xff\x37\x00\x38\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\xff\xff\xff\xff\xff\xff\xff\xff\x20\x00\x21\x00\x22\x00\xff\xff\x24\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x13\x00\x14\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"#

happyTable :: HappyAddr
happyTable = HappyA# "\x00\x00\x1e\x01\x39\x00\x98\x01\x2f\xff\x3a\x00\x3b\x00\x2d\xff\x99\x01\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x2e\xff\x46\x00\x47\x00\x48\x00\x49\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x4a\x00\x23\x00\x4b\x00\x4c\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x51\x00\x00\x01\x52\x00\x53\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\xd2\x00\x2f\xff\x2c\xff\x60\x00\x2d\xff\xd3\x00\xd2\x00\x61\x00\x3d\x00\x01\x01\xbc\x00\xd3\x00\x62\x00\x84\x01\x0a\x02\x85\x01\x2e\xff\x69\x02\x46\x00\x47\x00\x63\x00\x64\x00\x65\x00\x66\x00\x67\x00\x68\x00\x69\x00\x6a\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\x73\x00\x74\x00\x75\x00\x76\x00\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\xbc\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\x39\x00\x84\x00\x4e\x01\x3a\x00\x3b\x00\x2c\xff\x0b\x02\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x33\x02\x46\x00\x47\x00\x48\x00\x49\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x4a\x00\x23\x00\x52\x01\x8a\x00\x05\x01\x4f\x01\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x82\x02\x50\x01\x22\x01\x34\x02\x23\x01\x26\x02\xc5\x01\xcb\x00\xcb\x00\x53\x01\xa2\x00\xb3\x00\x5f\x00\xb4\x00\xbc\x00\x8e\x00\x60\x00\xc7\x01\xd2\x00\xd2\x00\x8b\x00\xc6\x01\xc0\x01\xd3\x00\xd3\x00\xac\x00\x31\x02\x3c\xff\x90\x00\x91\x00\x92\x00\x93\x00\x43\x02\x63\x00\x64\x00\x65\x00\x66\x00\x67\x00\x68\x00\x69\x00\x6a\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\x73\x00\x74\x00\x75\x00\x76\x00\x77\x00\x8c\x00\x8d\x00\x8e\x00\xa3\x00\xa4\x00\x7d\x00\x7e\x00\xbc\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\x39\x00\x84\x00\x35\x02\x3a\x00\x3b\x00\xa3\x00\xa4\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\xbc\x00\x46\x00\x47\x00\x48\x00\x49\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x4a\x00\x23\x00\xa5\x00\x8a\x00\x00\x02\xa7\x00\x7a\x02\x93\x01\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x0a\x00\xb1\xff\xa5\x00\xa6\x00\xe4\x00\xa7\x00\xa2\x00\xcb\x00\x5f\x00\x33\x01\xe6\x00\x8e\x00\x60\x00\xbc\x00\xe5\x00\xb6\x01\x8b\x00\xbc\x00\xd2\x00\xd3\x01\xe7\x00\xb4\x00\x9a\x01\xd3\x00\x90\x00\x91\x00\x92\x00\x93\x00\xd4\x01\x63\x00\x64\x00\x65\x00\x66\x00\x67\x00\x68\x00\x69\x00\x6a\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\x73\x00\x74\x00\x75\x00\x76\x00\x77\x00\x8c\x00\x8d\x00\x8e\x00\xdb\x01\x4c\x01\x7d\x00\x7e\x00\xbc\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\x39\x00\x84\x00\x50\x01\x3a\x00\x3b\x00\xa3\x00\xa4\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x53\x01\x46\x00\x47\x00\x48\x00\x49\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x4a\x00\x23\x00\x54\x01\x8a\x00\xed\x00\xf6\x00\xbc\x00\x29\x01\x9a\x00\x9b\x00\xbc\x00\x9c\x00\x9d\x00\x5b\x01\xee\x00\xf7\x00\x5d\x01\xa5\x00\xa6\x00\x9e\x00\xa7\x00\xca\x01\x4c\x01\x5f\x00\x7c\x01\x8e\x00\x9f\x00\x60\x00\x65\x01\xa0\x00\x6b\x01\x8b\x00\xc0\x01\xd7\x01\x85\x02\xac\x00\xbc\x00\x6d\x01\x90\x00\x91\x00\x92\x00\x93\x00\x01\x02\x7f\x01\x63\x00\x64\x00\x65\x00\x66\x00\x67\x00\x68\x00\x69\x00\x6a\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\x73\x00\x74\x00\x75\x00\x76\x00\x77\x00\x8c\x00\x8d\x00\x8e\x00\x4b\x01\x4c\x01\x7d\x00\x7e\x00\xbc\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\x39\x00\x84\x00\xa9\x00\x3a\x00\x3b\x00\xa3\x00\xa4\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\xb1\x00\x46\x00\x47\x00\x48\x00\x49\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x4a\x00\x23\x00\xbc\x00\x8a\x00\xaf\x00\x9b\x00\x25\x01\x9c\x00\x9d\x00\x28\x01\x08\x00\xb0\x00\x9b\x00\x7a\x02\x9c\x00\x9d\x00\x83\x02\xa5\x00\xa6\x00\x75\x02\xa7\x00\x79\x02\x9f\x00\x5f\x00\xfd\x00\xa0\x00\x8e\x00\x60\x00\x6c\x02\x9f\x00\x5d\x02\x8b\x00\xa0\x00\xc0\x01\xd7\x01\x6f\x02\xac\x00\xbc\x00\x61\x02\x90\x00\x91\x00\x92\x00\x93\x00\x03\x02\x63\x00\x64\x00\x65\x00\x66\x00\x67\x00\x68\x00\x69\x00\x6a\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\x73\x00\x74\x00\x75\x00\x76\x00\x77\x00\x8c\x00\x8d\x00\x8e\x00\x07\x00\x08\x00\x7d\x00\x7e\x00\x63\x02\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\x39\x00\x84\x00\x3c\x02\x3a\x00\x3b\x00\x48\x00\x49\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x41\x02\x46\x00\x47\x00\x48\x00\x49\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x4a\x00\x23\x00\x84\x00\x8a\x00\x42\x02\x8c\x01\x0b\x02\x8e\x01\x03\x01\x0f\x02\x06\x02\x07\x02\x08\x02\x27\x01\x28\x01\x04\x01\x85\x00\x86\x00\x87\x00\x8f\x01\xf9\x00\x31\x00\x90\x01\x5f\x00\x52\x02\x4c\x02\x32\x00\x60\x00\x4b\x02\x2f\x01\x30\x01\x8b\x00\x05\x02\x06\x02\x07\x02\x08\x02\x48\x00\x49\x00\x54\x02\x34\x00\x35\x00\x36\x00\x37\x00\x56\x02\x63\x00\x64\x00\x65\x00\x66\x00\x67\x00\x68\x00\x69\x00\x6a\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\x73\x00\x74\x00\x75\x00\x76\x00\x77\x00\x8c\x00\x8d\x00\x8e\x00\x4a\x01\x0e\x02\x7d\x00\x7e\x00\x57\x02\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\x8e\x00\x84\x00\x27\x01\x28\x01\x8c\x01\x8d\x01\x8e\x01\xc0\x01\xd7\x01\x73\x02\xac\x00\xbc\x00\x0f\x02\x90\x00\x91\x00\x92\x00\x93\x00\xc1\x01\x8f\x01\x11\x02\x12\x02\x90\x01\xd7\x01\x13\x02\x14\x02\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x15\x02\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\xd7\x01\x3a\x02\x16\x02\xbc\x00\xd2\x00\x30\x01\x91\x00\x92\x00\x93\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x19\x02\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\xd7\x01\x3c\x02\x1a\x02\xbc\x00\xd2\x00\xd7\x01\x36\x02\x1e\x02\xbc\x00\xd3\x00\x20\x02\x23\x02\xb8\x01\x8e\x00\xd4\x00\xd5\x00\x3a\x00\x3b\x00\xda\x01\x98\x00\x99\x00\x9a\x00\x9b\x00\x99\x01\x9c\x00\x9d\x00\x90\x00\x91\x00\x92\x00\x93\x00\xd7\x01\xd8\x01\x9e\x00\xbc\x00\x26\x02\x28\x02\x07\x00\x08\x00\x2f\x02\x9f\x00\xd7\x01\xdf\x01\xa0\x00\xbc\x00\xd2\x00\xd4\x00\xd5\x00\x30\x02\xd6\x01\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\xdf\x01\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\xdb\x01\xe1\x01\xdd\x01\xe2\x01\xd2\x00\xe4\x01\xe5\x01\xe6\x01\xee\x01\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\xed\x01\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\xef\x01\xf4\x01\x92\x01\xf5\x01\xd2\x00\xab\x00\x0d\x02\x95\x01\x96\x01\xd3\x00\x97\x01\x9c\x01\xa0\x01\xa8\x01\xd4\x00\xd5\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\xa2\x01\x24\x00\xa3\x01\xa4\x01\x8e\x00\xa5\x01\xa6\x01\xa9\x01\xaa\x01\xab\x01\xad\x01\x7a\x02\x7b\x02\xaf\x01\xac\x00\xd4\x00\xd5\x00\x90\x00\x91\x00\x92\x00\x93\x00\x25\x00\xb0\x01\xb2\x01\xb3\x01\x26\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\xff\xff\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\xb8\x01\x56\x01\xb5\x01\x8e\x00\xd2\x00\xba\x01\x57\x01\xbf\x01\xca\x01\xd3\x00\x58\x02\x59\x02\xbb\x01\xac\x00\x27\x00\x28\x00\x90\x00\x91\x00\x92\x00\x93\x00\xbc\x01\x29\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\xbe\x01\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\xcc\x01\x7e\x02\xd4\x00\xd5\x00\xd2\x00\x2b\x01\xcd\x01\xd0\x01\xd1\x01\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x2c\x01\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x2d\x01\x7f\x02\x2e\x01\x4b\x01\xd2\x00\x5a\x01\x58\x01\x5d\x01\x63\x01\xd3\x00\x64\x01\x5d\x01\x6d\x01\x5d\x01\xd4\x00\xd5\x00\x82\x01\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x83\x01\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x84\x01\x80\x02\x87\x01\x88\x01\xd2\x00\x89\x01\x8a\x01\xd4\x00\xd5\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x8c\x01\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x8b\x01\x5e\x02\xaf\x00\xa8\x00\xd2\x00\xa9\x00\xab\x00\xff\xff\xff\x00\xd3\x00\xd6\x00\xd7\x00\xd8\x00\xd9\x00\xd4\x00\xd5\x00\xda\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\xdb\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\xff\xff\xff\xff\xdc\x00\xdd\x00\xd2\x00\xff\xff\x5f\x02\xd4\x00\xd5\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\xde\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\xdf\x00\xe0\x00\xe1\x00\xd2\x00\xe2\x00\x60\x02\xe3\x00\xe8\x00\xd3\x00\xea\x00\xeb\x00\xec\x00\xef\x00\xd4\x00\xd5\x00\xf0\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\xf1\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x0a\x00\x62\x02\xf2\x00\xf3\x00\xd2\x00\xf4\x00\xf5\x00\xd4\x00\xd5\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\xf8\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x64\x02\x00\x01\xd6\x00\xd2\x00\xd7\x00\xd8\x00\x1f\x01\x00\x00\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\x00\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x65\x02\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x66\x02\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\x00\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x67\x02\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x68\x02\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\x00\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x69\x02\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd2\x00\x00\x00\x17\x02\x00\x00\x00\x00\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\x00\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd2\x00\x00\x00\x18\x02\xd4\x00\xd5\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x1b\x02\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\x00\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x1c\x02\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x1d\x02\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\x00\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd2\x00\x00\x00\x1f\x02\xd4\x00\xd5\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd2\x00\x00\x00\x22\x02\x00\x00\x00\x00\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\x00\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x24\x02\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd2\x00\x00\x00\x25\x02\x00\x00\x00\x00\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\x00\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd2\x00\x00\x00\x29\x02\xd4\x00\xd5\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd2\x00\x00\x00\x2a\x02\x00\x00\x00\x00\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\x00\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x2b\x02\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x2c\x02\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\x00\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x2d\x02\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x2e\x02\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\x00\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x31\x02\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x9d\x01\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\x00\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x9e\x01\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x9f\x01\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\x00\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd2\x00\x00\x00\xa1\x01\xd4\x00\xd5\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\xa7\x01\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\x00\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd2\x00\x00\x00\xac\x01\xd4\x00\xd5\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\xb1\x01\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\x00\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd2\x00\x00\x00\xb4\x01\xd4\x00\xd5\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\xb6\x01\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\x00\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd2\x00\x00\x00\xbd\x01\xd4\x00\xd5\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\xc0\x01\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\x00\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd2\x00\x00\x00\x59\x01\xd4\x00\xd5\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\x00\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\x6d\x02\x6e\x02\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\x00\x00\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0c\x01\x0d\x01\x00\x00\x0e\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\x16\x01\x17\x01\x18\x01\x19\x01\x1a\x01\x00\x00\x00\x00\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x01\x1c\x01\x00\x00\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0c\x01\x0d\x01\x00\x00\x0e\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\x16\x01\x17\x01\x18\x01\x19\x01\x1a\x01\x00\x00\x00\x00\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\xd4\x00\xd5\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x01\x1c\x01\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x95\x00\x46\x00\x47\x00\x48\x00\x49\x00\x0a\x00\x24\x01\x00\x00\x00\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x00\x00\x13\x00\x14\x00\xd4\x00\x00\x00\x96\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x95\x00\x46\x00\x47\x00\x48\x00\x49\x00\x00\x00\x00\x00\x00\x00\x97\x00\x03\x02\x00\x00\x00\x00\x98\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x96\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x95\x00\x46\x00\x47\x00\x48\x00\x49\x00\x00\x00\x00\x00\x00\x00\x97\x00\x05\x02\x8e\x00\x00\x00\x98\x00\x00\x00\x2a\x00\x2b\x00\x2c\x00\x7c\x02\x00\x00\x00\x00\xac\x00\x96\x00\x00\x00\x90\x00\x91\x00\x92\x00\x93\x00\x00\x00\x2d\x00\x2e\x00\x2f\x00\x00\x00\xf8\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x97\x00\x70\x01\xf9\x01\x00\x00\x98\x00\x2a\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2d\x00\x2e\x00\x2f\x00\x00\x00\x30\x00\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x00\x00\x70\x01\x71\x01\x2a\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8e\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x00\x00\x2d\x00\x2e\x00\x2f\x00\xb6\x00\x30\x00\x31\x00\x90\x00\x91\x00\x92\x00\x93\x00\x32\x00\x00\x00\x00\x00\xfc\x01\x2a\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8e\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x2d\x00\x2e\x00\x2f\x00\x8f\x00\x30\x00\x31\x00\x90\x00\x91\x00\x92\x00\x93\x00\x32\x00\x00\x00\x00\x00\xfd\x01\x2a\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x2d\x00\x2e\x00\x2f\x00\x00\x00\x30\x00\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x00\x00\x5f\x01\x2a\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x2d\x00\x2e\x00\x2f\x00\x00\x00\x30\x00\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x00\x00\x60\x01\x2a\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x2d\x00\x2e\x00\x2f\x00\x00\x00\x30\x00\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x00\x00\x61\x01\x2a\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x2d\x00\x2e\x00\x2f\x00\x00\x00\x30\x00\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x00\x00\x67\x01\x2a\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x2d\x00\x2e\x00\x2f\x00\x00\x00\x30\x00\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x00\x00\x6a\x01\x2a\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x2d\x00\x2e\x00\x2f\x00\x00\x00\x30\x00\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x00\x00\x6f\x01\x2a\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x2d\x00\x2e\x00\x2f\x00\x00\x00\x30\x00\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x00\x00\x74\x01\x2a\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x2d\x00\x2e\x00\x2f\x00\x00\x00\x30\x00\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x00\x00\x75\x01\x2a\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x2d\x00\x2e\x00\x2f\x00\x00\x00\x30\x00\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x00\x00\x76\x01\x2a\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x2d\x00\x2e\x00\x2f\x00\x00\x00\x30\x00\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x00\x00\x77\x01\x2a\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x2d\x00\x2e\x00\x2f\x00\x00\x00\x30\x00\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x00\x00\x78\x01\x2a\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x2d\x00\x2e\x00\x2f\x00\x00\x00\x30\x00\x31\x00\x00\x00\x85\x00\x86\x00\x87\x00\x32\x00\xf9\x00\x31\x00\x33\x00\x00\x00\x00\x00\x50\x02\x32\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x85\x00\x86\x00\x87\x00\x00\x00\xf9\x00\x31\x00\x8e\x00\x00\x00\x00\x00\x20\x02\x32\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\xb4\x00\xb5\x00\x00\x00\x90\x00\x91\x00\x92\x00\x93\x00\x34\x00\x35\x00\x36\x00\x37\x00\x85\x00\x86\x00\x87\x00\x00\x00\xf9\x00\x31\x00\x00\x00\x00\x00\x00\x00\xf1\x01\x32\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x85\x00\x86\x00\x87\x00\x00\x00\xf9\x00\x31\x00\x00\x00\x00\x00\x00\x00\xf6\x01\x32\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x85\x00\x86\x00\x87\x00\x00\x00\xf9\x00\x31\x00\x00\x00\x00\x00\x00\x00\xad\x01\x32\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x85\x00\x86\x00\x87\x00\x00\x00\xf9\x00\x31\x00\x00\x00\x00\x00\x00\x00\xb8\x01\x32\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x85\x00\x86\x00\x87\x00\x00\x00\xf9\x00\x31\x00\x00\x00\x00\x00\x00\x00\xc2\x01\x32\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x85\x00\x86\x00\x87\x00\x00\x00\xf9\x00\x31\x00\x00\x00\x00\x00\x00\x00\xc3\x01\x32\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x85\x00\x86\x00\x87\x00\x00\x00\xf9\x00\x31\x00\x00\x00\x00\x00\x00\x00\x80\x01\x32\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x85\x00\x86\x00\x87\x00\x00\x00\xf9\x00\x31\x00\x00\x00\x00\x00\x00\x00\x31\x01\x32\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x85\x00\x86\x00\x87\x00\x00\x00\xf9\x00\x31\x00\x00\x00\x00\x00\x00\x00\x68\x01\x32\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x85\x00\x86\x00\x87\x00\x00\x00\xf9\x00\x31\x00\x00\x00\x00\x00\x00\x00\x7a\x01\x32\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x85\x00\x86\x00\x87\x00\x00\x00\xf9\x00\x31\x00\x00\x00\x00\x00\x00\x00\x80\x01\x32\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x85\x00\x86\x00\x87\x00\x84\x00\xf9\x00\x31\x00\x00\x00\x00\x00\x00\x00\xfa\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x83\x02\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x84\x02\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x80\x02\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x3d\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x70\x02\x85\x00\x86\x00\x87\x00\x84\x00\x3e\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x71\x02\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x72\x02\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x75\x02\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x76\x02\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x77\x02\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x5a\x02\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x5b\x02\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x6a\x02\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x6e\x02\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x3d\x02\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x3e\x02\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x3f\x02\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x42\x02\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x44\x02\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x45\x02\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x46\x02\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x47\x02\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x48\x02\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x49\x02\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x4b\x02\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x4d\x02\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x4e\x02\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x4f\x02\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x52\x02\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x54\x02\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x34\x02\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x37\x02\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x38\x02\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x39\x02\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\xdd\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\xe2\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\xe6\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\xe7\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\xe8\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\xe9\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\xea\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\xeb\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\xef\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\xf0\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\xf2\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\xf5\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\xf7\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\xfa\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\xfb\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\xfe\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\xff\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\xc7\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x01\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\xcd\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\xce\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x33\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x34\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x35\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x36\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x37\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x38\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x39\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x3a\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x3b\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x3c\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x3d\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x3e\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x3f\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x40\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x41\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x42\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x43\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x44\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x45\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x46\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x47\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x48\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x5a\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x5e\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x64\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x66\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x69\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x6e\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x73\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x79\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x7c\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x7d\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x7e\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x33\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x34\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x35\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x36\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x37\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x38\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x39\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x3a\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x3b\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x3c\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x3d\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x3e\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x3f\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x40\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x41\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x42\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x43\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x44\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x45\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x46\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x47\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\x48\x01\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\xb7\x00\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\xb8\x00\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\xb9\x00\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\xba\x00\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\xbb\x00\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\xb7\x00\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\xb8\x00\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\xb9\x00\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\xe8\x00\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\xba\x00\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\xfb\x00\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x84\x00\xfd\x00\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x85\x00\x86\x00\x87\x00\x84\x00\x04\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x85\x00\x86\x00\x87\x00\x00\x00\x1c\x01\x31\x00\x34\x00\x35\x00\x36\x00\x37\x00\x32\x00\x85\x00\x86\x00\x87\x00\x00\x00\x88\x00\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x00\x35\x00\x36\x00\x37\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xcf\x00\xd0\x00\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd3\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\x00\x00\xc5\x00\xc6\x00\xc7\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\xbe\x00\xbf\x00\xc0\x00\xc1\x00\xc2\x00\xc3\x00\xc4\x00\xd2\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd3\x00\x8e\x00\xcb\x00\xcc\x00\xcd\x00\xce\x00\x00\x00\x00\x00\x57\x02\x00\x00\x00\x00\xac\x00\x8e\x00\xd2\x00\x90\x00\x91\x00\x92\x00\x93\x00\xd3\x00\x92\x01\x00\x00\x00\x00\xac\x00\x8e\x00\x00\x00\x90\x00\x91\x00\x92\x00\x93\x00\x00\x00\x72\x01\x00\x00\x00\x00\xac\x00\x8e\x00\x00\x00\x90\x00\x91\x00\x92\x00\x93\x00\x00\x00\xab\x00\x00\x00\x00\x00\xac\x00\x8e\x00\x00\x00\x90\x00\x91\x00\x92\x00\x93\x00\x00\x00\xad\x00\x00\x00\x00\x00\xac\x00\x8e\x00\x00\x00\x90\x00\x91\x00\x92\x00\x93\x00\x00\x00\xf8\x00\x00\x00\x00\x00\xac\x00\x00\x00\x00\x00\x90\x00\x91\x00\x92\x00\x93\x00\x20\x01\x00\x00\x00\x00\x00\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x20\x01\x13\x00\x14\x00\xd1\x01\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x20\x01\x13\x00\x14\x00\xd2\x01\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x00\x00\x13\x00\x14\x00\x21\x01\x0a\x00\x0b\x00\x00\x00\x00\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x1f\x01\x13\x00\x14\x00\x00\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x29\x00\x13\x00\x14\x00\x00\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x00\x00\x13\x00\x14\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x21\x00\x00\x00\x23\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x95\x00\x46\x00\x47\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x46\x00\x47\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"#

happyReduceArr = Happy_Data_Array.array (6, 263) [
	(6 , happyReduce_6),
	(7 , happyReduce_7),
	(8 , happyReduce_8),
	(9 , happyReduce_9),
	(10 , happyReduce_10),
	(11 , happyReduce_11),
	(12 , happyReduce_12),
	(13 , happyReduce_13),
	(14 , happyReduce_14),
	(15 , happyReduce_15),
	(16 , happyReduce_16),
	(17 , happyReduce_17),
	(18 , happyReduce_18),
	(19 , happyReduce_19),
	(20 , happyReduce_20),
	(21 , happyReduce_21),
	(22 , happyReduce_22),
	(23 , happyReduce_23),
	(24 , happyReduce_24),
	(25 , happyReduce_25),
	(26 , happyReduce_26),
	(27 , happyReduce_27),
	(28 , happyReduce_28),
	(29 , happyReduce_29),
	(30 , happyReduce_30),
	(31 , happyReduce_31),
	(32 , happyReduce_32),
	(33 , happyReduce_33),
	(34 , happyReduce_34),
	(35 , happyReduce_35),
	(36 , happyReduce_36),
	(37 , happyReduce_37),
	(38 , happyReduce_38),
	(39 , happyReduce_39),
	(40 , happyReduce_40),
	(41 , happyReduce_41),
	(42 , happyReduce_42),
	(43 , happyReduce_43),
	(44 , happyReduce_44),
	(45 , happyReduce_45),
	(46 , happyReduce_46),
	(47 , happyReduce_47),
	(48 , happyReduce_48),
	(49 , happyReduce_49),
	(50 , happyReduce_50),
	(51 , happyReduce_51),
	(52 , happyReduce_52),
	(53 , happyReduce_53),
	(54 , happyReduce_54),
	(55 , happyReduce_55),
	(56 , happyReduce_56),
	(57 , happyReduce_57),
	(58 , happyReduce_58),
	(59 , happyReduce_59),
	(60 , happyReduce_60),
	(61 , happyReduce_61),
	(62 , happyReduce_62),
	(63 , happyReduce_63),
	(64 , happyReduce_64),
	(65 , happyReduce_65),
	(66 , happyReduce_66),
	(67 , happyReduce_67),
	(68 , happyReduce_68),
	(69 , happyReduce_69),
	(70 , happyReduce_70),
	(71 , happyReduce_71),
	(72 , happyReduce_72),
	(73 , happyReduce_73),
	(74 , happyReduce_74),
	(75 , happyReduce_75),
	(76 , happyReduce_76),
	(77 , happyReduce_77),
	(78 , happyReduce_78),
	(79 , happyReduce_79),
	(80 , happyReduce_80),
	(81 , happyReduce_81),
	(82 , happyReduce_82),
	(83 , happyReduce_83),
	(84 , happyReduce_84),
	(85 , happyReduce_85),
	(86 , happyReduce_86),
	(87 , happyReduce_87),
	(88 , happyReduce_88),
	(89 , happyReduce_89),
	(90 , happyReduce_90),
	(91 , happyReduce_91),
	(92 , happyReduce_92),
	(93 , happyReduce_93),
	(94 , happyReduce_94),
	(95 , happyReduce_95),
	(96 , happyReduce_96),
	(97 , happyReduce_97),
	(98 , happyReduce_98),
	(99 , happyReduce_99),
	(100 , happyReduce_100),
	(101 , happyReduce_101),
	(102 , happyReduce_102),
	(103 , happyReduce_103),
	(104 , happyReduce_104),
	(105 , happyReduce_105),
	(106 , happyReduce_106),
	(107 , happyReduce_107),
	(108 , happyReduce_108),
	(109 , happyReduce_109),
	(110 , happyReduce_110),
	(111 , happyReduce_111),
	(112 , happyReduce_112),
	(113 , happyReduce_113),
	(114 , happyReduce_114),
	(115 , happyReduce_115),
	(116 , happyReduce_116),
	(117 , happyReduce_117),
	(118 , happyReduce_118),
	(119 , happyReduce_119),
	(120 , happyReduce_120),
	(121 , happyReduce_121),
	(122 , happyReduce_122),
	(123 , happyReduce_123),
	(124 , happyReduce_124),
	(125 , happyReduce_125),
	(126 , happyReduce_126),
	(127 , happyReduce_127),
	(128 , happyReduce_128),
	(129 , happyReduce_129),
	(130 , happyReduce_130),
	(131 , happyReduce_131),
	(132 , happyReduce_132),
	(133 , happyReduce_133),
	(134 , happyReduce_134),
	(135 , happyReduce_135),
	(136 , happyReduce_136),
	(137 , happyReduce_137),
	(138 , happyReduce_138),
	(139 , happyReduce_139),
	(140 , happyReduce_140),
	(141 , happyReduce_141),
	(142 , happyReduce_142),
	(143 , happyReduce_143),
	(144 , happyReduce_144),
	(145 , happyReduce_145),
	(146 , happyReduce_146),
	(147 , happyReduce_147),
	(148 , happyReduce_148),
	(149 , happyReduce_149),
	(150 , happyReduce_150),
	(151 , happyReduce_151),
	(152 , happyReduce_152),
	(153 , happyReduce_153),
	(154 , happyReduce_154),
	(155 , happyReduce_155),
	(156 , happyReduce_156),
	(157 , happyReduce_157),
	(158 , happyReduce_158),
	(159 , happyReduce_159),
	(160 , happyReduce_160),
	(161 , happyReduce_161),
	(162 , happyReduce_162),
	(163 , happyReduce_163),
	(164 , happyReduce_164),
	(165 , happyReduce_165),
	(166 , happyReduce_166),
	(167 , happyReduce_167),
	(168 , happyReduce_168),
	(169 , happyReduce_169),
	(170 , happyReduce_170),
	(171 , happyReduce_171),
	(172 , happyReduce_172),
	(173 , happyReduce_173),
	(174 , happyReduce_174),
	(175 , happyReduce_175),
	(176 , happyReduce_176),
	(177 , happyReduce_177),
	(178 , happyReduce_178),
	(179 , happyReduce_179),
	(180 , happyReduce_180),
	(181 , happyReduce_181),
	(182 , happyReduce_182),
	(183 , happyReduce_183),
	(184 , happyReduce_184),
	(185 , happyReduce_185),
	(186 , happyReduce_186),
	(187 , happyReduce_187),
	(188 , happyReduce_188),
	(189 , happyReduce_189),
	(190 , happyReduce_190),
	(191 , happyReduce_191),
	(192 , happyReduce_192),
	(193 , happyReduce_193),
	(194 , happyReduce_194),
	(195 , happyReduce_195),
	(196 , happyReduce_196),
	(197 , happyReduce_197),
	(198 , happyReduce_198),
	(199 , happyReduce_199),
	(200 , happyReduce_200),
	(201 , happyReduce_201),
	(202 , happyReduce_202),
	(203 , happyReduce_203),
	(204 , happyReduce_204),
	(205 , happyReduce_205),
	(206 , happyReduce_206),
	(207 , happyReduce_207),
	(208 , happyReduce_208),
	(209 , happyReduce_209),
	(210 , happyReduce_210),
	(211 , happyReduce_211),
	(212 , happyReduce_212),
	(213 , happyReduce_213),
	(214 , happyReduce_214),
	(215 , happyReduce_215),
	(216 , happyReduce_216),
	(217 , happyReduce_217),
	(218 , happyReduce_218),
	(219 , happyReduce_219),
	(220 , happyReduce_220),
	(221 , happyReduce_221),
	(222 , happyReduce_222),
	(223 , happyReduce_223),
	(224 , happyReduce_224),
	(225 , happyReduce_225),
	(226 , happyReduce_226),
	(227 , happyReduce_227),
	(228 , happyReduce_228),
	(229 , happyReduce_229),
	(230 , happyReduce_230),
	(231 , happyReduce_231),
	(232 , happyReduce_232),
	(233 , happyReduce_233),
	(234 , happyReduce_234),
	(235 , happyReduce_235),
	(236 , happyReduce_236),
	(237 , happyReduce_237),
	(238 , happyReduce_238),
	(239 , happyReduce_239),
	(240 , happyReduce_240),
	(241 , happyReduce_241),
	(242 , happyReduce_242),
	(243 , happyReduce_243),
	(244 , happyReduce_244),
	(245 , happyReduce_245),
	(246 , happyReduce_246),
	(247 , happyReduce_247),
	(248 , happyReduce_248),
	(249 , happyReduce_249),
	(250 , happyReduce_250),
	(251 , happyReduce_251),
	(252 , happyReduce_252),
	(253 , happyReduce_253),
	(254 , happyReduce_254),
	(255 , happyReduce_255),
	(256 , happyReduce_256),
	(257 , happyReduce_257),
	(258 , happyReduce_258),
	(259 , happyReduce_259),
	(260 , happyReduce_260),
	(261 , happyReduce_261),
	(262 , happyReduce_262),
	(263 , happyReduce_263)
	]

happy_n_terms = 122 :: Int
happy_n_nonterms = 58 :: Int

happyReduce_6 = happySpecReduce_2  0# happyReduction_6
happyReduction_6 happy_x_2
	happy_x_1
	 =  case happyOut26 happy_x_1 of { happy_var_1 -> 
	case happyOut10 happy_x_2 of { happy_var_2 -> 
	happyIn9
		 (ProgWithHeaders happy_var_1 happy_var_2
	)}}

happyReduce_7 = happySpecReduce_1  0# happyReduction_7
happyReduction_7 happy_x_1
	 =  case happyOut10 happy_x_1 of { happy_var_1 -> 
	happyIn9
		 (ProgWithHeaders [] happy_var_1
	)}

happyReduce_8 = happySpecReduce_2  1# happyReduction_8
happyReduction_8 happy_x_2
	happy_x_1
	 =  case happyOut11 happy_x_2 of { happy_var_2 -> 
	happyIn10
		 (happy_var_2
	)}

happyReduce_9 = happySpecReduce_1  1# happyReduction_9
happyReduction_9 happy_x_1
	 =  case happyOut11 happy_x_1 of { happy_var_1 -> 
	happyIn10
		 (happy_var_1
	)}

happyReduce_10 = happySpecReduce_2  2# happyReduction_10
happyReduction_10 happy_x_2
	happy_x_1
	 =  case happyOut12 happy_x_1 of { happy_var_1 -> 
	case happyOut11 happy_x_2 of { happy_var_2 -> 
	happyIn11
		 (happy_var_1 ++ happy_var_2
	)}}

happyReduce_11 = happySpecReduce_1  2# happyReduction_11
happyReduction_11 happy_x_1
	 =  case happyOut12 happy_x_1 of { happy_var_1 -> 
	happyIn11
		 (happy_var_1
	)}

happyReduce_12 = happySpecReduce_1  3# happyReduction_12
happyReduction_12 happy_x_1
	 =  case happyOut29 happy_x_1 of { happy_var_1 -> 
	happyIn12
		 (map (FunOrTypeDec . FunDec) [happy_var_1]
	)}

happyReduce_13 = happySpecReduce_1  3# happyReduction_13
happyReduction_13 happy_x_1
	 =  case happyOut32 happy_x_1 of { happy_var_1 -> 
	happyIn12
		 (map (FunOrTypeDec . TypeDec) happy_var_1
	)}

happyReduce_14 = happySpecReduce_1  3# happyReduction_14
happyReduction_14 happy_x_1
	 =  case happyOut14 happy_x_1 of { happy_var_1 -> 
	happyIn12
		 ([ SigDec happy_var_1 ]
	)}

happyReduce_15 = happySpecReduce_1  3# happyReduction_15
happyReduction_15 happy_x_1
	 =  case happyOut15 happy_x_1 of { happy_var_1 -> 
	happyIn12
		 ([ ModDec happy_var_1 ]
	)}

happyReduce_16 = happySpecReduce_3  4# happyReduction_16
happyReduction_16 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut13 happy_x_3 of { happy_var_3 -> 
	happyIn13
		 (let L loc (ID name) = happy_var_1
                in (name,loc) : happy_var_3
	)}}

happyReduce_17 = happySpecReduce_1  4# happyReduction_17
happyReduction_17 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn13
		 (let L loc (ID name) = happy_var_1
               in [(name,loc)]
	)}

happyReduce_18 = happyReduce 6# 5# happyReduction_18
happyReduction_18 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut18 happy_x_5 of { happy_var_5 -> 
	happyIn14
		 (let L pos (ID name) = happy_var_2
                 in SigDef name happy_var_5 pos
	) `HappyStk` happyRest}}

happyReduce_19 = happyReduce 5# 6# happyReduction_19
happyReduction_19 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut16 happy_x_4 of { happy_var_4 -> 
	happyIn15
		 (let L pos (SID name) = happy_var_2
          in ModDef name happy_var_4 pos
	) `HappyStk` happyRest}}

happyReduce_20 = happySpecReduce_2  7# happyReduction_20
happyReduction_20 happy_x_2
	happy_x_1
	 =  case happyOut17 happy_x_1 of { happy_var_1 -> 
	case happyOut16 happy_x_2 of { happy_var_2 -> 
	happyIn16
		 (happy_var_1 ++ happy_var_2
	)}}

happyReduce_21 = happySpecReduce_1  7# happyReduction_21
happyReduction_21 happy_x_1
	 =  case happyOut17 happy_x_1 of { happy_var_1 -> 
	happyIn16
		 (happy_var_1
	)}

happyReduce_22 = happySpecReduce_1  8# happyReduction_22
happyReduction_22 happy_x_1
	 =  case happyOut32 happy_x_1 of { happy_var_1 -> 
	happyIn17
		 (map (FunOrTypeDec . TypeDec) happy_var_1
	)}

happyReduce_23 = happySpecReduce_1  8# happyReduction_23
happyReduction_23 happy_x_1
	 =  case happyOut29 happy_x_1 of { happy_var_1 -> 
	happyIn17
		 (map (FunOrTypeDec . FunDec) [happy_var_1]
	)}

happyReduce_24 = happySpecReduce_1  8# happyReduction_24
happyReduction_24 happy_x_1
	 =  case happyOut15 happy_x_1 of { happy_var_1 -> 
	happyIn17
		 ([ModDec happy_var_1]
	)}

happyReduce_25 = happySpecReduce_2  9# happyReduction_25
happyReduction_25 happy_x_2
	happy_x_1
	 =  case happyOut19 happy_x_1 of { happy_var_1 -> 
	case happyOut18 happy_x_2 of { happy_var_2 -> 
	happyIn18
		 (happy_var_1 : happy_var_2
	)}}

happyReduce_26 = happySpecReduce_1  9# happyReduction_26
happyReduction_26 happy_x_1
	 =  case happyOut19 happy_x_1 of { happy_var_1 -> 
	happyIn18
		 ([happy_var_1]
	)}

happyReduce_27 = happySpecReduce_1  10# happyReduction_27
happyReduction_27 happy_x_1
	 =  case happyOut20 happy_x_1 of { happy_var_1 -> 
	happyIn19
		 (happy_var_1
	)}

happyReduce_28 = happySpecReduce_1  10# happyReduction_28
happyReduction_28 happy_x_1
	 =  case happyOut21 happy_x_1 of { happy_var_1 -> 
	happyIn19
		 (happy_var_1
	)}

happyReduce_29 = happyReduce 6# 11# happyReduction_29
happyReduction_29 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut31 happy_x_4 of { happy_var_4 -> 
	case happyOut30 happy_x_6 of { happy_var_6 -> 
	happyIn20
		 (let L _ (ID name) = happy_var_2
              in FunSig name happy_var_4 happy_var_6
	) `HappyStk` happyRest}}}

happyReduce_30 = happyReduce 4# 11# happyReduction_30
happyReduction_30 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut30 happy_x_4 of { happy_var_4 -> 
	happyIn20
		 (let L _ (ID name) = happy_var_2
              in FunSig name [] happy_var_4
	) `HappyStk` happyRest}}

happyReduce_31 = happyReduce 4# 12# happyReduction_31
happyReduction_31 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut30 happy_x_4 of { happy_var_4 -> 
	happyIn21
		 (let L loc (ID name) = happy_var_2
                in TypeSig (TypeDef name happy_var_4 loc)
	) `HappyStk` happyRest}}

happyReduce_32 = happyMonadReduce 4# 13# happyReduction_32
happyReduction_32 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut37 happy_x_3 of { happy_var_3 -> 
	( defaultIntType (fst happy_var_3))}
	) (\r -> happyReturn (happyIn22 r))

happyReduce_33 = happyMonadReduce 4# 13# happyReduction_33
happyReduction_33 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut39 happy_x_3 of { happy_var_3 -> 
	( defaultRealType (fst happy_var_3))}
	) (\r -> happyReturn (happyIn22 r))

happyReduce_34 = happyMonadReduce 6# 13# happyReduction_34
happyReduction_34 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut37 happy_x_3 of { happy_var_3 -> 
	case happyOut39 happy_x_5 of { happy_var_5 -> 
	( defaultIntType (fst happy_var_3) >> defaultRealType (fst happy_var_5))}}
	) (\r -> happyReturn (happyIn22 r))

happyReduce_35 = happySpecReduce_3  14# happyReduction_35
happyReduction_35 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut23 happy_x_3 of { happy_var_3 -> 
	happyIn23
		 (let L loc (SID qual) = happy_var_1; ((quals, name), _) = happy_var_3
                             in ((qual:quals, name), loc)
	)}}

happyReduce_36 = happySpecReduce_1  14# happyReduction_36
happyReduction_36 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn23
		 (let L loc (ID name) = happy_var_1 in (([], name), loc)
	)}

happyReduce_37 = happySpecReduce_1  15# happyReduction_37
happyReduction_37 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 PLUS) -> 
	happyIn24
		 ((Plus, happy_var_1)
	)}

happyReduce_38 = happySpecReduce_1  15# happyReduction_38
happyReduction_38 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 TIMES) -> 
	happyIn24
		 ((Times, happy_var_1)
	)}

happyReduce_39 = happySpecReduce_1  15# happyReduction_39
happyReduction_39 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 DIVIDE) -> 
	happyIn24
		 ((Divide, happy_var_1)
	)}

happyReduce_40 = happySpecReduce_1  15# happyReduction_40
happyReduction_40 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 MOD) -> 
	happyIn24
		 ((Mod, happy_var_1)
	)}

happyReduce_41 = happySpecReduce_1  15# happyReduction_41
happyReduction_41 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 QUOT) -> 
	happyIn24
		 ((Quot, happy_var_1)
	)}

happyReduce_42 = happySpecReduce_1  15# happyReduction_42
happyReduction_42 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 REM) -> 
	happyIn24
		 ((Rem, happy_var_1)
	)}

happyReduce_43 = happySpecReduce_1  15# happyReduction_43
happyReduction_43 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 EQU2) -> 
	happyIn24
		 ((Equal, happy_var_1)
	)}

happyReduce_44 = happySpecReduce_1  15# happyReduction_44
happyReduction_44 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 NEQU) -> 
	happyIn24
		 ((NotEqual, happy_var_1)
	)}

happyReduce_45 = happySpecReduce_1  15# happyReduction_45
happyReduction_45 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 LTH) -> 
	happyIn24
		 ((Less, happy_var_1)
	)}

happyReduce_46 = happySpecReduce_1  15# happyReduction_46
happyReduction_46 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 LEQ) -> 
	happyIn24
		 ((Leq, happy_var_1)
	)}

happyReduce_47 = happySpecReduce_1  15# happyReduction_47
happyReduction_47 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 GTH) -> 
	happyIn24
		 ((Greater, happy_var_1)
	)}

happyReduce_48 = happySpecReduce_1  15# happyReduction_48
happyReduction_48 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 GEQ) -> 
	happyIn24
		 ((Geq, happy_var_1)
	)}

happyReduce_49 = happySpecReduce_1  15# happyReduction_49
happyReduction_49 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 AND) -> 
	happyIn24
		 ((LogAnd, happy_var_1)
	)}

happyReduce_50 = happySpecReduce_1  15# happyReduction_50
happyReduction_50 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 OR) -> 
	happyIn24
		 ((LogOr, happy_var_1)
	)}

happyReduce_51 = happySpecReduce_1  15# happyReduction_51
happyReduction_51 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 POW) -> 
	happyIn24
		 ((Pow, happy_var_1)
	)}

happyReduce_52 = happySpecReduce_1  15# happyReduction_52
happyReduction_52 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 XOR) -> 
	happyIn24
		 ((Xor, happy_var_1)
	)}

happyReduce_53 = happySpecReduce_1  15# happyReduction_53
happyReduction_53 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 BAND) -> 
	happyIn24
		 ((Band, happy_var_1)
	)}

happyReduce_54 = happySpecReduce_1  15# happyReduction_54
happyReduction_54 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 BOR) -> 
	happyIn24
		 ((Bor, happy_var_1)
	)}

happyReduce_55 = happySpecReduce_1  15# happyReduction_55
happyReduction_55 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 SHIFTR) -> 
	happyIn24
		 ((ShiftR, happy_var_1)
	)}

happyReduce_56 = happySpecReduce_1  15# happyReduction_56
happyReduction_56 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 ZSHIFTR) -> 
	happyIn24
		 ((ZShiftR, happy_var_1)
	)}

happyReduce_57 = happySpecReduce_1  15# happyReduction_57
happyReduction_57 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 SHIFTL) -> 
	happyIn24
		 ((ShiftL, happy_var_1)
	)}

happyReduce_58 = happySpecReduce_1  16# happyReduction_58
happyReduction_58 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 TILDE) -> 
	happyIn25
		 ((Complement, happy_var_1)
	)}

happyReduce_59 = happySpecReduce_1  16# happyReduction_59
happyReduction_59 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 BANG) -> 
	happyIn25
		 ((Not, happy_var_1)
	)}

happyReduce_60 = happySpecReduce_1  16# happyReduction_60
happyReduction_60 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 ABS) -> 
	happyIn25
		 ((Abs, happy_var_1)
	)}

happyReduce_61 = happySpecReduce_1  16# happyReduction_61
happyReduction_61 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 SIGNUM) -> 
	happyIn25
		 ((Signum, happy_var_1)
	)}

happyReduce_62 = happySpecReduce_1  16# happyReduction_62
happyReduction_62 happy_x_1
	 =  case happyOut37 happy_x_1 of { happy_var_1 -> 
	happyIn25
		 ((ToSigned (fst happy_var_1), snd happy_var_1)
	)}

happyReduce_63 = happySpecReduce_1  16# happyReduction_63
happyReduction_63 happy_x_1
	 =  case happyOut38 happy_x_1 of { happy_var_1 -> 
	happyIn25
		 ((ToUnsigned (fst happy_var_1), snd happy_var_1)
	)}

happyReduce_64 = happySpecReduce_1  16# happyReduction_64
happyReduction_64 happy_x_1
	 =  case happyOut39 happy_x_1 of { happy_var_1 -> 
	happyIn25
		 ((ToFloat (fst happy_var_1), snd happy_var_1)
	)}

happyReduce_65 = happySpecReduce_2  17# happyReduction_65
happyReduction_65 happy_x_2
	happy_x_1
	 =  case happyOut27 happy_x_1 of { happy_var_1 -> 
	case happyOut26 happy_x_2 of { happy_var_2 -> 
	happyIn26
		 (happy_var_1 : happy_var_2
	)}}

happyReduce_66 = happySpecReduce_1  17# happyReduction_66
happyReduction_66 happy_x_1
	 =  case happyOut27 happy_x_1 of { happy_var_1 -> 
	happyIn26
		 ([happy_var_1]
	)}

happyReduce_67 = happySpecReduce_2  18# happyReduction_67
happyReduction_67 happy_x_2
	happy_x_1
	 =  case happyOut28 happy_x_2 of { happy_var_2 -> 
	happyIn27
		 (Include happy_var_2
	)}

happyReduce_68 = happySpecReduce_3  19# happyReduction_68
happyReduction_68 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut28 happy_x_3 of { happy_var_3 -> 
	happyIn28
		 (let L pos (ID name) = happy_var_1 in nameToString name : happy_var_3
	)}}

happyReduce_69 = happySpecReduce_1  19# happyReduction_69
happyReduction_69 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn28
		 (let L pos (ID name) = happy_var_1 in [nameToString name]
	)}

happyReduce_70 = happySpecReduce_3  19# happyReduction_70
happyReduction_70 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut28 happy_x_3 of { happy_var_3 -> 
	happyIn28
		 (let L pos (SID name) = happy_var_1 in nameToString name : happy_var_3
	)}}

happyReduce_71 = happySpecReduce_1  19# happyReduction_71
happyReduction_71 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn28
		 (let L pos (SID name) = happy_var_1 in [nameToString name]
	)}

happyReduce_72 = happyReduce 8# 20# happyReduction_72
happyReduction_72 (happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut30 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut40 happy_x_5 of { happy_var_5 -> 
	case happyOut41 happy_x_8 of { happy_var_8 -> 
	happyIn29
		 (let L pos (ID name) = happy_var_3
                            in FunDef (name==defaultEntryPoint) (name, blankLongname) happy_var_2 happy_var_5 happy_var_8 pos
	) `HappyStk` happyRest}}}}

happyReduce_73 = happyReduce 7# 20# happyReduction_73
happyReduction_73 (happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut30 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut41 happy_x_7 of { happy_var_7 -> 
	happyIn29
		 (let L pos (ID name) = happy_var_3
                            in FunDef (name==defaultEntryPoint) (name, blankLongname) happy_var_2 [] happy_var_7 pos
	) `HappyStk` happyRest}}}

happyReduce_74 = happyReduce 8# 20# happyReduction_74
happyReduction_74 (happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut30 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut40 happy_x_5 of { happy_var_5 -> 
	case happyOut41 happy_x_8 of { happy_var_8 -> 
	happyIn29
		 (let L pos (ID name) = happy_var_3
                            in FunDef True (name, blankLongname) happy_var_2 happy_var_5 happy_var_8 pos
	) `HappyStk` happyRest}}}}

happyReduce_75 = happyReduce 7# 20# happyReduction_75
happyReduction_75 (happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut30 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut41 happy_x_7 of { happy_var_7 -> 
	happyIn29
		 (let L pos (ID name) = happy_var_3
                            in FunDef True (name, blankLongname) happy_var_2 [] happy_var_7 pos
	) `HappyStk` happyRest}}}

happyReduce_76 = happySpecReduce_1  21# happyReduction_76
happyReduction_76 happy_x_1
	 =  case happyOut33 happy_x_1 of { happy_var_1 -> 
	happyIn30
		 (TypeDecl happy_var_1 NoInfo
	)}

happyReduce_77 = happySpecReduce_3  22# happyReduction_77
happyReduction_77 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut30 happy_x_1 of { happy_var_1 -> 
	case happyOut31 happy_x_3 of { happy_var_3 -> 
	happyIn31
		 (happy_var_1 : happy_var_3
	)}}

happyReduce_78 = happySpecReduce_1  22# happyReduction_78
happyReduction_78 happy_x_1
	 =  case happyOut30 happy_x_1 of { happy_var_1 -> 
	happyIn31
		 ([happy_var_1]
	)}

happyReduce_79 = happyReduce 4# 23# happyReduction_79
happyReduction_79 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut13 happy_x_2 of { happy_var_2 -> 
	case happyOut30 happy_x_4 of { happy_var_4 -> 
	happyIn32
		 (let aliases = happy_var_2
                      in map (\(name, loc) -> TypeDef name happy_var_4 loc) aliases
	) `HappyStk` happyRest}}

happyReduce_80 = happySpecReduce_1  24# happyReduction_80
happyReduction_80 happy_x_1
	 =  case happyOut36 happy_x_1 of { happy_var_1 -> 
	happyIn33
		 (let (t,loc) = happy_var_1 in UserPrim t loc
	)}

happyReduce_81 = happySpecReduce_2  24# happyReduction_81
happyReduction_81 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 TIMES) -> 
	case happyOut33 happy_x_2 of { happy_var_2 -> 
	happyIn33
		 (UserUnique happy_var_2 happy_var_1
	)}}

happyReduce_82 = happyReduce 4# 24# happyReduction_82
happyReduction_82 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 LBRACKET) -> 
	case happyOut35 happy_x_2 of { happy_var_2 -> 
	case happyOut33 happy_x_4 of { happy_var_4 -> 
	happyIn33
		 (UserArray happy_var_4 happy_var_2 happy_var_1
	) `HappyStk` happyRest}}}

happyReduce_83 = happySpecReduce_3  24# happyReduction_83
happyReduction_83 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 LPAR) -> 
	case happyOut34 happy_x_2 of { happy_var_2 -> 
	happyIn33
		 (UserTuple happy_var_2 happy_var_1
	)}}

happyReduce_84 = happySpecReduce_1  24# happyReduction_84
happyReduction_84 happy_x_1
	 =  case happyOut23 happy_x_1 of { happy_var_1 -> 
	happyIn33
		 (UserTypeAlias (fst happy_var_1) (snd happy_var_1)
	)}

happyReduce_85 = happySpecReduce_3  25# happyReduction_85
happyReduction_85 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut33 happy_x_1 of { happy_var_1 -> 
	case happyOut34 happy_x_3 of { happy_var_3 -> 
	happyIn34
		 (happy_var_1 : happy_var_3
	)}}

happyReduce_86 = happySpecReduce_1  25# happyReduction_86
happyReduction_86 happy_x_1
	 =  case happyOut33 happy_x_1 of { happy_var_1 -> 
	happyIn34
		 ([happy_var_1]
	)}

happyReduce_87 = happySpecReduce_1  26# happyReduction_87
happyReduction_87 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (let L _ (ID name) = happy_var_1
            in NamedDim name
	)}

happyReduce_88 = happySpecReduce_1  26# happyReduction_88
happyReduction_88 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (let L _ (INTLIT n) = happy_var_1
            in ConstDim (fromIntegral n)
	)}

happyReduce_89 = happySpecReduce_0  26# happyReduction_89
happyReduction_89  =  happyIn35
		 (AnyDim
	)

happyReduce_90 = happySpecReduce_1  27# happyReduction_90
happyReduction_90 happy_x_1
	 =  case happyOut38 happy_x_1 of { happy_var_1 -> 
	happyIn36
		 (first Unsigned happy_var_1
	)}

happyReduce_91 = happySpecReduce_1  27# happyReduction_91
happyReduction_91 happy_x_1
	 =  case happyOut37 happy_x_1 of { happy_var_1 -> 
	happyIn36
		 (first Signed happy_var_1
	)}

happyReduce_92 = happySpecReduce_1  27# happyReduction_92
happyReduction_92 happy_x_1
	 =  case happyOut39 happy_x_1 of { happy_var_1 -> 
	happyIn36
		 (first FloatType happy_var_1
	)}

happyReduce_93 = happySpecReduce_1  27# happyReduction_93
happyReduction_93 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 BOOL) -> 
	happyIn36
		 ((Bool, happy_var_1)
	)}

happyReduce_94 = happySpecReduce_1  28# happyReduction_94
happyReduction_94 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 INT) -> 
	happyIn37
		 ((Int32, happy_var_1)
	)}

happyReduce_95 = happySpecReduce_1  28# happyReduction_95
happyReduction_95 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 I8) -> 
	happyIn37
		 ((Int8, happy_var_1)
	)}

happyReduce_96 = happySpecReduce_1  28# happyReduction_96
happyReduction_96 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 I16) -> 
	happyIn37
		 ((Int16, happy_var_1)
	)}

happyReduce_97 = happySpecReduce_1  28# happyReduction_97
happyReduction_97 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 I32) -> 
	happyIn37
		 ((Int32, happy_var_1)
	)}

happyReduce_98 = happySpecReduce_1  28# happyReduction_98
happyReduction_98 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 I64) -> 
	happyIn37
		 ((Int64, happy_var_1)
	)}

happyReduce_99 = happySpecReduce_1  29# happyReduction_99
happyReduction_99 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 U8) -> 
	happyIn38
		 ((Int8, happy_var_1)
	)}

happyReduce_100 = happySpecReduce_1  29# happyReduction_100
happyReduction_100 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 U16) -> 
	happyIn38
		 ((Int16, happy_var_1)
	)}

happyReduce_101 = happySpecReduce_1  29# happyReduction_101
happyReduction_101 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 U32) -> 
	happyIn38
		 ((Int32, happy_var_1)
	)}

happyReduce_102 = happySpecReduce_1  29# happyReduction_102
happyReduction_102 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 U64) -> 
	happyIn38
		 ((Int64, happy_var_1)
	)}

happyReduce_103 = happySpecReduce_1  30# happyReduction_103
happyReduction_103 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 FLOAT) -> 
	happyIn39
		 ((Float64, happy_var_1)
	)}

happyReduce_104 = happySpecReduce_1  30# happyReduction_104
happyReduction_104 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 F32) -> 
	happyIn39
		 ((Float32, happy_var_1)
	)}

happyReduce_105 = happySpecReduce_1  30# happyReduction_105
happyReduction_105 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 F64) -> 
	happyIn39
		 ((Float64, happy_var_1)
	)}

happyReduce_106 = happyReduce 4# 31# happyReduction_106
happyReduction_106 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut30 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut40 happy_x_4 of { happy_var_4 -> 
	happyIn40
		 (let L pos (ID name) = happy_var_2 in (Param name happy_var_1 pos) : happy_var_4
	) `HappyStk` happyRest}}}

happyReduce_107 = happySpecReduce_2  31# happyReduction_107
happyReduction_107 happy_x_2
	happy_x_1
	 =  case happyOut30 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	happyIn40
		 (let L pos (ID name) = happy_var_2 in [Param name happy_var_1 pos]
	)}}

happyReduce_108 = happySpecReduce_1  32# happyReduction_108
happyReduction_108 happy_x_1
	 =  case happyOut63 happy_x_1 of { happy_var_1 -> 
	happyIn41
		 (Literal (PrimValue (fst happy_var_1)) (snd happy_var_1)
	)}

happyReduce_109 = happyMonadReduce 1# 32# happyReduction_109
happyReduction_109 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	( let L pos (STRINGLIT s) = happy_var_1 in do
                             s' <- mapM (getIntValue . fromIntegral . ord) s
                             t <- lift $ gets parserIntType
                             return $ Literal (ArrayValue (arrayFromList $ map (PrimValue . SignedValue) s') $ Prim $ Signed t) pos)}
	) (\r -> happyReturn (happyIn41 r))

happyReduce_110 = happySpecReduce_1  32# happyReduction_110
happyReduction_110 happy_x_1
	 =  case happyOut47 happy_x_1 of { happy_var_1 -> 
	happyIn41
		 (Var happy_var_1
	)}

happyReduce_111 = happyReduce 4# 32# happyReduction_111
happyReduction_111 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 EMPTY) -> 
	case happyOut30 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (Empty happy_var_3 happy_var_1
	) `HappyStk` happyRest}}

happyReduce_112 = happySpecReduce_3  32# happyReduction_112
happyReduction_112 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 LBRACKET) -> 
	case happyOut46 happy_x_2 of { happy_var_2 -> 
	happyIn41
		 (ArrayLit happy_var_2 NoInfo happy_var_1
	)}}

happyReduce_113 = happyReduce 5# 32# happyReduction_113
happyReduction_113 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 LPAR) -> 
	case happyOut41 happy_x_2 of { happy_var_2 -> 
	case happyOut46 happy_x_4 of { happy_var_4 -> 
	happyIn41
		 (TupLit (happy_var_2:happy_var_4) happy_var_1
	) `HappyStk` happyRest}}}

happyReduce_114 = happySpecReduce_2  32# happyReduction_114
happyReduction_114 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 LPAR) -> 
	happyIn41
		 (TupLit [] happy_var_1
	)}

happyReduce_115 = happySpecReduce_3  32# happyReduction_115
happyReduction_115 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { (L happy_var_2 PLUS) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (BinOp Plus happy_var_1 happy_var_3 NoInfo happy_var_2
	)}}}

happyReduce_116 = happySpecReduce_3  32# happyReduction_116
happyReduction_116 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { (L happy_var_2 MINUS) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (BinOp Minus happy_var_1 happy_var_3 NoInfo happy_var_2
	)}}}

happyReduce_117 = happySpecReduce_3  32# happyReduction_117
happyReduction_117 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { (L happy_var_2 TIMES) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (BinOp Times happy_var_1 happy_var_3 NoInfo happy_var_2
	)}}}

happyReduce_118 = happySpecReduce_3  32# happyReduction_118
happyReduction_118 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { (L happy_var_2 DIVIDE) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (BinOp Divide happy_var_1 happy_var_3 NoInfo happy_var_2
	)}}}

happyReduce_119 = happySpecReduce_3  32# happyReduction_119
happyReduction_119 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { (L happy_var_2 MOD) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (BinOp Mod happy_var_1 happy_var_3 NoInfo happy_var_2
	)}}}

happyReduce_120 = happySpecReduce_3  32# happyReduction_120
happyReduction_120 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { (L happy_var_2 QUOT) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (BinOp Quot happy_var_1 happy_var_3 NoInfo happy_var_2
	)}}}

happyReduce_121 = happySpecReduce_3  32# happyReduction_121
happyReduction_121 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { (L happy_var_2 REM) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (BinOp Rem happy_var_1 happy_var_3 NoInfo happy_var_2
	)}}}

happyReduce_122 = happySpecReduce_2  32# happyReduction_122
happyReduction_122 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 MINUS) -> 
	case happyOut41 happy_x_2 of { happy_var_2 -> 
	happyIn41
		 (UnOp Negate happy_var_2 happy_var_1
	)}}

happyReduce_123 = happySpecReduce_2  32# happyReduction_123
happyReduction_123 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 BANG) -> 
	case happyOut41 happy_x_2 of { happy_var_2 -> 
	happyIn41
		 (UnOp Not happy_var_2 happy_var_1
	)}}

happyReduce_124 = happySpecReduce_2  32# happyReduction_124
happyReduction_124 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 TILDE) -> 
	case happyOut41 happy_x_2 of { happy_var_2 -> 
	happyIn41
		 (UnOp Complement happy_var_2 happy_var_1
	)}}

happyReduce_125 = happySpecReduce_2  32# happyReduction_125
happyReduction_125 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 ABS) -> 
	case happyOut41 happy_x_2 of { happy_var_2 -> 
	happyIn41
		 (UnOp Abs happy_var_2 happy_var_1
	)}}

happyReduce_126 = happySpecReduce_2  32# happyReduction_126
happyReduction_126 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 SIGNUM) -> 
	case happyOut41 happy_x_2 of { happy_var_2 -> 
	happyIn41
		 (UnOp Signum happy_var_2 happy_var_1
	)}}

happyReduce_127 = happyReduce 4# 32# happyReduction_127
happyReduction_127 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut37 happy_x_1 of { happy_var_1 -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (UnOp (ToSigned (fst happy_var_1)) happy_var_3 (snd happy_var_1)
	) `HappyStk` happyRest}}

happyReduce_128 = happyReduce 4# 32# happyReduction_128
happyReduction_128 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut38 happy_x_1 of { happy_var_1 -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (UnOp (ToUnsigned (fst happy_var_1)) happy_var_3 (snd happy_var_1)
	) `HappyStk` happyRest}}

happyReduce_129 = happyReduce 4# 32# happyReduction_129
happyReduction_129 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut39 happy_x_1 of { happy_var_1 -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (UnOp (ToFloat (fst happy_var_1)) happy_var_3 (snd happy_var_1)
	) `HappyStk` happyRest}}

happyReduce_130 = happySpecReduce_3  32# happyReduction_130
happyReduction_130 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { (L happy_var_2 POW) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (BinOp Pow happy_var_1 happy_var_3 NoInfo happy_var_2
	)}}}

happyReduce_131 = happySpecReduce_3  32# happyReduction_131
happyReduction_131 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { (L happy_var_2 SHIFTR) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (BinOp ShiftR happy_var_1 happy_var_3 NoInfo happy_var_2
	)}}}

happyReduce_132 = happySpecReduce_3  32# happyReduction_132
happyReduction_132 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { (L happy_var_2 ZSHIFTR) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (BinOp ZShiftR happy_var_1 happy_var_3 NoInfo happy_var_2
	)}}}

happyReduce_133 = happySpecReduce_3  32# happyReduction_133
happyReduction_133 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { (L happy_var_2 SHIFTL) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (BinOp ShiftL happy_var_1 happy_var_3 NoInfo happy_var_2
	)}}}

happyReduce_134 = happySpecReduce_3  32# happyReduction_134
happyReduction_134 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { (L happy_var_2 AND) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (BinOp LogAnd happy_var_1 happy_var_3 NoInfo happy_var_2
	)}}}

happyReduce_135 = happySpecReduce_3  32# happyReduction_135
happyReduction_135 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { (L happy_var_2 OR) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (BinOp LogOr happy_var_1 happy_var_3 NoInfo happy_var_2
	)}}}

happyReduce_136 = happySpecReduce_3  32# happyReduction_136
happyReduction_136 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { (L happy_var_2 BAND) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (BinOp Band happy_var_1 happy_var_3 NoInfo happy_var_2
	)}}}

happyReduce_137 = happySpecReduce_3  32# happyReduction_137
happyReduction_137 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { (L happy_var_2 BOR) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (BinOp Bor happy_var_1 happy_var_3 NoInfo happy_var_2
	)}}}

happyReduce_138 = happySpecReduce_3  32# happyReduction_138
happyReduction_138 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { (L happy_var_2 XOR) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (BinOp Xor happy_var_1 happy_var_3 NoInfo happy_var_2
	)}}}

happyReduce_139 = happySpecReduce_3  32# happyReduction_139
happyReduction_139 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { (L happy_var_2 EQU2) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (BinOp Equal happy_var_1 happy_var_3 NoInfo happy_var_2
	)}}}

happyReduce_140 = happySpecReduce_3  32# happyReduction_140
happyReduction_140 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { (L happy_var_2 NEQU) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (BinOp NotEqual happy_var_1 happy_var_3 NoInfo happy_var_2
	)}}}

happyReduce_141 = happySpecReduce_3  32# happyReduction_141
happyReduction_141 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { (L happy_var_2 LTH) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (BinOp Less happy_var_1 happy_var_3 NoInfo happy_var_2
	)}}}

happyReduce_142 = happySpecReduce_3  32# happyReduction_142
happyReduction_142 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { (L happy_var_2 LEQ) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (BinOp Leq  happy_var_1 happy_var_3 NoInfo happy_var_2
	)}}}

happyReduce_143 = happySpecReduce_3  32# happyReduction_143
happyReduction_143 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { (L happy_var_2 GTH) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (BinOp Greater happy_var_1 happy_var_3 NoInfo happy_var_2
	)}}}

happyReduce_144 = happySpecReduce_3  32# happyReduction_144
happyReduction_144 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { (L happy_var_2 GEQ) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (BinOp Geq  happy_var_1 happy_var_3 NoInfo happy_var_2
	)}}}

happyReduce_145 = happyReduce 6# 32# happyReduction_145
happyReduction_145 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 IF) -> 
	case happyOut41 happy_x_2 of { happy_var_2 -> 
	case happyOut41 happy_x_4 of { happy_var_4 -> 
	case happyOut41 happy_x_6 of { happy_var_6 -> 
	happyIn41
		 (If happy_var_2 happy_var_4 happy_var_6 NoInfo happy_var_1
	) `HappyStk` happyRest}}}}

happyReduce_146 = happyReduce 4# 32# happyReduction_146
happyReduction_146 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut23 happy_x_1 of { happy_var_1 -> 
	case happyOut46 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (Apply (fst happy_var_1) [ (arg, Observe) | arg <- happy_var_3 ] NoInfo (snd happy_var_1)
	) `HappyStk` happyRest}}

happyReduce_147 = happySpecReduce_3  32# happyReduction_147
happyReduction_147 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut23 happy_x_1 of { happy_var_1 -> 
	happyIn41
		 (Apply (fst happy_var_1) [] NoInfo (snd happy_var_1)
	)}

happyReduce_148 = happyReduce 4# 32# happyReduction_148
happyReduction_148 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 IOTA) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (Iota happy_var_3 happy_var_1
	) `HappyStk` happyRest}}

happyReduce_149 = happyReduce 6# 32# happyReduction_149
happyReduction_149 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 SIZE) -> 
	case happyOut54 happy_x_3 of { happy_var_3 -> 
	case happyOut41 happy_x_5 of { happy_var_5 -> 
	happyIn41
		 (Size happy_var_3 happy_var_5 happy_var_1
	) `HappyStk` happyRest}}}

happyReduce_150 = happyReduce 6# 32# happyReduction_150
happyReduction_150 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 SIZE) -> 
	case happyOut54 happy_x_3 of { happy_var_3 -> 
	case happyOut41 happy_x_5 of { happy_var_5 -> 
	happyIn41
		 (Size happy_var_3 happy_var_5 happy_var_1
	) `HappyStk` happyRest}}}

happyReduce_151 = happyReduce 6# 32# happyReduction_151
happyReduction_151 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 REPLICATE) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	case happyOut41 happy_x_5 of { happy_var_5 -> 
	happyIn41
		 (Replicate happy_var_3 happy_var_5 happy_var_1
	) `HappyStk` happyRest}}}

happyReduce_152 = happyReduce 8# 32# happyReduction_152
happyReduction_152 (happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 RESHAPE) -> 
	case happyOut46 happy_x_4 of { happy_var_4 -> 
	case happyOut41 happy_x_7 of { happy_var_7 -> 
	happyIn41
		 (Reshape happy_var_4 happy_var_7 happy_var_1
	) `HappyStk` happyRest}}}

happyReduce_153 = happyReduce 8# 32# happyReduction_153
happyReduction_153 (happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 REARRANGE) -> 
	case happyOut55 happy_x_4 of { happy_var_4 -> 
	case happyOut41 happy_x_7 of { happy_var_7 -> 
	happyIn41
		 (Rearrange happy_var_4 happy_var_7 happy_var_1
	) `HappyStk` happyRest}}}

happyReduce_154 = happyReduce 4# 32# happyReduction_154
happyReduction_154 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 TRANSPOSE) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (Transpose happy_var_3 happy_var_1
	) `HappyStk` happyRest}}

happyReduce_155 = happyReduce 8# 32# happyReduction_155
happyReduction_155 (happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 ROTATE) -> 
	case happyOut54 happy_x_3 of { happy_var_3 -> 
	case happyOut41 happy_x_5 of { happy_var_5 -> 
	case happyOut41 happy_x_7 of { happy_var_7 -> 
	happyIn41
		 (Rotate happy_var_3 happy_var_5 happy_var_7 happy_var_1
	) `HappyStk` happyRest}}}}

happyReduce_156 = happyReduce 6# 32# happyReduction_156
happyReduction_156 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 ROTATE) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	case happyOut41 happy_x_5 of { happy_var_5 -> 
	happyIn41
		 (Rotate 0 happy_var_3 happy_var_5 happy_var_1
	) `HappyStk` happyRest}}}

happyReduce_157 = happyReduce 8# 32# happyReduction_157
happyReduction_157 (happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 SPLIT) -> 
	case happyOut46 happy_x_4 of { happy_var_4 -> 
	case happyOut41 happy_x_7 of { happy_var_7 -> 
	happyIn41
		 (Split 0 happy_var_4 happy_var_7 happy_var_1
	) `HappyStk` happyRest}}}

happyReduce_158 = happyReduce 10# 32# happyReduction_158
happyReduction_158 (happy_x_10 `HappyStk`
	happy_x_9 `HappyStk`
	happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 SPLIT) -> 
	case happyOut54 happy_x_3 of { happy_var_3 -> 
	case happyOut46 happy_x_6 of { happy_var_6 -> 
	case happyOut41 happy_x_9 of { happy_var_9 -> 
	happyIn41
		 (Split happy_var_3 happy_var_6 happy_var_9 happy_var_1
	) `HappyStk` happyRest}}}}

happyReduce_159 = happyReduce 6# 32# happyReduction_159
happyReduction_159 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 CONCAT) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	case happyOut46 happy_x_5 of { happy_var_5 -> 
	happyIn41
		 (Concat 0 happy_var_3 happy_var_5 happy_var_1
	) `HappyStk` happyRest}}}

happyReduce_160 = happyReduce 8# 32# happyReduction_160
happyReduction_160 (happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 CONCAT) -> 
	case happyOut54 happy_x_3 of { happy_var_3 -> 
	case happyOut41 happy_x_5 of { happy_var_5 -> 
	case happyOut46 happy_x_7 of { happy_var_7 -> 
	happyIn41
		 (Concat happy_var_3 happy_var_5 happy_var_7 happy_var_1
	) `HappyStk` happyRest}}}}

happyReduce_161 = happyReduce 8# 32# happyReduction_161
happyReduction_161 (happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 REDUCE) -> 
	case happyOut50 happy_x_3 of { happy_var_3 -> 
	case happyOut41 happy_x_5 of { happy_var_5 -> 
	case happyOut41 happy_x_7 of { happy_var_7 -> 
	happyIn41
		 (Reduce (commutativity happy_var_3) happy_var_3 happy_var_5 happy_var_7 happy_var_1
	) `HappyStk` happyRest}}}}

happyReduce_162 = happyReduce 8# 32# happyReduction_162
happyReduction_162 (happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 REDUCECOMM) -> 
	case happyOut50 happy_x_3 of { happy_var_3 -> 
	case happyOut41 happy_x_5 of { happy_var_5 -> 
	case happyOut41 happy_x_7 of { happy_var_7 -> 
	happyIn41
		 (Reduce Commutative happy_var_3 happy_var_5 happy_var_7 happy_var_1
	) `HappyStk` happyRest}}}}

happyReduce_163 = happyReduce 6# 32# happyReduction_163
happyReduction_163 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 MAP) -> 
	case happyOut50 happy_x_3 of { happy_var_3 -> 
	case happyOut41 happy_x_5 of { happy_var_5 -> 
	happyIn41
		 (Map happy_var_3 happy_var_5 happy_var_1
	) `HappyStk` happyRest}}}

happyReduce_164 = happyReduce 8# 32# happyReduction_164
happyReduction_164 (happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 SCAN) -> 
	case happyOut50 happy_x_3 of { happy_var_3 -> 
	case happyOut41 happy_x_5 of { happy_var_5 -> 
	case happyOut41 happy_x_7 of { happy_var_7 -> 
	happyIn41
		 (Scan happy_var_3 happy_var_5 happy_var_7 happy_var_1
	) `HappyStk` happyRest}}}}

happyReduce_165 = happyReduce 4# 32# happyReduction_165
happyReduction_165 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 ZIP) -> 
	case happyOut46 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (Zip (map (\x -> (x, NoInfo)) happy_var_3) happy_var_1
	) `HappyStk` happyRest}}

happyReduce_166 = happyReduce 4# 32# happyReduction_166
happyReduction_166 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 UNZIP) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (Unzip happy_var_3 [] happy_var_1
	) `HappyStk` happyRest}}

happyReduce_167 = happySpecReduce_2  32# happyReduction_167
happyReduction_167 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 UNSAFE) -> 
	case happyOut41 happy_x_2 of { happy_var_2 -> 
	happyIn41
		 (Unsafe happy_var_2 happy_var_1
	)}}

happyReduce_168 = happyReduce 6# 32# happyReduction_168
happyReduction_168 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 FILTER) -> 
	case happyOut50 happy_x_3 of { happy_var_3 -> 
	case happyOut41 happy_x_5 of { happy_var_5 -> 
	happyIn41
		 (Filter happy_var_3 happy_var_5 happy_var_1
	) `HappyStk` happyRest}}}

happyReduce_169 = happyReduce 4# 32# happyReduction_169
happyReduction_169 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 PARTITION) -> 
	case happyOut51 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (Partition (fst happy_var_3) (snd happy_var_3) happy_var_1
	) `HappyStk` happyRest}}

happyReduce_170 = happyReduce 6# 32# happyReduction_170
happyReduction_170 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 ZIPWITH) -> 
	case happyOut50 happy_x_3 of { happy_var_3 -> 
	case happyOut46 happy_x_5 of { happy_var_5 -> 
	happyIn41
		 (Map happy_var_3 (Zip (map (\x -> (x, NoInfo)) happy_var_5) happy_var_1) happy_var_1
	) `HappyStk` happyRest}}}

happyReduce_171 = happyReduce 4# 32# happyReduction_171
happyReduction_171 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 COPY) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (Copy happy_var_3 happy_var_1
	) `HappyStk` happyRest}}

happyReduce_172 = happySpecReduce_3  32# happyReduction_172
happyReduction_172 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_2 of { happy_var_2 -> 
	happyIn41
		 (happy_var_2
	)}

happyReduce_173 = happySpecReduce_1  32# happyReduction_173
happyReduction_173 happy_x_1
	 =  case happyOut42 happy_x_1 of { happy_var_1 -> 
	happyIn41
		 (happy_var_1
	)}

happyReduce_174 = happySpecReduce_2  32# happyReduction_174
happyReduction_174 happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOut45 happy_x_2 of { happy_var_2 -> 
	happyIn41
		 (Index happy_var_1 happy_var_2 (srclocOf happy_var_1)
	)}}

happyReduce_175 = happySpecReduce_3  32# happyReduction_175
happyReduction_175 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOut54 happy_x_3 of { happy_var_3 -> 
	happyIn41
		 (TupleIndex happy_var_1 happy_var_3 NoInfo $ srclocOf happy_var_1
	)}}

happyReduce_176 = happyReduce 6# 32# happyReduction_176
happyReduction_176 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 STREAM_MAP) -> 
	case happyOut50 happy_x_3 of { happy_var_3 -> 
	case happyOut41 happy_x_5 of { happy_var_5 -> 
	happyIn41
		 (Stream (MapLike InOrder)  happy_var_3 happy_var_5 happy_var_1
	) `HappyStk` happyRest}}}

happyReduce_177 = happyReduce 6# 32# happyReduction_177
happyReduction_177 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 STREAM_MAPPER) -> 
	case happyOut50 happy_x_3 of { happy_var_3 -> 
	case happyOut41 happy_x_5 of { happy_var_5 -> 
	happyIn41
		 (Stream (MapLike Disorder) happy_var_3 happy_var_5 happy_var_1
	) `HappyStk` happyRest}}}

happyReduce_178 = happyReduce 10# 32# happyReduction_178
happyReduction_178 (happy_x_10 `HappyStk`
	happy_x_9 `HappyStk`
	happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 STREAM_RED) -> 
	case happyOut50 happy_x_3 of { happy_var_3 -> 
	case happyOut50 happy_x_5 of { happy_var_5 -> 
	case happyOut41 happy_x_7 of { happy_var_7 -> 
	case happyOut41 happy_x_9 of { happy_var_9 -> 
	happyIn41
		 (Stream (RedLike InOrder (commutativity happy_var_3) happy_var_3 happy_var_7) happy_var_5 happy_var_9 happy_var_1
	) `HappyStk` happyRest}}}}}

happyReduce_179 = happyReduce 10# 32# happyReduction_179
happyReduction_179 (happy_x_10 `HappyStk`
	happy_x_9 `HappyStk`
	happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 STREAM_REDPER) -> 
	case happyOut50 happy_x_3 of { happy_var_3 -> 
	case happyOut50 happy_x_5 of { happy_var_5 -> 
	case happyOut41 happy_x_7 of { happy_var_7 -> 
	case happyOut41 happy_x_9 of { happy_var_9 -> 
	happyIn41
		 (Stream (RedLike Disorder Commutative happy_var_3 happy_var_7) happy_var_5 happy_var_9 happy_var_1
	) `HappyStk` happyRest}}}}}

happyReduce_180 = happyReduce 8# 32# happyReduction_180
happyReduction_180 (happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 STREAM_SEQ) -> 
	case happyOut50 happy_x_3 of { happy_var_3 -> 
	case happyOut41 happy_x_5 of { happy_var_5 -> 
	case happyOut41 happy_x_7 of { happy_var_7 -> 
	happyIn41
		 (Stream (Sequential happy_var_5) happy_var_3 happy_var_7 happy_var_1
	) `HappyStk` happyRest}}}}

happyReduce_181 = happyReduce 8# 32# happyReduction_181
happyReduction_181 (happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 WRITE) -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	case happyOut41 happy_x_5 of { happy_var_5 -> 
	case happyOut46 happy_x_7 of { happy_var_7 -> 
	happyIn41
		 (Write happy_var_3 happy_var_5 happy_var_7 happy_var_1
	) `HappyStk` happyRest}}}}

happyReduce_182 = happyReduce 5# 33# happyReduction_182
happyReduction_182 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 LET) -> 
	case happyOut47 happy_x_2 of { happy_var_2 -> 
	case happyOut41 happy_x_4 of { happy_var_4 -> 
	case happyOut43 happy_x_5 of { happy_var_5 -> 
	happyIn42
		 (LetPat (Id happy_var_2) happy_var_4 happy_var_5 happy_var_1
	) `HappyStk` happyRest}}}}

happyReduce_183 = happyReduce 5# 33# happyReduction_183
happyReduction_183 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 LET) -> 
	case happyOutTok happy_x_2 of { (L happy_var_2 UNDERSCORE) -> 
	case happyOut41 happy_x_4 of { happy_var_4 -> 
	case happyOut43 happy_x_5 of { happy_var_5 -> 
	happyIn42
		 (LetPat (Wildcard NoInfo happy_var_2) happy_var_4 happy_var_5 happy_var_1
	) `HappyStk` happyRest}}}}

happyReduce_184 = happyReduce 7# 33# happyReduction_184
happyReduction_184 (happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 LET) -> 
	case happyOut48 happy_x_3 of { happy_var_3 -> 
	case happyOut41 happy_x_6 of { happy_var_6 -> 
	case happyOut43 happy_x_7 of { happy_var_7 -> 
	happyIn42
		 (LetPat (TuplePattern happy_var_3 happy_var_1) happy_var_6 happy_var_7 happy_var_1
	) `HappyStk` happyRest}}}}

happyReduce_185 = happyReduce 9# 33# happyReduction_185
happyReduction_185 (happy_x_9 `HappyStk`
	happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 LET) -> 
	case happyOut47 happy_x_2 of { happy_var_2 -> 
	case happyOut47 happy_x_4 of { happy_var_4 -> 
	case happyOut45 happy_x_6 of { happy_var_6 -> 
	case happyOut41 happy_x_8 of { happy_var_8 -> 
	case happyOut43 happy_x_9 of { happy_var_9 -> 
	happyIn42
		 (LetWith happy_var_2 happy_var_4 happy_var_6 happy_var_8 happy_var_9 happy_var_1
	) `HappyStk` happyRest}}}}}}

happyReduce_186 = happyReduce 6# 33# happyReduction_186
happyReduction_186 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 LET) -> 
	case happyOut47 happy_x_2 of { happy_var_2 -> 
	case happyOut45 happy_x_3 of { happy_var_3 -> 
	case happyOut41 happy_x_5 of { happy_var_5 -> 
	case happyOut43 happy_x_6 of { happy_var_6 -> 
	happyIn42
		 (LetWith happy_var_2 happy_var_2 happy_var_3 happy_var_5 happy_var_6 happy_var_1
	) `HappyStk` happyRest}}}}}

happyReduce_187 = happyReduce 7# 33# happyReduction_187
happyReduction_187 (happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 LET) -> 
	case happyOut47 happy_x_2 of { happy_var_2 -> 
	case happyOut41 happy_x_6 of { happy_var_6 -> 
	case happyOut43 happy_x_7 of { happy_var_7 -> 
	happyIn42
		 (LetWith happy_var_2 happy_var_2 [] happy_var_6 happy_var_7 happy_var_1
	) `HappyStk` happyRest}}}}

happyReduce_188 = happyMonadReduce 9# 33# happyReduction_188
happyReduction_188 (happy_x_9 `HappyStk`
	happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { (L happy_var_1 LOOP) -> 
	case happyOut49 happy_x_3 of { happy_var_3 -> 
	case happyOut44 happy_x_6 of { happy_var_6 -> 
	case happyOut41 happy_x_8 of { happy_var_8 -> 
	case happyOut43 happy_x_9 of { happy_var_9 -> 
	( liftM (\t -> DoLoop happy_var_3 t happy_var_6 happy_var_8 happy_var_9 happy_var_1)
                               (patternExp happy_var_3))}}}}}
	) (\r -> happyReturn (happyIn42 r))

happyReduce_189 = happyReduce 11# 33# happyReduction_189
happyReduction_189 (happy_x_11 `HappyStk`
	happy_x_10 `HappyStk`
	happy_x_9 `HappyStk`
	happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 LOOP) -> 
	case happyOut49 happy_x_3 of { happy_var_3 -> 
	case happyOut41 happy_x_5 of { happy_var_5 -> 
	case happyOut44 happy_x_8 of { happy_var_8 -> 
	case happyOut41 happy_x_10 of { happy_var_10 -> 
	case happyOut43 happy_x_11 of { happy_var_11 -> 
	happyIn42
		 (DoLoop happy_var_3 happy_var_5 happy_var_8 happy_var_10 happy_var_11 happy_var_1
	) `HappyStk` happyRest}}}}}}

happyReduce_190 = happySpecReduce_2  34# happyReduction_190
happyReduction_190 happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_2 of { happy_var_2 -> 
	happyIn43
		 (happy_var_2
	)}

happyReduce_191 = happySpecReduce_1  34# happyReduction_191
happyReduction_191 happy_x_1
	 =  case happyOut42 happy_x_1 of { happy_var_1 -> 
	happyIn43
		 (happy_var_1
	)}

happyReduce_192 = happyReduce 4# 35# happyReduction_192
happyReduction_192 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 FOR) -> 
	case happyOut47 happy_x_2 of { happy_var_2 -> 
	case happyOut41 happy_x_4 of { happy_var_4 -> 
	happyIn44
		 (For FromUpTo (zeroExpression (srclocOf happy_var_1)) happy_var_2 happy_var_4
	) `HappyStk` happyRest}}}

happyReduce_193 = happyReduce 6# 35# happyReduction_193
happyReduction_193 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut41 happy_x_2 of { happy_var_2 -> 
	case happyOut47 happy_x_4 of { happy_var_4 -> 
	case happyOut41 happy_x_6 of { happy_var_6 -> 
	happyIn44
		 (For FromUpTo happy_var_2 happy_var_4 happy_var_6
	) `HappyStk` happyRest}}}

happyReduce_194 = happyReduce 6# 35# happyReduction_194
happyReduction_194 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut41 happy_x_2 of { happy_var_2 -> 
	case happyOut47 happy_x_4 of { happy_var_4 -> 
	case happyOut41 happy_x_6 of { happy_var_6 -> 
	happyIn44
		 (For FromDownTo happy_var_6 happy_var_4 happy_var_2
	) `HappyStk` happyRest}}}

happyReduce_195 = happyReduce 4# 35# happyReduction_195
happyReduction_195 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 FOR) -> 
	case happyOut41 happy_x_2 of { happy_var_2 -> 
	case happyOut47 happy_x_4 of { happy_var_4 -> 
	happyIn44
		 (For FromDownTo (zeroExpression (srclocOf happy_var_1)) happy_var_4 happy_var_2
	) `HappyStk` happyRest}}}

happyReduce_196 = happySpecReduce_2  35# happyReduction_196
happyReduction_196 happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_2 of { happy_var_2 -> 
	happyIn44
		 (While happy_var_2
	)}

happyReduce_197 = happySpecReduce_3  36# happyReduction_197
happyReduction_197 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut46 happy_x_2 of { happy_var_2 -> 
	happyIn45
		 (happy_var_2
	)}

happyReduce_198 = happySpecReduce_3  37# happyReduction_198
happyReduction_198 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOut46 happy_x_3 of { happy_var_3 -> 
	happyIn46
		 (happy_var_1 : happy_var_3
	)}}

happyReduce_199 = happySpecReduce_1  37# happyReduction_199
happyReduction_199 happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	happyIn46
		 ([happy_var_1]
	)}

happyReduce_200 = happySpecReduce_1  38# happyReduction_200
happyReduction_200 happy_x_1
	 =  case happyOut23 happy_x_1 of { happy_var_1 -> 
	happyIn47
		 (let (([], name), loc) = happy_var_1 in Ident name NoInfo loc
	)}

happyReduce_201 = happySpecReduce_3  39# happyReduction_201
happyReduction_201 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut49 happy_x_1 of { happy_var_1 -> 
	case happyOut48 happy_x_3 of { happy_var_3 -> 
	happyIn48
		 (happy_var_1 : happy_var_3
	)}}

happyReduce_202 = happySpecReduce_1  39# happyReduction_202
happyReduction_202 happy_x_1
	 =  case happyOut49 happy_x_1 of { happy_var_1 -> 
	happyIn48
		 ([happy_var_1]
	)}

happyReduce_203 = happySpecReduce_0  39# happyReduction_203
happyReduction_203  =  happyIn48
		 ([]
	)

happyReduce_204 = happySpecReduce_1  40# happyReduction_204
happyReduction_204 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn49
		 (let L pos (ID name) = happy_var_1 in Id $ Ident name NoInfo pos
	)}

happyReduce_205 = happySpecReduce_1  40# happyReduction_205
happyReduction_205 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 UNDERSCORE) -> 
	happyIn49
		 (Wildcard NoInfo happy_var_1
	)}

happyReduce_206 = happySpecReduce_3  40# happyReduction_206
happyReduction_206 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 LPAR) -> 
	case happyOut48 happy_x_2 of { happy_var_2 -> 
	happyIn49
		 (TuplePattern happy_var_2 happy_var_1
	)}}

happyReduce_207 = happyReduce 7# 41# happyReduction_207
happyReduction_207 (happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { (L happy_var_1 FN) -> 
	case happyOut30 happy_x_2 of { happy_var_2 -> 
	case happyOut40 happy_x_4 of { happy_var_4 -> 
	case happyOut41 happy_x_7 of { happy_var_7 -> 
	happyIn50
		 (AnonymFun happy_var_4 happy_var_7 happy_var_2 happy_var_1
	) `HappyStk` happyRest}}}}

happyReduce_208 = happyReduce 4# 41# happyReduction_208
happyReduction_208 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut23 happy_x_1 of { happy_var_1 -> 
	case happyOut46 happy_x_3 of { happy_var_3 -> 
	happyIn50
		 (CurryFun (fst happy_var_1) happy_var_3 NoInfo (snd happy_var_1)
	) `HappyStk` happyRest}}

happyReduce_209 = happySpecReduce_3  41# happyReduction_209
happyReduction_209 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut23 happy_x_1 of { happy_var_1 -> 
	happyIn50
		 (CurryFun (fst happy_var_1) [] NoInfo (snd happy_var_1)
	)}

happyReduce_210 = happySpecReduce_1  41# happyReduction_210
happyReduction_210 happy_x_1
	 =  case happyOut23 happy_x_1 of { happy_var_1 -> 
	happyIn50
		 (CurryFun (fst happy_var_1) [] NoInfo (snd happy_var_1)
	)}

happyReduce_211 = happySpecReduce_2  41# happyReduction_211
happyReduction_211 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 MINUS) -> 
	case happyOut41 happy_x_2 of { happy_var_2 -> 
	happyIn50
		 (CurryBinOpRight Minus happy_var_2 NoInfo NoInfo happy_var_1
	)}}

happyReduce_212 = happySpecReduce_1  41# happyReduction_212
happyReduction_212 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 MINUS) -> 
	happyIn50
		 (BinOpFun Minus NoInfo NoInfo NoInfo happy_var_1
	)}

happyReduce_213 = happySpecReduce_2  41# happyReduction_213
happyReduction_213 happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	happyIn50
		 (CurryBinOpLeft Minus happy_var_1 NoInfo NoInfo (srclocOf happy_var_1)
	)}

happyReduce_214 = happySpecReduce_2  41# happyReduction_214
happyReduction_214 happy_x_2
	happy_x_1
	 =  case happyOut24 happy_x_1 of { happy_var_1 -> 
	case happyOut41 happy_x_2 of { happy_var_2 -> 
	happyIn50
		 (CurryBinOpRight (fst happy_var_1) happy_var_2 NoInfo NoInfo (snd happy_var_1)
	)}}

happyReduce_215 = happySpecReduce_2  41# happyReduction_215
happyReduction_215 happy_x_2
	happy_x_1
	 =  case happyOut41 happy_x_1 of { happy_var_1 -> 
	case happyOut24 happy_x_2 of { happy_var_2 -> 
	happyIn50
		 (CurryBinOpLeft (fst happy_var_2) happy_var_1 NoInfo NoInfo (snd happy_var_2)
	)}}

happyReduce_216 = happySpecReduce_1  41# happyReduction_216
happyReduction_216 happy_x_1
	 =  case happyOut24 happy_x_1 of { happy_var_1 -> 
	happyIn50
		 (BinOpFun (fst happy_var_1) NoInfo NoInfo NoInfo (snd happy_var_1)
	)}

happyReduce_217 = happySpecReduce_1  41# happyReduction_217
happyReduction_217 happy_x_1
	 =  case happyOut25 happy_x_1 of { happy_var_1 -> 
	happyIn50
		 (UnOpFun (fst happy_var_1) NoInfo NoInfo (snd happy_var_1)
	)}

happyReduce_218 = happySpecReduce_3  42# happyReduction_218
happyReduction_218 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut50 happy_x_1 of { happy_var_1 -> 
	case happyOut41 happy_x_3 of { happy_var_3 -> 
	happyIn51
		 (([happy_var_1], happy_var_3)
	)}}

happyReduce_219 = happySpecReduce_3  42# happyReduction_219
happyReduction_219 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut50 happy_x_1 of { happy_var_1 -> 
	case happyOut51 happy_x_3 of { happy_var_3 -> 
	happyIn51
		 ((happy_var_1 : fst happy_var_3, snd happy_var_3)
	)}}

happyReduce_220 = happySpecReduce_1  43# happyReduction_220
happyReduction_220 happy_x_1
	 =  case happyOut56 happy_x_1 of { happy_var_1 -> 
	happyIn52
		 (happy_var_1
	)}

happyReduce_221 = happySpecReduce_1  43# happyReduction_221
happyReduction_221 happy_x_1
	 =  case happyOut57 happy_x_1 of { happy_var_1 -> 
	happyIn52
		 (happy_var_1
	)}

happyReduce_222 = happySpecReduce_1  43# happyReduction_222
happyReduction_222 happy_x_1
	 =  case happyOut58 happy_x_1 of { happy_var_1 -> 
	happyIn52
		 (happy_var_1
	)}

happyReduce_223 = happySpecReduce_1  43# happyReduction_223
happyReduction_223 happy_x_1
	 =  case happyOut59 happy_x_1 of { happy_var_1 -> 
	happyIn52
		 (happy_var_1
	)}

happyReduce_224 = happySpecReduce_1  43# happyReduction_224
happyReduction_224 happy_x_1
	 =  case happyOut64 happy_x_1 of { happy_var_1 -> 
	happyIn52
		 (happy_var_1
	)}

happyReduce_225 = happySpecReduce_1  43# happyReduction_225
happyReduction_225 happy_x_1
	 =  case happyOut65 happy_x_1 of { happy_var_1 -> 
	happyIn52
		 (happy_var_1
	)}

happyReduce_226 = happySpecReduce_2  44# happyReduction_226
happyReduction_226 happy_x_2
	happy_x_1
	 =  case happyOut52 happy_x_1 of { happy_var_1 -> 
	case happyOut53 happy_x_2 of { happy_var_2 -> 
	happyIn53
		 (happy_var_1 : happy_var_2
	)}}

happyReduce_227 = happySpecReduce_0  44# happyReduction_227
happyReduction_227  =  happyIn53
		 ([]
	)

happyReduce_228 = happySpecReduce_1  45# happyReduction_228
happyReduction_228 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn54
		 (let L _ (INTLIT num) = happy_var_1 in fromIntegral num
	)}

happyReduce_229 = happySpecReduce_1  46# happyReduction_229
happyReduction_229 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn55
		 (let L _ (INTLIT num) = happy_var_1 in [fromIntegral num]
	)}

happyReduce_230 = happySpecReduce_3  46# happyReduction_230
happyReduction_230 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut55 happy_x_3 of { happy_var_3 -> 
	happyIn55
		 (let L _ (INTLIT num) = happy_var_1 in fromIntegral num : happy_var_3
	)}}

happyReduce_231 = happySpecReduce_1  47# happyReduction_231
happyReduction_231 happy_x_1
	 =  case happyOut60 happy_x_1 of { happy_var_1 -> 
	happyIn56
		 (PrimValue (SignedValue (fst happy_var_1))
	)}

happyReduce_232 = happySpecReduce_2  47# happyReduction_232
happyReduction_232 happy_x_2
	happy_x_1
	 =  case happyOut60 happy_x_2 of { happy_var_2 -> 
	happyIn56
		 (PrimValue (SignedValue (intNegate (fst happy_var_2)))
	)}

happyReduce_233 = happySpecReduce_1  47# happyReduction_233
happyReduction_233 happy_x_1
	 =  case happyOut61 happy_x_1 of { happy_var_1 -> 
	happyIn56
		 (PrimValue (UnsignedValue (fst happy_var_1))
	)}

happyReduce_234 = happySpecReduce_1  48# happyReduction_234
happyReduction_234 happy_x_1
	 =  case happyOut62 happy_x_1 of { happy_var_1 -> 
	happyIn57
		 (PrimValue (FloatValue (fst happy_var_1))
	)}

happyReduce_235 = happySpecReduce_2  48# happyReduction_235
happyReduction_235 happy_x_2
	happy_x_1
	 =  case happyOut62 happy_x_2 of { happy_var_2 -> 
	happyIn57
		 (PrimValue (FloatValue (floatNegate (fst happy_var_2)))
	)}

happyReduce_236 = happyMonadReduce 1# 49# happyReduction_236
happyReduction_236 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	( let L pos (STRINGLIT s) = happy_var_1 in do
                             s' <- mapM (getIntValue . fromIntegral . ord) s
                             t <- lift $ gets parserIntType
                             return $ ArrayValue (arrayFromList $ map (PrimValue . SignedValue) s') $ Prim $ Signed t)}
	) (\r -> happyReturn (happyIn58 r))

happyReduce_237 = happySpecReduce_1  50# happyReduction_237
happyReduction_237 happy_x_1
	 =  happyIn59
		 (PrimValue $ BoolValue True
	)

happyReduce_238 = happySpecReduce_1  50# happyReduction_238
happyReduction_238 happy_x_1
	 =  happyIn59
		 (PrimValue $ BoolValue False
	)

happyReduce_239 = happySpecReduce_1  51# happyReduction_239
happyReduction_239 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn60
		 (let L pos (I8LIT num)  = happy_var_1 in (Int8Value num, pos)
	)}

happyReduce_240 = happySpecReduce_1  51# happyReduction_240
happyReduction_240 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn60
		 (let L pos (I16LIT num) = happy_var_1 in (Int16Value num, pos)
	)}

happyReduce_241 = happySpecReduce_1  51# happyReduction_241
happyReduction_241 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn60
		 (let L pos (I32LIT num) = happy_var_1 in (Int32Value num, pos)
	)}

happyReduce_242 = happySpecReduce_1  51# happyReduction_242
happyReduction_242 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn60
		 (let L pos (I64LIT num) = happy_var_1 in (Int64Value num, pos)
	)}

happyReduce_243 = happyMonadReduce 1# 51# happyReduction_243
happyReduction_243 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	( let L pos (INTLIT num) = happy_var_1 in do num' <- getIntValue num; return (num', pos))}
	) (\r -> happyReturn (happyIn60 r))

happyReduce_244 = happyMonadReduce 1# 51# happyReduction_244
happyReduction_244 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	( let L pos (CHARLIT char) = happy_var_1 in do
                       num <- getIntValue $ fromIntegral $ ord char
                       return (num, pos))}
	) (\r -> happyReturn (happyIn60 r))

happyReduce_245 = happySpecReduce_1  52# happyReduction_245
happyReduction_245 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn61
		 (let L pos (U8LIT num)  = happy_var_1 in (Int8Value num, pos)
	)}

happyReduce_246 = happySpecReduce_1  52# happyReduction_246
happyReduction_246 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn61
		 (let L pos (U16LIT num) = happy_var_1 in (Int16Value num, pos)
	)}

happyReduce_247 = happySpecReduce_1  52# happyReduction_247
happyReduction_247 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn61
		 (let L pos (U32LIT num) = happy_var_1 in (Int32Value num, pos)
	)}

happyReduce_248 = happySpecReduce_1  52# happyReduction_248
happyReduction_248 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn61
		 (let L pos (U64LIT num) = happy_var_1 in (Int64Value num, pos)
	)}

happyReduce_249 = happySpecReduce_1  53# happyReduction_249
happyReduction_249 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn62
		 (let L pos (F32LIT num) = happy_var_1 in (Float32Value num, pos)
	)}

happyReduce_250 = happySpecReduce_1  53# happyReduction_250
happyReduction_250 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn62
		 (let L pos (F64LIT num) = happy_var_1 in (Float64Value num, pos)
	)}

happyReduce_251 = happyMonadReduce 1# 53# happyReduction_251
happyReduction_251 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	( let L pos (REALLIT num) = happy_var_1 in do num' <- getRealValue num; return (num', pos))}
	) (\r -> happyReturn (happyIn62 r))

happyReduce_252 = happySpecReduce_1  54# happyReduction_252
happyReduction_252 happy_x_1
	 =  case happyOut60 happy_x_1 of { happy_var_1 -> 
	happyIn63
		 (let (x,loc) = happy_var_1 in (SignedValue x, loc)
	)}

happyReduce_253 = happySpecReduce_1  54# happyReduction_253
happyReduction_253 happy_x_1
	 =  case happyOut61 happy_x_1 of { happy_var_1 -> 
	happyIn63
		 (let (x,loc) = happy_var_1 in (UnsignedValue x, loc)
	)}

happyReduce_254 = happySpecReduce_1  54# happyReduction_254
happyReduction_254 happy_x_1
	 =  case happyOut62 happy_x_1 of { happy_var_1 -> 
	happyIn63
		 (let (x,loc) = happy_var_1 in (FloatValue x, loc)
	)}

happyReduce_255 = happySpecReduce_1  54# happyReduction_255
happyReduction_255 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 TRUE) -> 
	happyIn63
		 ((BoolValue True, happy_var_1)
	)}

happyReduce_256 = happySpecReduce_1  54# happyReduction_256
happyReduction_256 happy_x_1
	 =  case happyOutTok happy_x_1 of { (L happy_var_1 FALSE) -> 
	happyIn63
		 ((BoolValue False, happy_var_1)
	)}

happyReduce_257 = happyMonadReduce 3# 55# happyReduction_257
happyReduction_257 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut52 happy_x_2 of { happy_var_2 -> 
	( return $ ArrayValue (arrayFromList [happy_var_2]) $ removeNames $ toStruct $ valueType happy_var_2)}
	) (\r -> happyReturn (happyIn64 r))

happyReduce_258 = happyMonadReduce 5# 55# happyReduction_258
happyReduction_258 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut52 happy_x_2 of { happy_var_2 -> 
	case happyOut66 happy_x_4 of { happy_var_4 -> 
	( case combArrayTypes (valueType happy_var_2) $ map valueType happy_var_4 of
                  Nothing -> throwError "Invalid array value"
                  Just ts -> return $ ArrayValue (arrayFromList $ happy_var_2:happy_var_4) $ removeNames ts)}}
	) (\r -> happyReturn (happyIn64 r))

happyReduce_259 = happyReduce 4# 55# happyReduction_259
happyReduction_259 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut36 happy_x_3 of { happy_var_3 -> 
	happyIn64
		 (ArrayValue (listArray (0,-1) []) (Prim (fst happy_var_3))
	) `HappyStk` happyRest}

happyReduce_260 = happySpecReduce_3  56# happyReduction_260
happyReduction_260 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut66 happy_x_2 of { happy_var_2 -> 
	happyIn65
		 (TupValue happy_var_2
	)}

happyReduce_261 = happySpecReduce_3  57# happyReduction_261
happyReduction_261 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut52 happy_x_1 of { happy_var_1 -> 
	case happyOut66 happy_x_3 of { happy_var_3 -> 
	happyIn66
		 (happy_var_1 : happy_var_3
	)}}

happyReduce_262 = happySpecReduce_1  57# happyReduction_262
happyReduction_262 happy_x_1
	 =  case happyOut52 happy_x_1 of { happy_var_1 -> 
	happyIn66
		 ([happy_var_1]
	)}

happyReduce_263 = happySpecReduce_0  57# happyReduction_263
happyReduction_263  =  happyIn66
		 ([]
	)

happyNewToken action sts stk
	= lexer(\tk -> 
	let cont i = happyDoAction i tk action sts stk in
	case tk of {
	L _ EOF -> happyDoAction 121# tk action sts stk;
	L happy_dollar_dollar IF -> cont 1#;
	L happy_dollar_dollar THEN -> cont 2#;
	L happy_dollar_dollar ELSE -> cont 3#;
	L happy_dollar_dollar LET -> cont 4#;
	L happy_dollar_dollar LOOP -> cont 5#;
	L happy_dollar_dollar IN -> cont 6#;
	L happy_dollar_dollar DEFAULT -> cont 7#;
	L happy_dollar_dollar INT -> cont 8#;
	L happy_dollar_dollar FLOAT -> cont 9#;
	L happy_dollar_dollar I8 -> cont 10#;
	L happy_dollar_dollar I16 -> cont 11#;
	L happy_dollar_dollar I32 -> cont 12#;
	L happy_dollar_dollar I64 -> cont 13#;
	L happy_dollar_dollar U8 -> cont 14#;
	L happy_dollar_dollar U16 -> cont 15#;
	L happy_dollar_dollar U32 -> cont 16#;
	L happy_dollar_dollar U64 -> cont 17#;
	L happy_dollar_dollar BOOL -> cont 18#;
	L happy_dollar_dollar F32 -> cont 19#;
	L happy_dollar_dollar F64 -> cont 20#;
	L _ (ID _) -> cont 21#;
	L _ (SID _) -> cont 22#;
	L _ (INTLIT _) -> cont 23#;
	L _ (I8LIT _) -> cont 24#;
	L _ (I16LIT _) -> cont 25#;
	L _ (I32LIT _) -> cont 26#;
	L _ (I64LIT _) -> cont 27#;
	L _ (U8LIT _) -> cont 28#;
	L _ (U16LIT _) -> cont 29#;
	L _ (U32LIT _) -> cont 30#;
	L _ (U64LIT _) -> cont 31#;
	L _ (REALLIT _) -> cont 32#;
	L _ (F32LIT _) -> cont 33#;
	L _ (F64LIT _) -> cont 34#;
	L _ (STRINGLIT _) -> cont 35#;
	L _ (CHARLIT _) -> cont 36#;
	L happy_dollar_dollar PLUS -> cont 37#;
	L happy_dollar_dollar MINUS -> cont 38#;
	L happy_dollar_dollar TIMES -> cont 39#;
	L happy_dollar_dollar DIVIDE -> cont 40#;
	L happy_dollar_dollar MOD -> cont 41#;
	L happy_dollar_dollar QUOT -> cont 42#;
	L happy_dollar_dollar REM -> cont 43#;
	L happy_dollar_dollar EQU -> cont 44#;
	L happy_dollar_dollar EQU2 -> cont 45#;
	L happy_dollar_dollar NEQU -> cont 46#;
	L happy_dollar_dollar LTH -> cont 47#;
	L happy_dollar_dollar GTH -> cont 48#;
	L happy_dollar_dollar LEQ -> cont 49#;
	L happy_dollar_dollar GEQ -> cont 50#;
	L happy_dollar_dollar POW -> cont 51#;
	L happy_dollar_dollar SHIFTL -> cont 52#;
	L happy_dollar_dollar SHIFTR -> cont 53#;
	L happy_dollar_dollar ZSHIFTR -> cont 54#;
	L happy_dollar_dollar BOR -> cont 55#;
	L happy_dollar_dollar BAND -> cont 56#;
	L happy_dollar_dollar XOR -> cont 57#;
	L happy_dollar_dollar LPAR -> cont 58#;
	L happy_dollar_dollar RPAR -> cont 59#;
	L happy_dollar_dollar LCURLY -> cont 60#;
	L happy_dollar_dollar RCURLY -> cont 61#;
	L happy_dollar_dollar LBRACKET -> cont 62#;
	L happy_dollar_dollar RBRACKET -> cont 63#;
	L happy_dollar_dollar COMMA -> cont 64#;
	L happy_dollar_dollar UNDERSCORE -> cont 65#;
	L happy_dollar_dollar BANG -> cont 66#;
	L happy_dollar_dollar DOT -> cont 67#;
	L happy_dollar_dollar AT -> cont 68#;
	L happy_dollar_dollar FUN -> cont 69#;
	L happy_dollar_dollar ENTRY -> cont 70#;
	L happy_dollar_dollar FN -> cont 71#;
	L happy_dollar_dollar ARROW -> cont 72#;
	L happy_dollar_dollar SETTO -> cont 73#;
	L happy_dollar_dollar TYPE_ARROW -> cont 74#;
	L happy_dollar_dollar COLON -> cont 75#;
	L happy_dollar_dollar FOR -> cont 76#;
	L happy_dollar_dollar DO -> cont 77#;
	L happy_dollar_dollar WITH -> cont 78#;
	L happy_dollar_dollar IOTA -> cont 79#;
	L happy_dollar_dollar SIZE -> cont 80#;
	L happy_dollar_dollar REPLICATE -> cont 81#;
	L happy_dollar_dollar MAP -> cont 82#;
	L happy_dollar_dollar REDUCE -> cont 83#;
	L happy_dollar_dollar REDUCECOMM -> cont 84#;
	L happy_dollar_dollar RESHAPE -> cont 85#;
	L happy_dollar_dollar REARRANGE -> cont 86#;
	L happy_dollar_dollar TRANSPOSE -> cont 87#;
	L happy_dollar_dollar ROTATE -> cont 88#;
	L happy_dollar_dollar ZIPWITH -> cont 89#;
	L happy_dollar_dollar ZIP -> cont 90#;
	L happy_dollar_dollar UNZIP -> cont 91#;
	L happy_dollar_dollar UNSAFE -> cont 92#;
	L happy_dollar_dollar SCAN -> cont 93#;
	L happy_dollar_dollar SPLIT -> cont 94#;
	L happy_dollar_dollar CONCAT -> cont 95#;
	L happy_dollar_dollar FILTER -> cont 96#;
	L happy_dollar_dollar PARTITION -> cont 97#;
	L happy_dollar_dollar TRUE -> cont 98#;
	L happy_dollar_dollar FALSE -> cont 99#;
	L happy_dollar_dollar TILDE -> cont 100#;
	L happy_dollar_dollar ABS -> cont 101#;
	L happy_dollar_dollar SIGNUM -> cont 102#;
	L happy_dollar_dollar AND -> cont 103#;
	L happy_dollar_dollar OR -> cont 104#;
	L happy_dollar_dollar EMPTY -> cont 105#;
	L happy_dollar_dollar COPY -> cont 106#;
	L happy_dollar_dollar WHILE -> cont 107#;
	L happy_dollar_dollar STREAM_MAP -> cont 108#;
	L happy_dollar_dollar STREAM_MAPPER -> cont 109#;
	L happy_dollar_dollar STREAM_RED -> cont 110#;
	L happy_dollar_dollar STREAM_REDPER -> cont 111#;
	L happy_dollar_dollar STREAM_SEQ -> cont 112#;
	L happy_dollar_dollar INCLUDE -> cont 113#;
	L happy_dollar_dollar WRITE -> cont 114#;
	L happy_dollar_dollar TYPE -> cont 115#;
	L happy_dollar_dollar SIGNATURE -> cont 116#;
	L happy_dollar_dollar SIG -> cont 117#;
	L happy_dollar_dollar STRUCT -> cont 118#;
	L happy_dollar_dollar END -> cont 119#;
	L happy_dollar_dollar VAL -> cont 120#;
	_ -> happyError' tk
	})

happyError_ 121# tk = happyError' tk
happyError_ _ tk = happyError' tk

happyThen :: () => ParserMonad a -> (a -> ParserMonad b) -> ParserMonad b
happyThen = (>>=)
happyReturn :: () => a -> ParserMonad a
happyReturn = (return)
happyThen1 = happyThen
happyReturn1 :: () => a -> ParserMonad a
happyReturn1 = happyReturn
happyError' :: () => (L Token) -> ParserMonad a
happyError' tk = parseError tk

prog = happySomeParser where
  happySomeParser = happyThen (happyParse 0#) (\x -> happyReturn (happyOut9 x))

futharkType = happySomeParser where
  happySomeParser = happyThen (happyParse 1#) (\x -> happyReturn (happyOut33 x))

expression = happySomeParser where
  happySomeParser = happyThen (happyParse 2#) (\x -> happyReturn (happyOut41 x))

lambda = happySomeParser where
  happySomeParser = happyThen (happyParse 3#) (\x -> happyReturn (happyOut50 x))

anyValue = happySomeParser where
  happySomeParser = happyThen (happyParse 4#) (\x -> happyReturn (happyOut52 x))

anyValues = happySomeParser where
  happySomeParser = happyThen (happyParse 5#) (\x -> happyReturn (happyOut53 x))

happySeq = happyDontSeq


data ParserEnv = ParserEnv {
                 parserFile :: FilePath
               , parserIntType :: IntType
               , parserRealType :: FloatType
               , parserRealFun :: Double -> FloatValue
               }

newParserEnv :: FilePath -> IntType -> FloatType -> ParserEnv
newParserEnv path intType realType =
  let s = ParserEnv path intType realType Float64Value
  in modParserEnv s realType

modParserEnv :: ParserEnv -> FloatType -> ParserEnv
modParserEnv s realType =
  case realType of
    Float32 -> s {
        parserRealType = Float32,
        parserRealFun = float32RealFun
      }
    Float64 -> s {
        parserRealType = Float64,
        parserRealFun = float64RealFun
      }
  where

    float32RealFun x =
      let (m,n) = decodeFloat x
      in Float32Value $ encodeFloat m n
    float64RealFun = Float64Value

type ParserMonad a =
  ExceptT String (
    StateT ParserEnv (
       StateT [L Token] ReadLineMonad)) a

data ReadLineMonad a = Value a
                     | GetLine (T.Text -> ReadLineMonad a)

readLineFromMonad :: ReadLineMonad T.Text
readLineFromMonad = GetLine Value

instance Monad ReadLineMonad where
  return = Value
  Value x >>= f = f x
  GetLine g >>= f = GetLine $ \s -> g s >>= f

instance Functor ReadLineMonad where
  f `fmap` m = do x <- m
                  return $ f x

instance Applicative ReadLineMonad where
  (<*>) = ap

getLinesFromIO :: ReadLineMonad a -> IO a
getLinesFromIO (Value x) = return x
getLinesFromIO (GetLine f) = do
  s <- T.getLine
  getLinesFromIO $ f s

getLinesFromTexts :: [T.Text] -> ReadLineMonad a -> Either String a
getLinesFromTexts _ (Value x) = Right x
getLinesFromTexts (x : xs) (GetLine f) = getLinesFromTexts xs $ f x
getLinesFromTexts [] (GetLine _) = Left "Ran out of input"

getNoLines :: ReadLineMonad a -> Either String a
getNoLines (Value x) = Right x
getNoLines (GetLine _) = Left "Unexpected end of input"

combArrayTypes :: TypeBase Rank NoInfo Name
               -> [TypeBase Rank NoInfo Name]
               -> Maybe (TypeBase Rank NoInfo Name)
combArrayTypes t ts = foldM comb t ts
  where comb x y
          | x == y    = Just x
          | otherwise = Nothing

arrayFromList :: [a] -> Array Int a
arrayFromList l = listArray (0, length l-1) l

patternExp :: UncheckedPattern -> ParserMonad UncheckedExp
patternExp (Id ident) = return $ Var ident
patternExp (TuplePattern pats loc) = TupLit <$> (mapM patternExp pats) <*> return loc
patternExp (Wildcard _ loc) = throwError $ "Cannot have wildcard at " ++ locStr loc

zeroExpression :: SrcLoc -> UncheckedExp
zeroExpression = Literal $ PrimValue $ SignedValue $ Int32Value 0

commutativity :: LambdaBase ty vn -> Commutativity
commutativity (BinOpFun binop _ _ _ _)
  | commutative binop = Commutative
commutativity _ = Noncommutative

eof :: L Token
eof = L (SrcLoc $ Loc (Pos "" 0 0 0) (Pos "" 0 0 0)) EOF

getTokens :: ParserMonad [L Token]
getTokens = lift $ lift get

putTokens :: [L Token] -> ParserMonad ()
putTokens ts = lift $ lift $ put ts

defaultIntType :: IntType -> ParserMonad ()
defaultIntType intType = do
  s <- lift $ get
  lift $ put $ s { parserIntType = intType }

defaultRealType :: FloatType -> ParserMonad ()
defaultRealType realType = do
  s <- lift $ get
  lift $ put $ modParserEnv s realType

getFilename :: ParserMonad FilePath
getFilename = lift $ gets parserFile

getIntValue :: Int64 -> ParserMonad IntValue
getIntValue x = do
  t <- lift $ gets parserIntType
  return $ (getIntFun t) (toInteger x)

getIntFun :: IntType -> (Integer -> IntValue)
getIntFun Int8  = Int8Value . fromInteger
getIntFun Int16 = Int16Value . fromInteger
getIntFun Int32 = Int32Value . fromInteger
getIntFun Int64 = Int64Value . fromInteger

getRealValue :: Double -> ParserMonad FloatValue
getRealValue x = do f <- lift $ gets parserRealFun
                    return $ f x

intNegate :: IntValue -> IntValue
intNegate (Int8Value v) = Int8Value (-v)
intNegate (Int16Value v) = Int16Value (-v)
intNegate (Int32Value v) = Int32Value (-v)
intNegate (Int64Value v) = Int64Value (-v)

floatNegate :: FloatValue -> FloatValue
floatNegate (Float32Value v) = Float32Value (-v)
floatNegate (Float64Value v) = Float64Value (-v)

readLine :: ParserMonad T.Text
readLine = lift $ lift $ lift readLineFromMonad

lexer :: (L Token -> ParserMonad a) -> ParserMonad a
lexer cont = do
  ts <- getTokens
  case ts of
    [] -> do
      ended <- lift $ runExceptT $ cont eof
      case ended of
        Right x -> return x
        Left _ -> do
          ts' <- scanTokens <$> getFilename <*> readLine
          ts'' <- case ts' of Right x -> return x
                              Left e  -> throwError e
          case ts'' of
            [] -> cont eof
            xs -> do
              putTokens xs
              lexer cont
    (x : xs) -> do
      putTokens xs
      cont x

parseError :: L Token -> ParserMonad a
parseError (L _ EOF) = throwError "Parse error: End of file"
parseError tok       = throwError $ "Parse error at " ++ locStr (srclocOf tok)
{-# LINE 1 "templates\GenericTemplate.hs" #-}
{-# LINE 1 "templates\\GenericTemplate.hs" #-}
{-# LINE 1 "<built-in>" #-}
{-# LINE 1 "<command-line>" #-}
{-# LINE 12 "<command-line>" #-}
{-# LINE 1 "C:\\Program Files\\Haskell Platform\\7.10.3\\lib/include\\ghcversion.h" #-}

















{-# LINE 12 "<command-line>" #-}
{-# LINE 1 "templates\\GenericTemplate.hs" #-}
-- Id: GenericTemplate.hs,v 1.26 2005/01/14 14:47:22 simonmar Exp 

{-# LINE 13 "templates\\GenericTemplate.hs" #-}





-- Do not remove this comment. Required to fix CPP parsing when using GCC and a clang-compiled alex.
#if __GLASGOW_HASKELL__ > 706
#define LT(n,m) ((Happy_GHC_Exts.tagToEnum# (n Happy_GHC_Exts.<# m)) :: Bool)
#define GTE(n,m) ((Happy_GHC_Exts.tagToEnum# (n Happy_GHC_Exts.>=# m)) :: Bool)
#define EQ(n,m) ((Happy_GHC_Exts.tagToEnum# (n Happy_GHC_Exts.==# m)) :: Bool)
#else
#define LT(n,m) (n Happy_GHC_Exts.<# m)
#define GTE(n,m) (n Happy_GHC_Exts.>=# m)
#define EQ(n,m) (n Happy_GHC_Exts.==# m)
#endif
{-# LINE 46 "templates\\GenericTemplate.hs" #-}


data Happy_IntList = HappyCons Happy_GHC_Exts.Int# Happy_IntList





{-# LINE 67 "templates\\GenericTemplate.hs" #-}

{-# LINE 77 "templates\\GenericTemplate.hs" #-}

{-# LINE 86 "templates\\GenericTemplate.hs" #-}

infixr 9 `HappyStk`
data HappyStk a = HappyStk a (HappyStk a)

-----------------------------------------------------------------------------
-- starting the parse

happyParse start_state = happyNewToken start_state notHappyAtAll notHappyAtAll

-----------------------------------------------------------------------------
-- Accepting the parse

-- If the current token is 0#, it means we've just accepted a partial
-- parse (a %partial parser).  We must ignore the saved token on the top of
-- the stack in this case.
happyAccept 0# tk st sts (_ `HappyStk` ans `HappyStk` _) =
        happyReturn1 ans
happyAccept j tk st sts (HappyStk ans _) = 
        (happyTcHack j (happyTcHack st)) (happyReturn1 ans)

-----------------------------------------------------------------------------
-- Arrays only: do the next action



happyDoAction i tk st
        = {- nothing -}


          case action of
                0#           -> {- nothing -}
                                     happyFail i tk st
                -1#          -> {- nothing -}
                                     happyAccept i tk st
                n | LT(n,(0# :: Happy_GHC_Exts.Int#)) -> {- nothing -}

                                                   (happyReduceArr Happy_Data_Array.! rule) i tk st
                                                   where rule = (Happy_GHC_Exts.I# ((Happy_GHC_Exts.negateInt# ((n Happy_GHC_Exts.+# (1# :: Happy_GHC_Exts.Int#))))))
                n                 -> {- nothing -}


                                     happyShift new_state i tk st
                                     where new_state = (n Happy_GHC_Exts.-# (1# :: Happy_GHC_Exts.Int#))
   where off    = indexShortOffAddr happyActOffsets st
         off_i  = (off Happy_GHC_Exts.+# i)
         check  = if GTE(off_i,(0# :: Happy_GHC_Exts.Int#))
                  then EQ(indexShortOffAddr happyCheck off_i, i)
                  else False
         action
          | check     = indexShortOffAddr happyTable off_i
          | otherwise = indexShortOffAddr happyDefActions st


indexShortOffAddr (HappyA# arr) off =
        Happy_GHC_Exts.narrow16Int# i
  where
        i = Happy_GHC_Exts.word2Int# (Happy_GHC_Exts.or# (Happy_GHC_Exts.uncheckedShiftL# high 8#) low)
        high = Happy_GHC_Exts.int2Word# (Happy_GHC_Exts.ord# (Happy_GHC_Exts.indexCharOffAddr# arr (off' Happy_GHC_Exts.+# 1#)))
        low  = Happy_GHC_Exts.int2Word# (Happy_GHC_Exts.ord# (Happy_GHC_Exts.indexCharOffAddr# arr off'))
        off' = off Happy_GHC_Exts.*# 2#





data HappyAddr = HappyA# Happy_GHC_Exts.Addr#




-----------------------------------------------------------------------------
-- HappyState data type (not arrays)

{-# LINE 170 "templates\\GenericTemplate.hs" #-}

-----------------------------------------------------------------------------
-- Shifting a token

happyShift new_state 0# tk st sts stk@(x `HappyStk` _) =
     let i = (case Happy_GHC_Exts.unsafeCoerce# x of { (Happy_GHC_Exts.I# (i)) -> i }) in
--     trace "shifting the error token" $
     happyDoAction i tk new_state (HappyCons (st) (sts)) (stk)

happyShift new_state i tk st sts stk =
     happyNewToken new_state (HappyCons (st) (sts)) ((happyInTok (tk))`HappyStk`stk)

-- happyReduce is specialised for the common cases.

happySpecReduce_0 i fn 0# tk st sts stk
     = happyFail 0# tk st sts stk
happySpecReduce_0 nt fn j tk st@((action)) sts stk
     = happyGoto nt j tk st (HappyCons (st) (sts)) (fn `HappyStk` stk)

happySpecReduce_1 i fn 0# tk st sts stk
     = happyFail 0# tk st sts stk
happySpecReduce_1 nt fn j tk _ sts@((HappyCons (st@(action)) (_))) (v1`HappyStk`stk')
     = let r = fn v1 in
       happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))

happySpecReduce_2 i fn 0# tk st sts stk
     = happyFail 0# tk st sts stk
happySpecReduce_2 nt fn j tk _ (HappyCons (_) (sts@((HappyCons (st@(action)) (_))))) (v1`HappyStk`v2`HappyStk`stk')
     = let r = fn v1 v2 in
       happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))

happySpecReduce_3 i fn 0# tk st sts stk
     = happyFail 0# tk st sts stk
happySpecReduce_3 nt fn j tk _ (HappyCons (_) ((HappyCons (_) (sts@((HappyCons (st@(action)) (_))))))) (v1`HappyStk`v2`HappyStk`v3`HappyStk`stk')
     = let r = fn v1 v2 v3 in
       happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))

happyReduce k i fn 0# tk st sts stk
     = happyFail 0# tk st sts stk
happyReduce k nt fn j tk st sts stk
     = case happyDrop (k Happy_GHC_Exts.-# (1# :: Happy_GHC_Exts.Int#)) sts of
         sts1@((HappyCons (st1@(action)) (_))) ->
                let r = fn stk in  -- it doesn't hurt to always seq here...
                happyDoSeq r (happyGoto nt j tk st1 sts1 r)

happyMonadReduce k nt fn 0# tk st sts stk
     = happyFail 0# tk st sts stk
happyMonadReduce k nt fn j tk st sts stk =
      case happyDrop k (HappyCons (st) (sts)) of
        sts1@((HappyCons (st1@(action)) (_))) ->
          let drop_stk = happyDropStk k stk in
          happyThen1 (fn stk tk) (\r -> happyGoto nt j tk st1 sts1 (r `HappyStk` drop_stk))

happyMonad2Reduce k nt fn 0# tk st sts stk
     = happyFail 0# tk st sts stk
happyMonad2Reduce k nt fn j tk st sts stk =
      case happyDrop k (HappyCons (st) (sts)) of
        sts1@((HappyCons (st1@(action)) (_))) ->
         let drop_stk = happyDropStk k stk

             off = indexShortOffAddr happyGotoOffsets st1
             off_i = (off Happy_GHC_Exts.+# nt)
             new_state = indexShortOffAddr happyTable off_i



          in
          happyThen1 (fn stk tk) (\r -> happyNewToken new_state sts1 (r `HappyStk` drop_stk))

happyDrop 0# l = l
happyDrop n (HappyCons (_) (t)) = happyDrop (n Happy_GHC_Exts.-# (1# :: Happy_GHC_Exts.Int#)) t

happyDropStk 0# l = l
happyDropStk n (x `HappyStk` xs) = happyDropStk (n Happy_GHC_Exts.-# (1#::Happy_GHC_Exts.Int#)) xs

-----------------------------------------------------------------------------
-- Moving to a new state after a reduction


happyGoto nt j tk st = 
   {- nothing -}
   happyDoAction j tk new_state
   where off = indexShortOffAddr happyGotoOffsets st
         off_i = (off Happy_GHC_Exts.+# nt)
         new_state = indexShortOffAddr happyTable off_i




-----------------------------------------------------------------------------
-- Error recovery (0# is the error token)

-- parse error if we are in recovery and we fail again
happyFail 0# tk old_st _ stk@(x `HappyStk` _) =
     let i = (case Happy_GHC_Exts.unsafeCoerce# x of { (Happy_GHC_Exts.I# (i)) -> i }) in
--      trace "failing" $ 
        happyError_ i tk

{-  We don't need state discarding for our restricted implementation of
    "error".  In fact, it can cause some bogus parses, so I've disabled it
    for now --SDM

-- discard a state
happyFail  0# tk old_st (HappyCons ((action)) (sts)) 
                                                (saved_tok `HappyStk` _ `HappyStk` stk) =
--      trace ("discarding state, depth " ++ show (length stk))  $
        happyDoAction 0# tk action sts ((saved_tok`HappyStk`stk))
-}

-- Enter error recovery: generate an error token,
--                       save the old token and carry on.
happyFail  i tk (action) sts stk =
--      trace "entering error recovery" $
        happyDoAction 0# tk action sts ( (Happy_GHC_Exts.unsafeCoerce# (Happy_GHC_Exts.I# (i))) `HappyStk` stk)

-- Internal happy errors:

notHappyAtAll :: a
notHappyAtAll = error "Internal Happy error\n"

-----------------------------------------------------------------------------
-- Hack to get the typechecker to accept our action functions


happyTcHack :: Happy_GHC_Exts.Int# -> a -> a
happyTcHack x y = y
{-# INLINE happyTcHack #-}


-----------------------------------------------------------------------------
-- Seq-ing.  If the --strict flag is given, then Happy emits 
--      happySeq = happyDoSeq
-- otherwise it emits
--      happySeq = happyDontSeq

happyDoSeq, happyDontSeq :: a -> b -> b
happyDoSeq   a b = a `seq` b
happyDontSeq a b = b

-----------------------------------------------------------------------------
-- Don't inline any functions from the template.  GHC has a nasty habit
-- of deciding to inline happyGoto everywhere, which increases the size of
-- the generated parser quite a bit.


{-# NOINLINE happyDoAction #-}
{-# NOINLINE happyTable #-}
{-# NOINLINE happyCheck #-}
{-# NOINLINE happyActOffsets #-}
{-# NOINLINE happyGotoOffsets #-}
{-# NOINLINE happyDefActions #-}

{-# NOINLINE happyShift #-}
{-# NOINLINE happySpecReduce_0 #-}
{-# NOINLINE happySpecReduce_1 #-}
{-# NOINLINE happySpecReduce_2 #-}
{-# NOINLINE happySpecReduce_3 #-}
{-# NOINLINE happyReduce #-}
{-# NOINLINE happyMonadReduce #-}
{-# NOINLINE happyGoto #-}
{-# NOINLINE happyFail #-}

-- end of Happy Template.


==================== FINAL INTERFACE ====================
2016-08-04 10:11:17.0225073 UTC

interface futha_GJqcXjzuDAgKwUW9oTf4td:Language.Futhark.Syntax 7103
  interface hash: e0e7d8ae3ad288c17cd7e0a2786f295b
  ABI hash: 9c46ca7a7ca6ac482268adadc8b8aab8
  export-list hash: 2ed8a56670416081f2c686728d38039e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f5424bc558f7091b537d375212749942
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.Futhark.Core.baseName
  Language.Futhark.Core.baseString
  Language.Futhark.Core.baseTag
  Language.Futhark.Core.blankLongname
  Language.Futhark.Core.defaultEntryPoint
  Language.Futhark.Core.locStr
  Language.Futhark.Core.longnameToName
  Language.Futhark.Core.longnameToString
  Language.Futhark.Core.nameFromString
  Language.Futhark.Core.nameFromText
  Language.Futhark.Core.nameToString
  Language.Futhark.Core.nameToText
  Language.Futhark.Core.textual
  GHC.Int.Int16
  GHC.Int.Int32
  GHC.Int.Int64
  GHC.Int.Int8
  Futhark.Representation.Primitive.FloatType{Futhark.Representation.Primitive.Float32 Futhark.Representation.Primitive.Float64}
  Futhark.Representation.Primitive.FloatValue{Futhark.Representation.Primitive.Float32Value Futhark.Representation.Primitive.Float64Value}
  Futhark.Representation.Primitive.IntType{Futhark.Representation.Primitive.Int16 Futhark.Representation.Primitive.Int32 Futhark.Representation.Primitive.Int64 Futhark.Representation.Primitive.Int8}
  Futhark.Representation.Primitive.IntValue{Futhark.Representation.Primitive.Int16Value Futhark.Representation.Primitive.Int32Value Futhark.Representation.Primitive.Int64Value Futhark.Representation.Primitive.Int8Value}
  Language.Futhark.Core.Commutativity{Language.Futhark.Core.Commutative Language.Futhark.Core.Noncommutative}
  Language.Futhark.Core.ID{Language.Futhark.Core.ID}
  Language.Futhark.Core.Name
  Language.Futhark.Core.QualName
  Language.Futhark.Core.StreamOrd{Language.Futhark.Core.Disorder Language.Futhark.Core.InOrder}
  Language.Futhark.Core.Uniqueness{Language.Futhark.Core.Nonunique Language.Futhark.Core.Unique}
  Language.Futhark.Core.VName
  Language.Futhark.Syntax.ArrayShape{Language.Futhark.Syntax.shapeRank Language.Futhark.Syntax.stripDims}
  Language.Futhark.Syntax.ArrayTypeBase{Language.Futhark.Syntax.PrimArray Language.Futhark.Syntax.TupleArray}
  Language.Futhark.Syntax.BinOp{Language.Futhark.Syntax.Band Language.Futhark.Syntax.Bor Language.Futhark.Syntax.Divide Language.Futhark.Syntax.Equal Language.Futhark.Syntax.Geq Language.Futhark.Syntax.Greater Language.Futhark.Syntax.Leq Language.Futhark.Syntax.Less Language.Futhark.Syntax.LogAnd Language.Futhark.Syntax.LogOr Language.Futhark.Syntax.Minus Language.Futhark.Syntax.Mod Language.Futhark.Syntax.NotEqual Language.Futhark.Syntax.Plus Language.Futhark.Syntax.Pow Language.Futhark.Syntax.Quot Language.Futhark.Syntax.Rem Language.Futhark.Syntax.ShiftL Language.Futhark.Syntax.ShiftR Language.Futhark.Syntax.Times Language.Futhark.Syntax.Xor Language.Futhark.Syntax.ZShiftR}
  Language.Futhark.Syntax.CompTypeBase
  Language.Futhark.Syntax.DecBase{Language.Futhark.Syntax.FunOrTypeDec Language.Futhark.Syntax.ModDec Language.Futhark.Syntax.SigDec}
  Language.Futhark.Syntax.DeclArrayTypeBase
  Language.Futhark.Syntax.DeclTupleArrayElemTypeBase
  Language.Futhark.Syntax.Diet{Language.Futhark.Syntax.Consume Language.Futhark.Syntax.Observe Language.Futhark.Syntax.TupleDiet}
  Language.Futhark.Syntax.DimDecl{Language.Futhark.Syntax.AnyDim Language.Futhark.Syntax.ConstDim Language.Futhark.Syntax.NamedDim}
  Language.Futhark.Syntax.ExpBase{Language.Futhark.Syntax.Apply Language.Futhark.Syntax.ArrayLit Language.Futhark.Syntax.BinOp Language.Futhark.Syntax.Concat Language.Futhark.Syntax.Copy Language.Futhark.Syntax.DoLoop Language.Futhark.Syntax.Empty Language.Futhark.Syntax.Filter Language.Futhark.Syntax.If Language.Futhark.Syntax.Index Language.Futhark.Syntax.Iota Language.Futhark.Syntax.LetPat Language.Futhark.Syntax.LetWith Language.Futhark.Syntax.Literal Language.Futhark.Syntax.Map Language.Futhark.Syntax.Partition Language.Futhark.Syntax.Rearrange Language.Futhark.Syntax.Reduce Language.Futhark.Syntax.Replicate Language.Futhark.Syntax.Reshape Language.Futhark.Syntax.Rotate Language.Futhark.Syntax.Scan Language.Futhark.Syntax.Size Language.Futhark.Syntax.Split Language.Futhark.Syntax.Stream Language.Futhark.Syntax.Transpose Language.Futhark.Syntax.TupLit Language.Futhark.Syntax.TupleIndex Language.Futhark.Syntax.UnOp Language.Futhark.Syntax.Unsafe Language.Futhark.Syntax.Unzip Language.Futhark.Syntax.Var Language.Futhark.Syntax.Write Language.Futhark.Syntax.Zip}
  Language.Futhark.Syntax.ForLoopDirection{Language.Futhark.Syntax.FromDownTo Language.Futhark.Syntax.FromUpTo}
  Language.Futhark.Syntax.FunDefBase{Language.Futhark.Syntax.FunDef Language.Futhark.Syntax.funDefBody Language.Futhark.Syntax.funDefEntryPoint Language.Futhark.Syntax.funDefLocation Language.Futhark.Syntax.funDefName Language.Futhark.Syntax.funDefParams Language.Futhark.Syntax.funDefRetType}
  Language.Futhark.Syntax.FunOrTypeDecBase{Language.Futhark.Syntax.FunDec Language.Futhark.Syntax.TypeDec}
  Language.Futhark.Syntax.IdentBase{Language.Futhark.Syntax.Ident Language.Futhark.Syntax.identName Language.Futhark.Syntax.identSrcLoc Language.Futhark.Syntax.identType}
  Language.Futhark.Syntax.Info{Language.Futhark.Syntax.Info Language.Futhark.Syntax.unInfo}
  Language.Futhark.Syntax.LambdaBase{Language.Futhark.Syntax.AnonymFun Language.Futhark.Syntax.BinOpFun Language.Futhark.Syntax.CurryBinOpLeft Language.Futhark.Syntax.CurryBinOpRight Language.Futhark.Syntax.CurryFun Language.Futhark.Syntax.UnOpFun}
  Language.Futhark.Syntax.LoopFormBase{Language.Futhark.Syntax.For Language.Futhark.Syntax.While}
  Language.Futhark.Syntax.ModDefBase{Language.Futhark.Syntax.ModDef Language.Futhark.Syntax.modDecls Language.Futhark.Syntax.modDefLocation Language.Futhark.Syntax.modName}
  Language.Futhark.Syntax.Names
  Language.Futhark.Syntax.NoInfo{Language.Futhark.Syntax.NoInfo}
  Language.Futhark.Syntax.ParamBase{Language.Futhark.Syntax.Param Language.Futhark.Syntax.paramName Language.Futhark.Syntax.paramSrcLoc Language.Futhark.Syntax.paramTypeDecl}
  Language.Futhark.Syntax.PatternBase{Language.Futhark.Syntax.Id Language.Futhark.Syntax.TuplePattern Language.Futhark.Syntax.Wildcard}
  Language.Futhark.Syntax.PrimType{Language.Futhark.Syntax.Bool Language.Futhark.Syntax.FloatType Language.Futhark.Syntax.Signed Language.Futhark.Syntax.Unsigned}
  Language.Futhark.Syntax.PrimValue{Language.Futhark.Syntax.BoolValue Language.Futhark.Syntax.FloatValue Language.Futhark.Syntax.SignedValue Language.Futhark.Syntax.UnsignedValue}
  Language.Futhark.Syntax.ProgBase{Language.Futhark.Syntax.Prog Language.Futhark.Syntax.progDecs}
  Language.Futhark.Syntax.ProgBaseWithHeaders{Language.Futhark.Syntax.ProgWithHeaders Language.Futhark.Syntax.progWHDecs Language.Futhark.Syntax.progWHHeaders}
  Language.Futhark.Syntax.ProgHeader{Language.Futhark.Syntax.Include}
  Language.Futhark.Syntax.Rank{Language.Futhark.Syntax.Rank}
  Language.Futhark.Syntax.ShapeDecl{Language.Futhark.Syntax.ShapeDecl Language.Futhark.Syntax.shapeDims}
  Language.Futhark.Syntax.SigDeclBase{Language.Futhark.Syntax.FunSig Language.Futhark.Syntax.TypeSig Language.Futhark.Syntax.funSigName Language.Futhark.Syntax.funSigParams Language.Futhark.Syntax.funSigRettype}
  Language.Futhark.Syntax.SigDefBase{Language.Futhark.Syntax.SigDef Language.Futhark.Syntax.sigDecls Language.Futhark.Syntax.sigDefLocation Language.Futhark.Syntax.sigName}
  Language.Futhark.Syntax.StreamForm{Language.Futhark.Syntax.MapLike Language.Futhark.Syntax.RedLike Language.Futhark.Syntax.Sequential}
  Language.Futhark.Syntax.StructTypeBase
  Language.Futhark.Syntax.TupleArrayElemTypeBase{Language.Futhark.Syntax.ArrayArrayElem Language.Futhark.Syntax.PrimArrayElem Language.Futhark.Syntax.TupleArrayElem}
  Language.Futhark.Syntax.TypeBase{Language.Futhark.Syntax.Array Language.Futhark.Syntax.Prim Language.Futhark.Syntax.Tuple}
  Language.Futhark.Syntax.TypeDeclBase{Language.Futhark.Syntax.TypeDecl Language.Futhark.Syntax.declaredType Language.Futhark.Syntax.expandedType}
  Language.Futhark.Syntax.TypeDefBase{Language.Futhark.Syntax.TypeDef Language.Futhark.Syntax.typeAlias Language.Futhark.Syntax.typeDefLocation Language.Futhark.Syntax.userType}
  Language.Futhark.Syntax.UnOp{Language.Futhark.Syntax.Abs Language.Futhark.Syntax.Complement Language.Futhark.Syntax.Negate Language.Futhark.Syntax.Not Language.Futhark.Syntax.Signum Language.Futhark.Syntax.ToFloat Language.Futhark.Syntax.ToSigned Language.Futhark.Syntax.ToUnsigned}
  Language.Futhark.Syntax.UserType{Language.Futhark.Syntax.UserArray Language.Futhark.Syntax.UserPrim Language.Futhark.Syntax.UserTuple Language.Futhark.Syntax.UserTypeAlias Language.Futhark.Syntax.UserUnique}
  Language.Futhark.Syntax.Value{Language.Futhark.Syntax.ArrayValue Language.Futhark.Syntax.PrimValue Language.Futhark.Syntax.TupValue}
module dependencies: Futhark.Representation.Primitive
                     Futhark.Util.Pretty Language.Futhark.Core
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0 binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I integer-gmp-1.0.0.0
                      mainland-pretty-0.4.1.4@mainl_KnIUy4mTEecCOphhB8nGQj
                      srcloc-0.5.1.0@srclo_IrVSavrho0x78ZSJU92mrC
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      unordered-containers-0.2.7.0@unord_2BLx4faR35mFWLJj5xiBgm
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.7.0@unord_2BLx4faR35mFWLJj5xiBgm:Data.HashMap.Base
                         unordered-containers-0.2.7.0@unord_2BLx4faR35mFWLJj5xiBgm:Data.HashSet
import  -/  array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA:Data.Array 6e22602c1cc5e362609f0924a7c0a209
import  -/  base-4.8.2.0:Control.Applicative a8ebf5ad4932b411ad7725da68be9801
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.2.0:Data.Monoid 85b292b52bfd80ed619cddb767d638d3
import  -/  base-4.8.2.0:Data.Traversable 7576318f4ef8587ad947f87012b65abf
import  -/  base-4.8.2.0:GHC.Arr 70f35e6bfbc61995e045edb612354887
import  -/  base-4.8.2.0:GHC.Base a4939789b2cfd60b36ed163e56a623cd
import  -/  base-4.8.2.0:GHC.Enum debc6de3086023a15993ab0cecffb90b
import  -/  base-4.8.2.0:GHC.Int 28d8a9f7cfc272358fb4631d98c579ce
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  Futhark.Representation.Primitive ad708969d75463632f432066d13a8ed9
  exports: 47297e81fec7a346ffe94b187eb5d0ed
  Float32 2176f503996eb953a27fbeaac32b5c16
  Float32Value a74dfc7ccc8fbe9ecec532f7690b32b6
  Float64 bfbc07c1c559fc0775d129150a9021ec
  Float64Value 4da7df06719f12f4c06c9834acb520e5
  FloatType 306ea34947128e48fabb2e3ff22f5fb7
  FloatValue 70b046f18760096ae622b1ade242ee60
  Int16 9ceab2fd09cc166fa82dd8dd9e5e4963
  Int16Value 2427a2e2a3f09df7983a467cf6ff0f0b
  Int32 c8bb888c9065bd0de2acd136a34310f8
  Int32Value 1cc8921a6207b6e44e5c479f4828afb3
  Int64 d3f88b427a9b6bda51aaa9a883182864
  Int64Value 5d3cc4c46bc2e78972c4b08cd15964f3
  Int8 85b781b001e8fa5a5e965bccbddcbd1b
  Int8Value 0b32dcca6fd757147c28b19ac468f53e
  IntType 41164198bc42f58dac94bb14a13a0e54
  IntValue a1ae23b5d330aae7ec0f83454a1112b3
import  -/  Language.Futhark.Core 4d8fcc01b4c0611c71fec8b2caa41d68
  exports: 944381a39a11da48ff24531dca3a35c8
  Commutative c6b12bb52e66cf65e5cf4ef29fddf1d5
  Commutativity 038ade5ac0a2f2cf5928a9b55ca6cf46
  Disorder c41c91d321ffe685afee2aeaf437918e
  ID 64032e7feaaf499eb200a65f8e6dea1b
  ID 9bb77724207d7fa386e0d72cd6bf6109
  InOrder 8ab9e0493cd8586bb5d1f03ded55ffaf
  Name 6f31ab23d447a5092c4e7208963f26d4
  Noncommutative decdf2f4a8d4c22fc0905851b9bfd322
  Nonunique eae378832b3b070431ffe9fc1895641f
  QualName 547b1c7190e0b3c04378e512a39bd687
  StreamOrd f0a4ce9da1f8307d5cf53709dbbb2cb1
  Unique 3fad80de32194c1e96604afb5cd6ed8b
  Uniqueness 1ee4326daed7f9d740b94f689a248cad
  VName d2183f464cdb8952855d3542065e5d13
  baseName c5c38105ecee71bc5d355e92406545c9
  baseString 38ea1d533bef47d6dec88cba84d9cc35
  baseTag 6fedf6c6b20e89d240d2981221b91509
  blankLongname 3cff18b621d697a716ef86fcbb7b1bee
  defaultEntryPoint 6a5d599ae6f50eb2d405c412c148c0a4
  locStr 3282b7e901c995265c7619bd70ef3231
  longnameToName 014ac8855e44b77d8127429008ab7cd7
  longnameToString 8cf091eeba40fec4525deaa85144f236
  nameFromString 1071edbb390f28a0ddf396f3a2b03035
  nameFromText 2ca3b8f1a88b7067f79cfb73bd6e71ec
  nameToString e6a22ac03c9fc9e9d097c620e5cda5d8
  nameToText d0b380151725dffc0ef8f2a02535f3ca
  textual 3f977fdf80173c66b98797ae50bacafa
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable cd89f02614e821fc8b0b3d7bd7501891
import  -/  hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Class 15f774badf396c367b54dbfebb40dc74
import  -/  srcloc-0.5.1.0@srclo_IrVSavrho0x78ZSJU92mrC:Data.Loc f4b2b54fab2c8be1b1da75545acb27c8
import  -/  unordered-containers-0.2.7.0@unord_2BLx4faR35mFWLJj5xiBgm:Data.HashSet 8d6c31d16429f694b6bcb52291c6404c
851f9142d8405bbec3911569df2c64ef
  $fArrayShapeRank ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn),
     GHC.Classes.Ord (Language.Futhark.Syntax.Rank vn),
     GHC.Base.Monoid (Language.Futhark.Syntax.Rank vn)) =>
    Language.Futhark.Syntax.ArrayShape
      (Language.Futhark.Syntax.Rank vn)
  DFunId[3]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ vn
                      $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn)
                      $dOrd :: GHC.Classes.Ord (Language.Futhark.Syntax.Rank vn)
                      $dMonoid :: GHC.Base.Monoid (Language.Futhark.Syntax.Rank vn).
                  @ (Language.Futhark.Syntax.Rank vn)
                  $dEq
                  $dOrd
                  $dMonoid
                  (Language.Futhark.Syntax.$fArrayShapeRank_$cshapeRank
                     @ vn
                     $dEq
                     $dOrd
                     $dMonoid)
                  (Language.Futhark.Syntax.$fArrayShapeRank_$cstripDims
                     @ vn
                     $dEq
                     $dOrd
                     $dMonoid) -}
f4aa897ac0030cd24c07cc456fc83038
  $fArrayShapeRank1 ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn),
     GHC.Classes.Ord (Language.Futhark.Syntax.Rank vn),
     GHC.Base.Monoid (Language.Futhark.Syntax.Rank vn)) =>
    Language.Futhark.Syntax.Rank vn -> Language.Futhark.Syntax.Rank vn
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,A><S,1*U(U)>m,
     Unfolding: InlineRule (4, True, True)
                (\ @ vn
                   $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn)
                   $dOrd :: GHC.Classes.Ord (Language.Futhark.Syntax.Rank vn)
                   $dMonoid :: GHC.Base.Monoid (Language.Futhark.Syntax.Rank vn)
                   ds :: Language.Futhark.Syntax.Rank vn ->
                 ds) -}
2633de0db9448bf62bed533ca8b1ac12
  $fArrayShapeRank_$cshapeRank ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn),
     GHC.Classes.Ord (Language.Futhark.Syntax.Rank vn),
     GHC.Base.Monoid (Language.Futhark.Syntax.Rank vn)) =>
    Language.Futhark.Syntax.Rank vn -> GHC.Types.Int
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,A><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fArrayShapeRank1
                  `cast`
                (forall vn.
                 <GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn)>_R
                 ->_R <GHC.Classes.Ord (Language.Futhark.Syntax.Rank vn)>_R
                 ->_R <GHC.Base.Monoid (Language.Futhark.Syntax.Rank vn)>_R
                 ->_R <Language.Futhark.Syntax.Rank vn>_R
                 ->_R Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P) -}
bf90a8cb5d7c74e95700bf87405d9886
  $fArrayShapeRank_$cstripDims ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn),
     GHC.Classes.Ord (Language.Futhark.Syntax.Rank vn),
     GHC.Base.Monoid (Language.Futhark.Syntax.Rank vn)) =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.Rank vn
    -> GHC.Base.Maybe (Language.Futhark.Syntax.Rank vn)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (5, True, False)
                (\ @ vn
                   $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn)
                   $dOrd :: GHC.Classes.Ord (Language.Futhark.Syntax.Rank vn)
                   $dMonoid :: GHC.Base.Monoid (Language.Futhark.Syntax.Rank vn)
                   i :: GHC.Types.Int
                   ds :: Language.Futhark.Syntax.Rank vn ->
                 case i of wild { GHC.Types.I# x ->
                 case ds
                        `cast`
                      (Language.Futhark.Syntax.NTCo:Rank[0]
                           <vn>_P) of wild1 { GHC.Types.I# y ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# x y) of wild2 {
                   GHC.Types.False
                   -> GHC.Base.Nothing @ (Language.Futhark.Syntax.Rank vn)
                   GHC.Types.True
                   -> GHC.Base.Just
                        @ (Language.Futhark.Syntax.Rank vn)
                        (GHC.Types.I# (GHC.Prim.-# y x))
                          `cast`
                        (Sym (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)) } } }) -}
851f9142d8405bbec3911569df2c64ef
  $fArrayShapeShapeDecl ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.ShapeDecl vn),
     GHC.Classes.Ord (Language.Futhark.Syntax.ShapeDecl vn),
     GHC.Base.Monoid (Language.Futhark.Syntax.ShapeDecl vn),
     GHC.Classes.Eq vn, GHC.Classes.Ord vn) =>
    Language.Futhark.Syntax.ArrayShape
      (Language.Futhark.Syntax.ShapeDecl vn)
  DFunId[3]
  {- Arity: 5, HasNoCafRefs, Strictness: <L,U><L,U><L,U><L,A><L,A>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ vn
                      $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.ShapeDecl vn)
                      $dOrd :: GHC.Classes.Ord (Language.Futhark.Syntax.ShapeDecl vn)
                      $dMonoid :: GHC.Base.Monoid (Language.Futhark.Syntax.ShapeDecl vn)
                      $dEq1 :: GHC.Classes.Eq vn
                      $dOrd1 :: GHC.Classes.Ord vn.
                  @ (Language.Futhark.Syntax.ShapeDecl vn)
                  $dEq
                  $dOrd
                  $dMonoid
                  (Language.Futhark.Syntax.$fArrayShapeShapeDecl_$cshapeRank
                     @ vn
                     $dEq
                     $dOrd
                     $dMonoid
                     $dEq1
                     $dOrd1)
                  (Language.Futhark.Syntax.$fArrayShapeShapeDecl_$cstripDims
                     @ vn
                     $dEq
                     $dOrd
                     $dMonoid
                     $dEq1
                     $dOrd1) -}
468efd3c2cdec5ced893e616835a0ae3
  $fArrayShapeShapeDecl_$cshapeRank ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.ShapeDecl vn),
     GHC.Classes.Ord (Language.Futhark.Syntax.ShapeDecl vn),
     GHC.Base.Monoid (Language.Futhark.Syntax.ShapeDecl vn),
     GHC.Classes.Eq vn, GHC.Classes.Ord vn) =>
    Language.Futhark.Syntax.ShapeDecl vn -> GHC.Types.Int
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,A><L,A><S,1*U>m,
     Unfolding: InlineRule (6, True, False)
                (\ @ vn
                   $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.ShapeDecl vn)
                   $dOrd :: GHC.Classes.Ord (Language.Futhark.Syntax.ShapeDecl vn)
                   $dMonoid :: GHC.Base.Monoid (Language.Futhark.Syntax.ShapeDecl vn)
                   $dEq1 :: GHC.Classes.Eq vn
                   $dOrd1 :: GHC.Classes.Ord vn
                   ds :: Language.Futhark.Syntax.ShapeDecl vn ->
                 case GHC.List.$wlenAcc
                        @ (Language.Futhark.Syntax.DimDecl vn)
                        ds `cast` (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R)
                        0 of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 }) -}
404f3ab1215702d198d8c545260fe0cf
  $fArrayShapeShapeDecl_$cstripDims ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.ShapeDecl vn),
     GHC.Classes.Ord (Language.Futhark.Syntax.ShapeDecl vn),
     GHC.Base.Monoid (Language.Futhark.Syntax.ShapeDecl vn),
     GHC.Classes.Eq vn, GHC.Classes.Ord vn) =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.ShapeDecl vn
    -> GHC.Base.Maybe (Language.Futhark.Syntax.ShapeDecl vn)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,A><L,A><S,1*U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ @ vn
                   w :: GHC.Classes.Eq (Language.Futhark.Syntax.ShapeDecl vn)
                   w1 :: GHC.Classes.Ord (Language.Futhark.Syntax.ShapeDecl vn)
                   w2 :: GHC.Base.Monoid (Language.Futhark.Syntax.ShapeDecl vn)
                   w3 :: GHC.Classes.Eq vn
                   w4 :: GHC.Classes.Ord vn
                   w5 :: GHC.Types.Int
                   w6 :: Language.Futhark.Syntax.ShapeDecl vn ->
                 case w5 of ww { GHC.Types.I# ww1 ->
                 Language.Futhark.Syntax.$w$cstripDims @ vn ww1 w6 }) -}
d07c5b7b353387a89237c9062561c998
  $fBoundedBinOp :: GHC.Enum.Bounded Language.Futhark.Syntax.BinOp
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.BinOp
                  Language.Futhark.Syntax.Plus
                  Language.Futhark.Syntax.Geq -}
d07c5b7b353387a89237c9062561c998
  $fEnumBinOp :: GHC.Enum.Enum Language.Futhark.Syntax.BinOp
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.BinOp
                  Language.Futhark.Syntax.$fEnumBinOp_$csucc
                  Language.Futhark.Syntax.$fEnumBinOp_$cpred
                  Language.Futhark.Syntax.$fEnumBinOp_$ctoEnum
                  Language.Futhark.Syntax.$fEnumBinOp_$cfromEnum
                  Language.Futhark.Syntax.$fEnumBinOp_$cenumFrom
                  Language.Futhark.Syntax.$fEnumBinOp_$cenumFromThen
                  Language.Futhark.Syntax.$fEnumBinOp_$cenumFromTo
                  Language.Futhark.Syntax.$fEnumBinOp_$cenumFromThenTo -}
d07c5b7b353387a89237c9062561c998
  $fEnumBinOp1 :: GHC.Prim.Int# -> Language.Futhark.Syntax.BinOp
  {- Arity: 1, Strictness: <L,U>b -}
d07c5b7b353387a89237c9062561c998
  $fEnumBinOp2 :: Language.Futhark.Syntax.BinOp
  {- Strictness: b -}
d07c5b7b353387a89237c9062561c998
  $fEnumBinOp3 :: Language.Futhark.Syntax.BinOp
  {- Strictness: b -}
d07c5b7b353387a89237c9062561c998
  $fEnumBinOp_$cenumFrom ::
    Language.Futhark.Syntax.BinOp -> [Language.Futhark.Syntax.BinOp]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ a5 :: Language.Futhark.Syntax.BinOp ->
                 case a5 of x1 { DEFAULT ->
                 let {
                   x0 :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># x0 21) of wild {
                   GHC.Types.False -> Language.Futhark.Syntax.$fEnumBinOp_go x0
                   GHC.Types.True
                   -> GHC.Types.[] @ Language.Futhark.Syntax.BinOp } }) -}
d07c5b7b353387a89237c9062561c998
  $fEnumBinOp_$cenumFromThen ::
    Language.Futhark.Syntax.BinOp
    -> Language.Futhark.Syntax.BinOp -> [Language.Futhark.Syntax.BinOp]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a5 :: Language.Futhark.Syntax.BinOp
                   b :: Language.Futhark.Syntax.BinOp ->
                 case a5 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 let {
                   a# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x1
                 } in
                 let {
                   b# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x2
                 } in
                 let {
                   $j :: GHC.Prim.Int# -> [Language.Futhark.Syntax.BinOp]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ y :: GHC.Prim.Int#[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# b# a#) of wild {
                       GHC.Types.False
                       -> GHC.Enum.efdtIntDnFB
                            @ [Language.Futhark.Syntax.BinOp]
                            Language.Futhark.Syntax.$fEnumBinOp_c1
                            (GHC.Types.[] @ Language.Futhark.Syntax.BinOp)
                            a#
                            b#
                            y
                       GHC.Types.True
                       -> GHC.Enum.efdtIntUpFB
                            @ [Language.Futhark.Syntax.BinOp]
                            Language.Futhark.Syntax.$fEnumBinOp_c1
                            (GHC.Types.[] @ Language.Futhark.Syntax.BinOp)
                            a#
                            b#
                            y }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># a# b#) of wild {
                   GHC.Types.False -> $j 21 GHC.Types.True -> $j 0 } } }) -}
d07c5b7b353387a89237c9062561c998
  $fEnumBinOp_$cenumFromThenTo ::
    Language.Futhark.Syntax.BinOp
    -> Language.Futhark.Syntax.BinOp
    -> Language.Futhark.Syntax.BinOp
    -> [Language.Futhark.Syntax.BinOp]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: Language.Futhark.Syntax.BinOp
                   x2 :: Language.Futhark.Syntax.BinOp
                   y :: Language.Futhark.Syntax.BinOp ->
                 case x1 of x4 { DEFAULT ->
                 case x2 of x5 { DEFAULT ->
                 case y of x6 { DEFAULT ->
                 let {
                   x7 :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x4
                 } in
                 let {
                   x8 :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x5
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# x8 x7) of wild {
                   GHC.Types.False
                   -> GHC.Enum.efdtIntDnFB
                        @ [Language.Futhark.Syntax.BinOp]
                        Language.Futhark.Syntax.$fEnumBinOp_c
                        (GHC.Types.[] @ Language.Futhark.Syntax.BinOp)
                        x7
                        x8
                        (GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x6)
                   GHC.Types.True
                   -> GHC.Enum.efdtIntUpFB
                        @ [Language.Futhark.Syntax.BinOp]
                        Language.Futhark.Syntax.$fEnumBinOp_c
                        (GHC.Types.[] @ Language.Futhark.Syntax.BinOp)
                        x7
                        x8
                        (GHC.Prim.dataToTag#
                           @ Language.Futhark.Syntax.BinOp
                           x6) } } } }) -}
d07c5b7b353387a89237c9062561c998
  $fEnumBinOp_$cenumFromTo ::
    Language.Futhark.Syntax.BinOp
    -> Language.Futhark.Syntax.BinOp -> [Language.Futhark.Syntax.BinOp]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Language.Futhark.Syntax.BinOp
                   y :: Language.Futhark.Syntax.BinOp ->
                 case x of x1 { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 let {
                   x0 :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x1
                 } in
                 let {
                   y1 :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># x0 y1) of wild {
                   GHC.Types.False
                   -> letrec {
                        go :: GHC.Prim.Int# -> [Language.Futhark.Syntax.BinOp]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x3 :: GHC.Prim.Int# ->
                          GHC.Types.:
                            @ Language.Futhark.Syntax.BinOp
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# x3 0) of wild1 {
                               GHC.Types.False -> Language.Futhark.Syntax.$fEnumBinOp1 x3
                               GHC.Types.True
                               -> case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.<=# x3 21) of wild2 {
                                    GHC.Types.False -> Language.Futhark.Syntax.$fEnumBinOp1 x3
                                    GHC.Types.True
                                    -> GHC.Prim.tagToEnum# @ Language.Futhark.Syntax.BinOp x3 } })
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x3 y1) of wild1 {
                               GHC.Types.False -> go (GHC.Prim.+# x3 1)
                               GHC.Types.True -> GHC.Types.[] @ Language.Futhark.Syntax.BinOp })
                      } in
                      go x0
                   GHC.Types.True
                   -> GHC.Types.[] @ Language.Futhark.Syntax.BinOp } } }) -}
d07c5b7b353387a89237c9062561c998
  $fEnumBinOp_$cfromEnum ::
    Language.Futhark.Syntax.BinOp -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a5 :: Language.Futhark.Syntax.BinOp ->
                 case a5 of x1 { DEFAULT ->
                 GHC.Types.I#
                   (GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x1) }) -}
d07c5b7b353387a89237c9062561c998
  $fEnumBinOp_$cpred ::
    Language.Futhark.Syntax.BinOp -> Language.Futhark.Syntax.BinOp
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a5 :: Language.Futhark.Syntax.BinOp ->
                 case a5 of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag#
                        @ Language.Futhark.Syntax.BinOp
                        x1 of wild {
                   DEFAULT
                   -> GHC.Prim.tagToEnum#
                        @ Language.Futhark.Syntax.BinOp
                        (GHC.Prim.+# wild (-1))
                   0 -> Language.Futhark.Syntax.$fEnumBinOp2 } }) -}
d07c5b7b353387a89237c9062561c998
  $fEnumBinOp_$csucc ::
    Language.Futhark.Syntax.BinOp -> Language.Futhark.Syntax.BinOp
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a5 :: Language.Futhark.Syntax.BinOp ->
                 case a5 of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag#
                        @ Language.Futhark.Syntax.BinOp
                        x1 of wild {
                   DEFAULT
                   -> GHC.Prim.tagToEnum#
                        @ Language.Futhark.Syntax.BinOp
                        (GHC.Prim.+# wild 1)
                   21 -> Language.Futhark.Syntax.$fEnumBinOp3 } }) -}
d07c5b7b353387a89237c9062561c998
  $fEnumBinOp_$ctoEnum ::
    GHC.Types.Int -> Language.Futhark.Syntax.BinOp
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.Futhark.Syntax.$w$ctoEnum ww1 }) -}
d07c5b7b353387a89237c9062561c998
  $fEnumBinOp_c ::
    GHC.Types.Int
    -> [Language.Futhark.Syntax.BinOp]
    -> [Language.Futhark.Syntax.BinOp]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [Language.Futhark.Syntax.BinOp] ->
                 GHC.Types.:
                   @ Language.Futhark.Syntax.BinOp
                   (Language.Futhark.Syntax.$fEnumBinOp_$ctoEnum x)
                   ys) -}
d07c5b7b353387a89237c9062561c998
  $fEnumBinOp_c1 ::
    GHC.Types.Int
    -> [Language.Futhark.Syntax.BinOp]
    -> [Language.Futhark.Syntax.BinOp]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [Language.Futhark.Syntax.BinOp] ->
                 GHC.Types.:
                   @ Language.Futhark.Syntax.BinOp
                   (case x of wild { GHC.Types.I# a5 ->
                    GHC.Prim.tagToEnum# @ Language.Futhark.Syntax.BinOp a5 })
                   ys) -}
d07c5b7b353387a89237c9062561c998
  $fEnumBinOp_go :: GHC.Prim.Int# -> [Language.Futhark.Syntax.BinOp]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
f5e74c92dfc57aa431b0945cf61909a2
  $fEqArrayTypeBase ::
    GHC.Classes.Eq (shape vn) =>
    GHC.Classes.Eq (Language.Futhark.Syntax.ArrayTypeBase shape as vn)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (shape :: * -> *)
                      @ (as :: * -> *)
                      @ vn
                      $dEq :: GHC.Classes.Eq (shape vn).
                  @ (Language.Futhark.Syntax.ArrayTypeBase shape as vn)
                  (Language.Futhark.Syntax.$fEqArrayTypeBase_$c==
                     @ shape
                     @ as
                     @ vn
                     $dEq)
                  (Language.Futhark.Syntax.$fEqArrayTypeBase_$c/=
                     @ shape
                     @ as
                     @ vn
                     $dEq) -}
f5e74c92dfc57aa431b0945cf61909a2
  $fEqArrayTypeBase_$c/= ::
    GHC.Classes.Eq (shape vn) =>
    Language.Futhark.Syntax.ArrayTypeBase shape as vn
    -> Language.Futhark.Syntax.ArrayTypeBase shape as vn
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (shape :: * -> *)
                   @ (as :: * -> *)
                   @ vn
                   $dEq :: GHC.Classes.Eq (shape vn)
                   x :: Language.Futhark.Syntax.ArrayTypeBase shape as vn
                   y :: Language.Futhark.Syntax.ArrayTypeBase shape as vn ->
                 GHC.Classes.not
                   (Language.Futhark.Syntax.$fEqArrayTypeBase_$c==
                      @ shape
                      @ as
                      @ vn
                      $dEq
                      x
                      y)) -}
f5e74c92dfc57aa431b0945cf61909a2
  $fEqArrayTypeBase_$c== ::
    GHC.Classes.Eq (shape vn) =>
    Language.Futhark.Syntax.ArrayTypeBase shape as vn
    -> Language.Futhark.Syntax.ArrayTypeBase shape as vn
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)> -}
77ef396cbab6f651865403263980ee3d
  $fEqArrayTypeBase_$s$c== ::
    Language.Futhark.Syntax.ArrayTypeBase
      Language.Futhark.Syntax.Rank as ()
    -> Language.Futhark.Syntax.ArrayTypeBase
         Language.Futhark.Syntax.Rank as ()
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
d07c5b7b353387a89237c9062561c998
  $fEqBinOp :: GHC.Classes.Eq Language.Futhark.Syntax.BinOp
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.BinOp
                  Language.Futhark.Syntax.$fEqBinOp_$c==
                  Language.Futhark.Syntax.$fEqBinOp_$c/= -}
d07c5b7b353387a89237c9062561c998
  $fEqBinOp_$c/= ::
    Language.Futhark.Syntax.BinOp
    -> Language.Futhark.Syntax.BinOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a5 :: Language.Futhark.Syntax.BinOp
                   b :: Language.Futhark.Syntax.BinOp ->
                 case a5 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x1)
                           (GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
d07c5b7b353387a89237c9062561c998
  $fEqBinOp_$c== ::
    Language.Futhark.Syntax.BinOp
    -> Language.Futhark.Syntax.BinOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a5 :: Language.Futhark.Syntax.BinOp
                   b :: Language.Futhark.Syntax.BinOp ->
                 case a5 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x1)
                      (GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x2)) } }) -}
db30d13db6ddfb68145b68842fcdae94
  $fEqDiet :: GHC.Classes.Eq Language.Futhark.Syntax.Diet
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.Diet
                  Language.Futhark.Syntax.$fEqDiet_$c==
                  Language.Futhark.Syntax.$fEqDiet_$c/= -}
db30d13db6ddfb68145b68842fcdae94
  $fEqDiet_$c/= ::
    Language.Futhark.Syntax.Diet
    -> Language.Futhark.Syntax.Diet -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a5 :: Language.Futhark.Syntax.Diet
                   b :: Language.Futhark.Syntax.Diet ->
                 case Language.Futhark.Syntax.$fEqDiet_$c== a5 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
db30d13db6ddfb68145b68842fcdae94
  $fEqDiet_$c== ::
    Language.Futhark.Syntax.Diet
    -> Language.Futhark.Syntax.Diet -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
1e77a56c44dbb158500633823a0c068b
  $fEqDimDecl ::
    GHC.Classes.Eq vn =>
    GHC.Classes.Eq (Language.Futhark.Syntax.DimDecl vn)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ vn $dEq :: GHC.Classes.Eq vn.
                  @ (Language.Futhark.Syntax.DimDecl vn)
                  (Language.Futhark.Syntax.$fEqDimDecl_$c== @ vn $dEq)
                  (Language.Futhark.Syntax.$fEqDimDecl_$c/= @ vn $dEq) -}
1e77a56c44dbb158500633823a0c068b
  $fEqDimDecl_$c/= ::
    GHC.Classes.Eq vn =>
    Language.Futhark.Syntax.DimDecl vn
    -> Language.Futhark.Syntax.DimDecl vn -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ vn
                   $dEq :: GHC.Classes.Eq vn
                   a5 :: Language.Futhark.Syntax.DimDecl vn
                   b :: Language.Futhark.Syntax.DimDecl vn ->
                 case a5 of wild {
                   Language.Futhark.Syntax.NamedDim a6
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Futhark.Syntax.NamedDim b1
                        -> case GHC.Classes.== @ vn $dEq a6 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } }
                   Language.Futhark.Syntax.ConstDim a6
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Futhark.Syntax.ConstDim b1
                        -> case a6 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } } }
                   Language.Futhark.Syntax.AnyDim
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Futhark.Syntax.AnyDim -> GHC.Types.False } }) -}
1e77a56c44dbb158500633823a0c068b
  $fEqDimDecl_$c== ::
    GHC.Classes.Eq vn =>
    Language.Futhark.Syntax.DimDecl vn
    -> Language.Futhark.Syntax.DimDecl vn -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ vn
                   $dEq :: GHC.Classes.Eq vn
                   ds :: Language.Futhark.Syntax.DimDecl vn
                   ds1 :: Language.Futhark.Syntax.DimDecl vn ->
                 case ds of wild {
                   Language.Futhark.Syntax.NamedDim a5
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.NamedDim b1
                        -> GHC.Classes.== @ vn $dEq a5 b1 }
                   Language.Futhark.Syntax.ConstDim a5
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.ConstDim b1 -> GHC.Classes.eqInt a5 b1 }
                   Language.Futhark.Syntax.AnyDim
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.AnyDim -> GHC.Types.True } }) -}
6a7e7f623049cf90a3840b9e074fa90f
  $fEqForLoopDirection ::
    GHC.Classes.Eq Language.Futhark.Syntax.ForLoopDirection
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.ForLoopDirection
                  Language.Futhark.Syntax.$fEqForLoopDirection_$c==
                  Language.Futhark.Syntax.$fEqForLoopDirection_$c/= -}
6a7e7f623049cf90a3840b9e074fa90f
  $fEqForLoopDirection_$c/= ::
    Language.Futhark.Syntax.ForLoopDirection
    -> Language.Futhark.Syntax.ForLoopDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a5 :: Language.Futhark.Syntax.ForLoopDirection
                   b :: Language.Futhark.Syntax.ForLoopDirection ->
                 case a5 of wild {
                   Language.Futhark.Syntax.FromUpTo
                   -> case b of wild1 {
                        Language.Futhark.Syntax.FromUpTo -> GHC.Types.False
                        Language.Futhark.Syntax.FromDownTo -> GHC.Types.True }
                   Language.Futhark.Syntax.FromDownTo
                   -> case b of wild1 {
                        Language.Futhark.Syntax.FromUpTo -> GHC.Types.True
                        Language.Futhark.Syntax.FromDownTo -> GHC.Types.False } }) -}
6a7e7f623049cf90a3840b9e074fa90f
  $fEqForLoopDirection_$c== ::
    Language.Futhark.Syntax.ForLoopDirection
    -> Language.Futhark.Syntax.ForLoopDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Language.Futhark.Syntax.ForLoopDirection
                   ds1 :: Language.Futhark.Syntax.ForLoopDirection ->
                 case ds of wild {
                   Language.Futhark.Syntax.FromUpTo
                   -> case ds1 of wild1 {
                        Language.Futhark.Syntax.FromUpTo -> GHC.Types.True
                        Language.Futhark.Syntax.FromDownTo -> GHC.Types.False }
                   Language.Futhark.Syntax.FromDownTo
                   -> case ds1 of wild1 {
                        Language.Futhark.Syntax.FromUpTo -> GHC.Types.False
                        Language.Futhark.Syntax.FromDownTo -> GHC.Types.True } }) -}
922bd38dbf61b406ded790909459e61d
  $fEqIdentBase ::
    GHC.Classes.Eq vn =>
    GHC.Classes.Eq (Language.Futhark.Syntax.IdentBase ty vn)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (ty :: * -> *) @ vn $dEq :: GHC.Classes.Eq vn.
                  @ (Language.Futhark.Syntax.IdentBase ty vn)
                  (Language.Futhark.Syntax.$fEqIdentBase_$c== @ ty @ vn $dEq)
                  (Language.Futhark.Syntax.$fEqIdentBase_$c/= @ ty @ vn $dEq) -}
922bd38dbf61b406ded790909459e61d
  $fEqIdentBase_$c/= ::
    GHC.Classes.Eq vn =>
    Language.Futhark.Syntax.IdentBase ty vn
    -> Language.Futhark.Syntax.IdentBase ty vn -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (ty :: * -> *)
                   @ vn
                   $dEq :: GHC.Classes.Eq vn
                   x :: Language.Futhark.Syntax.IdentBase ty vn
                   y :: Language.Futhark.Syntax.IdentBase ty vn ->
                 GHC.Classes.not
                   (Language.Futhark.Syntax.$fEqIdentBase_$c== @ ty @ vn $dEq x y)) -}
922bd38dbf61b406ded790909459e61d
  $fEqIdentBase_$c== ::
    GHC.Classes.Eq vn =>
    Language.Futhark.Syntax.IdentBase ty vn
    -> Language.Futhark.Syntax.IdentBase ty vn -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (ty :: * -> *)
                   @ vn
                   $dEq :: GHC.Classes.Eq vn
                   x :: Language.Futhark.Syntax.IdentBase ty vn
                   y :: Language.Futhark.Syntax.IdentBase ty vn ->
                 GHC.Classes.==
                   @ vn
                   $dEq
                   (case x of wild { Language.Futhark.Syntax.Ident ds ds1 ds2 -> ds })
                   (case y of wild { Language.Futhark.Syntax.Ident ds ds1 ds2 ->
                    ds })) -}
36b022f74c11b45b268c679b91cb8a0a
  $fEqInfo ::
    GHC.Classes.Eq a => GHC.Classes.Eq (Language.Futhark.Syntax.Info a)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(1*U,1*U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a5 $dEq :: GHC.Classes.Eq a5.
                  @ (Language.Futhark.Syntax.Info a5)
                  (Language.Futhark.Syntax.$fEqInfo_$c== @ a5 $dEq)
                  (Language.Futhark.Syntax.$fEqInfo_$c/= @ a5 $dEq) -}
36b022f74c11b45b268c679b91cb8a0a
  $fEqInfo_$c/= ::
    GHC.Classes.Eq a =>
    Language.Futhark.Syntax.Info a
    -> Language.Futhark.Syntax.Info a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),U(A,U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes./=
                  `cast`
                (forall a5.
                 <GHC.Classes.Eq a5>_R
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)
                 ->_R <GHC.Types.Bool>_R) -}
36b022f74c11b45b268c679b91cb8a0a
  $fEqInfo_$c== ::
    GHC.Classes.Eq a =>
    Language.Futhark.Syntax.Info a
    -> Language.Futhark.Syntax.Info a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),U(U,A)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.==
                  `cast`
                (forall a5.
                 <GHC.Classes.Eq a5>_R
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)
                 ->_R <GHC.Types.Bool>_R) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fEqNoInfo :: GHC.Classes.Eq (Language.Futhark.Syntax.NoInfo a)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a5.
                  @ (Language.Futhark.Syntax.NoInfo a5)
                  (Language.Futhark.Syntax.$fEqNoInfo2 @ a5)
                  (Language.Futhark.Syntax.$fEqNoInfo1 @ a5) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fEqNoInfo1 ::
    Language.Futhark.Syntax.NoInfo a
    -> Language.Futhark.Syntax.NoInfo a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ a5
                   a6 :: Language.Futhark.Syntax.NoInfo a5
                   b :: Language.Futhark.Syntax.NoInfo a5 ->
                 case a6 of wild { Language.Futhark.Syntax.NoInfo ->
                 case b of wild1 { Language.Futhark.Syntax.NoInfo ->
                 GHC.Types.False } }) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fEqNoInfo2 ::
    Language.Futhark.Syntax.NoInfo a
    -> Language.Futhark.Syntax.NoInfo a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ a5
                   a6 :: Language.Futhark.Syntax.NoInfo a5
                   b :: Language.Futhark.Syntax.NoInfo a5 ->
                 case a6 of wild { Language.Futhark.Syntax.NoInfo ->
                 case b of wild1 { Language.Futhark.Syntax.NoInfo ->
                 GHC.Types.True } }) -}
3a9c647c4f90fbf4f3c0ed2a825c4fe2
  $fEqParamBase ::
    GHC.Classes.Eq vn =>
    GHC.Classes.Eq (Language.Futhark.Syntax.ParamBase f vn)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *) @ vn $dEq :: GHC.Classes.Eq vn.
                  @ (Language.Futhark.Syntax.ParamBase f vn)
                  (Language.Futhark.Syntax.$fEqParamBase_$c== @ f @ vn $dEq)
                  (Language.Futhark.Syntax.$fEqParamBase_$c/= @ f @ vn $dEq) -}
3a9c647c4f90fbf4f3c0ed2a825c4fe2
  $fEqParamBase_$c/= ::
    GHC.Classes.Eq vn =>
    Language.Futhark.Syntax.ParamBase f vn
    -> Language.Futhark.Syntax.ParamBase f vn -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dEq :: GHC.Classes.Eq vn
                   x :: Language.Futhark.Syntax.ParamBase f vn
                   y :: Language.Futhark.Syntax.ParamBase f vn ->
                 GHC.Classes.not
                   (Language.Futhark.Syntax.$fEqParamBase_$c== @ f @ vn $dEq x y)) -}
3a9c647c4f90fbf4f3c0ed2a825c4fe2
  $fEqParamBase_$c== ::
    GHC.Classes.Eq vn =>
    Language.Futhark.Syntax.ParamBase f vn
    -> Language.Futhark.Syntax.ParamBase f vn -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dEq :: GHC.Classes.Eq vn
                   x :: Language.Futhark.Syntax.ParamBase f vn
                   y :: Language.Futhark.Syntax.ParamBase f vn ->
                 GHC.Classes.==
                   @ vn
                   $dEq
                   (case x of wild { Language.Futhark.Syntax.Param ds ds1 ds2 -> ds })
                   (case y of wild { Language.Futhark.Syntax.Param ds ds1 ds2 ->
                    ds })) -}
38fd8ca4b903061d48e25eb1353c4a5e
  $fEqPrimType :: GHC.Classes.Eq Language.Futhark.Syntax.PrimType
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.PrimType
                  Language.Futhark.Syntax.$fEqPrimType_$c==
                  Language.Futhark.Syntax.$fEqPrimType_$c/= -}
38fd8ca4b903061d48e25eb1353c4a5e
  $fEqPrimType_$c/= ::
    Language.Futhark.Syntax.PrimType
    -> Language.Futhark.Syntax.PrimType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a5 :: Language.Futhark.Syntax.PrimType
                   b :: Language.Futhark.Syntax.PrimType ->
                 case Language.Futhark.Syntax.$fEqPrimType_$c== a5 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
38fd8ca4b903061d48e25eb1353c4a5e
  $fEqPrimType_$c== ::
    Language.Futhark.Syntax.PrimType
    -> Language.Futhark.Syntax.PrimType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: Language.Futhark.Syntax.PrimType
                   ds1 :: Language.Futhark.Syntax.PrimType ->
                 case ds of wild {
                   Language.Futhark.Syntax.Signed a5
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.Signed b1
                        -> Futhark.Representation.Primitive.$fEqCmpOp_$c==2 a5 b1 }
                   Language.Futhark.Syntax.Unsigned a5
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.Unsigned b1
                        -> Futhark.Representation.Primitive.$fEqCmpOp_$c==2 a5 b1 }
                   Language.Futhark.Syntax.FloatType a5
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.FloatType b1
                        -> Futhark.Representation.Primitive.$fEqCmpOp_$c==1 a5 b1 }
                   Language.Futhark.Syntax.Bool
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.Bool -> GHC.Types.True } }) -}
400b85f01ad530ac1a7fa288900f4e88
  $fEqPrimValue :: GHC.Classes.Eq Language.Futhark.Syntax.PrimValue
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.PrimValue
                  Language.Futhark.Syntax.$fEqPrimValue_$c==
                  Language.Futhark.Syntax.$fEqPrimValue_$c/= -}
400b85f01ad530ac1a7fa288900f4e88
  $fEqPrimValue_$c/= ::
    Language.Futhark.Syntax.PrimValue
    -> Language.Futhark.Syntax.PrimValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a5 :: Language.Futhark.Syntax.PrimValue
                   b :: Language.Futhark.Syntax.PrimValue ->
                 case Language.Futhark.Syntax.$fEqPrimValue_$c== a5 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
400b85f01ad530ac1a7fa288900f4e88
  $fEqPrimValue_$c== ::
    Language.Futhark.Syntax.PrimValue
    -> Language.Futhark.Syntax.PrimValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: Language.Futhark.Syntax.PrimValue
                   ds1 :: Language.Futhark.Syntax.PrimValue ->
                 case ds of wild {
                   Language.Futhark.Syntax.SignedValue a5
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.SignedValue b1
                        -> case a5 of wild2 {
                             Futhark.Representation.Primitive.Int8Value dt
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int8Value dt1
                                  -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# dt dt1) }
                             Futhark.Representation.Primitive.Int16Value dt
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int16Value dt1
                                  -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# dt dt1) }
                             Futhark.Representation.Primitive.Int32Value dt
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int32Value dt1
                                  -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# dt dt1) }
                             Futhark.Representation.Primitive.Int64Value dt
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int64Value dt1
                                  -> GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# dt dt1) } } }
                   Language.Futhark.Syntax.UnsignedValue a5
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.UnsignedValue b1
                        -> case a5 of wild2 {
                             Futhark.Representation.Primitive.Int8Value dt
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int8Value dt1
                                  -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# dt dt1) }
                             Futhark.Representation.Primitive.Int16Value dt
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int16Value dt1
                                  -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# dt dt1) }
                             Futhark.Representation.Primitive.Int32Value dt
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int32Value dt1
                                  -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# dt dt1) }
                             Futhark.Representation.Primitive.Int64Value dt
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int64Value dt1
                                  -> GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# dt dt1) } } }
                   Language.Futhark.Syntax.FloatValue a5
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.FloatValue b1
                        -> case a5 of wild2 {
                             Futhark.Representation.Primitive.Float32Value dt
                             -> case b1 of wild3 {
                                  Futhark.Representation.Primitive.Float32Value dt1
                                  -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.eqFloat# dt dt1)
                                  Futhark.Representation.Primitive.Float64Value ipv
                                  -> GHC.Types.False }
                             Futhark.Representation.Primitive.Float64Value dt
                             -> case b1 of wild3 {
                                  Futhark.Representation.Primitive.Float32Value ipv
                                  -> GHC.Types.False
                                  Futhark.Representation.Primitive.Float64Value dt1
                                  -> GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==## dt dt1) } } }
                   Language.Futhark.Syntax.BoolValue a5
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.BoolValue b1
                        -> case a5 of wild2 {
                             GHC.Types.False
                             -> case b1 of wild3 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False }
                             GHC.Types.True -> b1 } } }) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fEqRank :: GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ vn.
                  @ (Language.Futhark.Syntax.Rank vn)
                  (Language.Futhark.Syntax.$fEqRank_$c== @ vn)
                  (Language.Futhark.Syntax.$fEqRank_$c/= @ vn) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fEqRank_$c/= ::
    Language.Futhark.Syntax.Rank vn
    -> Language.Futhark.Syntax.Rank vn -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                (\ @ vn -> GHC.Classes.neInt)
                  `cast`
                (forall vn.
                 Sym (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)
                 ->_R <GHC.Types.Bool>_R) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fEqRank_$c== ::
    Language.Futhark.Syntax.Rank vn
    -> Language.Futhark.Syntax.Rank vn -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                (\ @ vn -> GHC.Classes.eqInt)
                  `cast`
                (forall vn.
                 Sym (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)
                 ->_R <GHC.Types.Bool>_R) -}
23c47b362b456c0c51d94a86b9652b66
  $fEqShapeDecl ::
    GHC.Classes.Eq vn =>
    GHC.Classes.Eq (Language.Futhark.Syntax.ShapeDecl vn)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ vn $dEq :: GHC.Classes.Eq vn.
                  @ (Language.Futhark.Syntax.ShapeDecl vn)
                  (Language.Futhark.Syntax.$fEqShapeDecl_$c== @ vn $dEq)
                  (Language.Futhark.Syntax.$fEqShapeDecl_$c/= @ vn $dEq) -}
15985d9e5bc6060cfc8af7eb5bb6213e
  $fEqShapeDecl1 ::
    GHC.Classes.Eq vn =>
    [Language.Futhark.Syntax.DimDecl vn]
    -> [Language.Futhark.Syntax.DimDecl vn] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ vn $dEq :: GHC.Classes.Eq vn ->
                 GHC.Classes.$fEq[]_$c/=
                   @ (Language.Futhark.Syntax.DimDecl vn)
                   (Language.Futhark.Syntax.$fEqDimDecl @ vn $dEq)) -}
a8277f6748b49f4b5c81461ac9bf3c94
  $fEqShapeDecl2 ::
    GHC.Classes.Eq vn =>
    [Language.Futhark.Syntax.DimDecl vn]
    -> [Language.Futhark.Syntax.DimDecl vn] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ vn $dEq :: GHC.Classes.Eq vn ->
                 GHC.Classes.$fEq[]_$c==
                   @ (Language.Futhark.Syntax.DimDecl vn)
                   (Language.Futhark.Syntax.$fEqDimDecl @ vn $dEq)) -}
23c47b362b456c0c51d94a86b9652b66
  $fEqShapeDecl_$c/= ::
    GHC.Classes.Eq vn =>
    Language.Futhark.Syntax.ShapeDecl vn
    -> Language.Futhark.Syntax.ShapeDecl vn -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fEqShapeDecl1
                  `cast`
                (forall vn.
                 <GHC.Classes.Eq vn>_R
                 ->_R Sym (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R)
                 ->_R Sym (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R)
                 ->_R <GHC.Types.Bool>_R) -}
23c47b362b456c0c51d94a86b9652b66
  $fEqShapeDecl_$c== ::
    GHC.Classes.Eq vn =>
    Language.Futhark.Syntax.ShapeDecl vn
    -> Language.Futhark.Syntax.ShapeDecl vn -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fEqShapeDecl2
                  `cast`
                (forall vn.
                 <GHC.Classes.Eq vn>_R
                 ->_R Sym (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R)
                 ->_R Sym (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R)
                 ->_R <GHC.Types.Bool>_R) -}
f5e74c92dfc57aa431b0945cf61909a2
  $fEqTupleArrayElemTypeBase ::
    GHC.Classes.Eq (shape vn) =>
    GHC.Classes.Eq
      (Language.Futhark.Syntax.TupleArrayElemTypeBase shape as vn)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (shape :: * -> *)
                      @ (as :: * -> *)
                      @ vn
                      $dEq :: GHC.Classes.Eq (shape vn).
                  @ (Language.Futhark.Syntax.TupleArrayElemTypeBase shape as vn)
                  (Language.Futhark.Syntax.$fEqTupleArrayElemTypeBase_$c==
                     @ shape
                     @ as
                     @ vn
                     $dEq)
                  (Language.Futhark.Syntax.$fEqTupleArrayElemTypeBase_$c/=
                     @ shape
                     @ as
                     @ vn
                     $dEq) -}
f5e74c92dfc57aa431b0945cf61909a2
  $fEqTupleArrayElemTypeBase_$c/= ::
    GHC.Classes.Eq (shape vn) =>
    Language.Futhark.Syntax.TupleArrayElemTypeBase shape as vn
    -> Language.Futhark.Syntax.TupleArrayElemTypeBase shape as vn
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (shape :: * -> *)
                   @ (as :: * -> *)
                   @ vn
                   $dEq :: GHC.Classes.Eq (shape vn)
                   x :: Language.Futhark.Syntax.TupleArrayElemTypeBase shape as vn
                   y :: Language.Futhark.Syntax.TupleArrayElemTypeBase shape as vn ->
                 GHC.Classes.not
                   (Language.Futhark.Syntax.$fEqTupleArrayElemTypeBase_$c==
                      @ shape
                      @ as
                      @ vn
                      $dEq
                      x
                      y)) -}
f5e74c92dfc57aa431b0945cf61909a2
  $fEqTupleArrayElemTypeBase_$c== ::
    GHC.Classes.Eq (shape vn) =>
    Language.Futhark.Syntax.TupleArrayElemTypeBase shape as vn
    -> Language.Futhark.Syntax.TupleArrayElemTypeBase shape as vn
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)> -}
e26225d5dec841f8e1b5b283a18a8da2
  $fEqTupleArrayElemTypeBase_$s$c/= ::
    Language.Futhark.Syntax.TupleArrayElemTypeBase
      Language.Futhark.Syntax.Rank as ()
    -> Language.Futhark.Syntax.TupleArrayElemTypeBase
         Language.Futhark.Syntax.Rank as ()
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (as :: * -> *)
                   x :: Language.Futhark.Syntax.TupleArrayElemTypeBase
                          Language.Futhark.Syntax.Rank as ()
                   y :: Language.Futhark.Syntax.TupleArrayElemTypeBase
                          Language.Futhark.Syntax.Rank as () ->
                 GHC.Classes.not
                   (Language.Futhark.Syntax.$fEqTupleArrayElemTypeBase_$s$c==
                      @ as
                      x
                      y)) -}
b9256aca3686de0bf55dc48d1113db48
  $fEqTupleArrayElemTypeBase_$s$c== ::
    Language.Futhark.Syntax.TupleArrayElemTypeBase
      Language.Futhark.Syntax.Rank as ()
    -> Language.Futhark.Syntax.TupleArrayElemTypeBase
         Language.Futhark.Syntax.Rank as ()
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
f4ba97c075d9e92fdea0bc69c63fe8d1
  $fEqTupleArrayElemTypeBase_$s$fEqTupleArrayElemTypeBase ::
    GHC.Classes.Eq
      (Language.Futhark.Syntax.TupleArrayElemTypeBase
         Language.Futhark.Syntax.Rank as ())
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (as :: * -> *).
                  @ (Language.Futhark.Syntax.TupleArrayElemTypeBase
                       Language.Futhark.Syntax.Rank as ())
                  (Language.Futhark.Syntax.$fEqTupleArrayElemTypeBase_$s$c== @ as)
                  (Language.Futhark.Syntax.$fEqTupleArrayElemTypeBase_$s$c/= @ as) -}
99bd87deac1e318133c7179dfa4bd510
  $fEqTypeBase ::
    GHC.Classes.Eq (shape vn) =>
    GHC.Classes.Eq (Language.Futhark.Syntax.TypeBase shape as vn)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (shape :: * -> *)
                      @ (as :: * -> *)
                      @ vn
                      $dEq :: GHC.Classes.Eq (shape vn).
                  @ (Language.Futhark.Syntax.TypeBase shape as vn)
                  (Language.Futhark.Syntax.$fEqTypeBase_$c== @ shape @ as @ vn $dEq)
                  (Language.Futhark.Syntax.$fEqTypeBase_$c/=
                     @ shape
                     @ as
                     @ vn
                     $dEq) -}
99bd87deac1e318133c7179dfa4bd510
  $fEqTypeBase_$c/= ::
    GHC.Classes.Eq (shape vn) =>
    Language.Futhark.Syntax.TypeBase shape as vn
    -> Language.Futhark.Syntax.TypeBase shape as vn -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (shape :: * -> *)
                   @ (as :: * -> *)
                   @ vn
                   $dEq :: GHC.Classes.Eq (shape vn)
                   a5 :: Language.Futhark.Syntax.TypeBase shape as vn
                   b :: Language.Futhark.Syntax.TypeBase shape as vn ->
                 case Language.Futhark.Syntax.$fEqTypeBase_$c==
                        @ shape
                        @ as
                        @ vn
                        $dEq
                        a5
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
99bd87deac1e318133c7179dfa4bd510
  $fEqTypeBase_$c== ::
    GHC.Classes.Eq (shape vn) =>
    Language.Futhark.Syntax.TypeBase shape as vn
    -> Language.Futhark.Syntax.TypeBase shape as vn -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)> -}
6aaaa03ecc2bb2ed9b3658316e2749b5
  $fEqTypeBase_$s$c/= ::
    Language.Futhark.Syntax.TypeBase Language.Futhark.Syntax.Rank as ()
    -> Language.Futhark.Syntax.TypeBase
         Language.Futhark.Syntax.Rank as ()
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (as :: * -> *)
                   a5 :: Language.Futhark.Syntax.TypeBase
                           Language.Futhark.Syntax.Rank as ()
                   b :: Language.Futhark.Syntax.TypeBase
                          Language.Futhark.Syntax.Rank as () ->
                 case Language.Futhark.Syntax.$fEqTypeBase_$s$c==
                        @ as
                        a5
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
6f08500d230344312be1fcac17929110
  $fEqTypeBase_$s$c== ::
    Language.Futhark.Syntax.TypeBase Language.Futhark.Syntax.Rank as ()
    -> Language.Futhark.Syntax.TypeBase
         Language.Futhark.Syntax.Rank as ()
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
c25ab9fc5386a49852d44f109a5da576
  $fEqTypeBase_$s$fEqTypeBase ::
    GHC.Classes.Eq
      (Language.Futhark.Syntax.TypeBase
         Language.Futhark.Syntax.Rank as ())
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (as :: * -> *).
                  @ (Language.Futhark.Syntax.TypeBase
                       Language.Futhark.Syntax.Rank as ())
                  (Language.Futhark.Syntax.$fEqTypeBase_$s$c== @ as)
                  (Language.Futhark.Syntax.$fEqTypeBase_$s$c/= @ as) -}
e22888e07cdc5159294b6b72f8ca9208
  $fEqUnOp :: GHC.Classes.Eq Language.Futhark.Syntax.UnOp
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.UnOp
                  Language.Futhark.Syntax.$fEqUnOp_$c==
                  Language.Futhark.Syntax.$fEqUnOp_$c/= -}
e22888e07cdc5159294b6b72f8ca9208
  $fEqUnOp_$c/= ::
    Language.Futhark.Syntax.UnOp
    -> Language.Futhark.Syntax.UnOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a5 :: Language.Futhark.Syntax.UnOp
                   b :: Language.Futhark.Syntax.UnOp ->
                 case Language.Futhark.Syntax.$fEqUnOp_$c== a5 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e22888e07cdc5159294b6b72f8ca9208
  $fEqUnOp_$c== ::
    Language.Futhark.Syntax.UnOp
    -> Language.Futhark.Syntax.UnOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: Language.Futhark.Syntax.UnOp
                   ds1 :: Language.Futhark.Syntax.UnOp ->
                 case ds of wild {
                   Language.Futhark.Syntax.Not
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.Not -> GHC.Types.True }
                   Language.Futhark.Syntax.Negate
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.Negate -> GHC.Types.True }
                   Language.Futhark.Syntax.Complement
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.Complement -> GHC.Types.True }
                   Language.Futhark.Syntax.Abs
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.Abs -> GHC.Types.True }
                   Language.Futhark.Syntax.Signum
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.Signum -> GHC.Types.True }
                   Language.Futhark.Syntax.ToFloat a5
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.ToFloat b1
                        -> Futhark.Representation.Primitive.$fEqCmpOp_$c==1 a5 b1 }
                   Language.Futhark.Syntax.ToSigned a5
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.ToSigned b1
                        -> Futhark.Representation.Primitive.$fEqCmpOp_$c==2 a5 b1 }
                   Language.Futhark.Syntax.ToUnsigned a5
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.ToUnsigned b1
                        -> Futhark.Representation.Primitive.$fEqCmpOp_$c==2 a5 b1 } }) -}
f4ef904aac52050dcf1785f30dabc683
  $fEqValue :: GHC.Classes.Eq Language.Futhark.Syntax.Value
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.Value
                  Language.Futhark.Syntax.$fEqValue_$c==
                  Language.Futhark.Syntax.$fEqValue_$c/= -}
f4ef904aac52050dcf1785f30dabc683
  $fEqValue_$c/= ::
    Language.Futhark.Syntax.Value
    -> Language.Futhark.Syntax.Value -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a5 :: Language.Futhark.Syntax.Value
                   b :: Language.Futhark.Syntax.Value ->
                 case Language.Futhark.Syntax.$fEqValue_$c== a5 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
f4ef904aac52050dcf1785f30dabc683
  $fEqValue_$c== ::
    Language.Futhark.Syntax.Value
    -> Language.Futhark.Syntax.Value -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
36b022f74c11b45b268c679b91cb8a0a
  $fFoldableInfo ::
    Data.Foldable.Foldable Language.Futhark.Syntax.Info
  DFunId[0]
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.Info
                  Language.Futhark.Syntax.$fFoldableInfo_$s$dmfold
                  Language.Futhark.Syntax.$fFoldableInfo_$s$dmfoldMap
                  Language.Futhark.Syntax.$fFoldableInfo_$cfoldr
                  Language.Futhark.Syntax.$fFoldableInfo_$cfoldr
                  Language.Futhark.Syntax.$fFoldableInfo_$cfoldl'
                  Language.Futhark.Syntax.$fFoldableInfo_$cfoldl'
                  Language.Futhark.Syntax.$fFoldableInfo_$cfoldr1
                  Language.Futhark.Syntax.$fFoldableInfo_$cfoldr1
                  Language.Futhark.Syntax.$fFoldableInfo_$ctoList
                  Language.Futhark.Syntax.$fFoldableInfo_$cnull
                  Language.Futhark.Syntax.$fFoldableInfo_$clength
                  Language.Futhark.Syntax.$fFoldableInfo_$celem
                  Language.Futhark.Syntax.$fFoldableInfo_$cmaximum
                  Language.Futhark.Syntax.$fFoldableInfo_$cmaximum
                  Language.Futhark.Syntax.$fFoldableInfo_$csum
                  Language.Futhark.Syntax.$fFoldableInfo_$cproduct -}
36b022f74c11b45b268c679b91cb8a0a
  $fFoldableInfo1 ::
    GHC.Num.Num a3 => Language.Futhark.Syntax.Info a3 -> a3
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LLLL),U(A,A,1*C1(C1(U)),A,A,A,1*C1(U))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a5
                   $dNum :: GHC.Num.Num a5
                   eta :: Language.Futhark.Syntax.Info a5 ->
                 GHC.Num.*
                   @ a5
                   $dNum
                   eta `cast` (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)
                   (GHC.Num.fromInteger @ a5 $dNum Data.Monoid.$fMonoidProduct1)) -}
36b022f74c11b45b268c679b91cb8a0a
  $fFoldableInfo2 ::
    GHC.Num.Num a3 => Language.Futhark.Syntax.Info a3 -> a3
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(C(C(S))LLLLLL),U(1*C1(C1(U)),A,A,A,A,A,1*C1(U))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a5
                   $dNum :: GHC.Num.Num a5
                   eta :: Language.Futhark.Syntax.Info a5 ->
                 GHC.Num.+
                   @ a5
                   $dNum
                   eta `cast` (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)
                   (GHC.Num.fromInteger @ a5 $dNum Data.Monoid.$fMonoidSum1)) -}
36b022f74c11b45b268c679b91cb8a0a
  $fFoldableInfo3 ::
    GHC.Classes.Ord a3 =>
    Language.Futhark.Syntax.Info a3 -> Language.Futhark.Syntax.Info a3
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a5
                   $dOrd :: GHC.Classes.Ord a5
                   x :: Language.Futhark.Syntax.Info a5 ->
                 x) -}
36b022f74c11b45b268c679b91cb8a0a
  $fFoldableInfo4 ::
    GHC.Classes.Eq a3 =>
    a3 -> Language.Futhark.Syntax.Info a3 -> Data.Monoid.Any
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(U),A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a5 $dEq :: GHC.Classes.Eq a5 eta :: a5 ->
                 let {
                   a6 :: a5 -> GHC.Types.Bool = GHC.Classes.== @ a5 $dEq eta
                 } in
                 (\ eta1 :: Language.Futhark.Syntax.Info a5 ->
                  a6 eta1 `cast` (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R))
                   `cast`
                 (<Language.Futhark.Syntax.Info a5>_R
                  ->_R Sym (Data.Monoid.NTCo:Any[0]))) -}
36b022f74c11b45b268c679b91cb8a0a
  $fFoldableInfo5 ::
    (a3 -> a3 -> a3)
    -> Language.Futhark.Syntax.Info a3
    -> Language.Futhark.Syntax.Info a3
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a5
                   f :: a5 -> a5 -> a5
                   xs :: Language.Futhark.Syntax.Info a5 ->
                 xs) -}
36b022f74c11b45b268c679b91cb8a0a
  $fFoldableInfo_$celem ::
    GHC.Classes.Eq a =>
    a -> Language.Futhark.Syntax.Info a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(U),A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fFoldableInfo4
                  `cast`
                (forall a5.
                 <GHC.Classes.Eq a5>_R
                 ->_R <a5>_R
                 ->_R <Language.Futhark.Syntax.Info a5>_R
                 ->_R Data.Monoid.NTCo:Any[0]) -}
36b022f74c11b45b268c679b91cb8a0a
  $fFoldableInfo_$cfoldl' ::
    (b -> a -> b) -> b -> Language.Futhark.Syntax.Info a -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><L,U>,
     Unfolding: InlineRule (3, True, True)
                (\ @ b
                   @ a5
                   f :: b -> a5 -> b
                   z0 :: b
                   xs :: Language.Futhark.Syntax.Info a5 ->
                 f z0 xs `cast` (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)) -}
36b022f74c11b45b268c679b91cb8a0a
  $fFoldableInfo_$cfoldr ::
    (a -> b -> b) -> b -> Language.Futhark.Syntax.Info a -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><L,U>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a5
                   @ b
                   f :: a5 -> b -> b
                   b1 :: b
                   ds :: Language.Futhark.Syntax.Info a5 ->
                 f ds `cast` (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R) b1) -}
36b022f74c11b45b268c679b91cb8a0a
  $fFoldableInfo_$cfoldr1 ::
    (a -> a -> a) -> Language.Futhark.Syntax.Info a -> a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fFoldableInfo5
                  `cast`
                (forall a5.
                 <a5 -> a5 -> a5>_R
                 ->_R <Language.Futhark.Syntax.Info a5>_R
                 ->_R Language.Futhark.Syntax.NTCo:Info[0] <a5>_R) -}
36b022f74c11b45b268c679b91cb8a0a
  $fFoldableInfo_$clength ::
    Language.Futhark.Syntax.Info a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ a5 xs :: Language.Futhark.Syntax.Info a5 -> GHC.Types.I# 1) -}
36b022f74c11b45b268c679b91cb8a0a
  $fFoldableInfo_$cmaximum ::
    GHC.Classes.Ord a => Language.Futhark.Syntax.Info a -> a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fFoldableInfo3
                  `cast`
                (forall a5.
                 <GHC.Classes.Ord a5>_R
                 ->_R <Language.Futhark.Syntax.Info a5>_R
                 ->_R Language.Futhark.Syntax.NTCo:Info[0] <a5>_R) -}
36b022f74c11b45b268c679b91cb8a0a
  $fFoldableInfo_$cnull ::
    Language.Futhark.Syntax.Info a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a5 ds :: Language.Futhark.Syntax.Info a5 ->
                 GHC.Types.False) -}
36b022f74c11b45b268c679b91cb8a0a
  $fFoldableInfo_$cproduct ::
    GHC.Num.Num a => Language.Futhark.Syntax.Info a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LLLL),U(A,A,1*C1(C1(U)),A,A,A,1*C1(U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fFoldableInfo1 -}
36b022f74c11b45b268c679b91cb8a0a
  $fFoldableInfo_$csum ::
    GHC.Num.Num a => Language.Futhark.Syntax.Info a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(C(C(S))LLLLLL),U(1*C1(C1(U)),A,A,A,A,A,1*C1(U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fFoldableInfo2 -}
36b022f74c11b45b268c679b91cb8a0a
  $fFoldableInfo_$ctoList :: Language.Futhark.Syntax.Info a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a5 t1 :: Language.Futhark.Syntax.Info a5 ->
                 GHC.Base.build
                   @ a5
                   (\ @ b c :: a5 -> b -> b[OneShot] n :: b[OneShot] ->
                    Language.Futhark.Syntax.$fFoldableInfo_$cfoldr @ a5 @ b c n t1)) -}
36b022f74c11b45b268c679b91cb8a0a
  $fFoldableInfo_$s$dmfold ::
    GHC.Base.Monoid m => Language.Futhark.Syntax.Info m -> m
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),U(1*U,1*C1(C1(U)),A)><L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ @ m
                   $dMonoid :: GHC.Base.Monoid m
                   eta :: Language.Futhark.Syntax.Info m ->
                 Language.Futhark.Syntax.$fFoldableInfo_$s$dmfoldMap
                   @ m
                   @ m
                   $dMonoid
                   (GHC.Base.id @ m)
                   eta) -}
36b022f74c11b45b268c679b91cb8a0a
  $fFoldableInfo_$s$dmfoldMap ::
    GHC.Base.Monoid m =>
    (a -> m) -> Language.Futhark.Syntax.Info a -> m
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),U(1*U,1*C1(C1(U)),A)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ @ a5
                   @ m
                   $dMonoid :: GHC.Base.Monoid m
                   f :: a5 -> m
                   eta :: Language.Futhark.Syntax.Info a5 ->
                 Language.Futhark.Syntax.$fFoldableInfo_$cfoldr
                   @ a5
                   @ m
                   (\ x :: a5[OneShot] -> GHC.Base.mappend @ m $dMonoid (f x))
                   (GHC.Base.mempty @ m $dMonoid)
                   eta) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fFoldableNoInfo ::
    Data.Foldable.Foldable Language.Futhark.Syntax.NoInfo
  DFunId[0]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.NoInfo
                  Language.Futhark.Syntax.$fFoldableNoInfo_$s$dmfold
                  Language.Futhark.Syntax.$fFoldableNoInfo_$s$dmfoldMap
                  Language.Futhark.Syntax.$fFoldableNoInfo_$cfoldr
                  Language.Futhark.Syntax.$fFoldableNoInfo_$cfoldr
                  Language.Futhark.Syntax.$fFoldableNoInfo_$cfoldl'
                  Language.Futhark.Syntax.$fFoldableNoInfo_$cfoldl'
                  Language.Futhark.Syntax.$fFoldableNoInfo_$cfoldr1
                  Language.Futhark.Syntax.$fFoldableNoInfo_$cfoldl1
                  Language.Futhark.Syntax.$fFoldableNoInfo_$ctoList
                  Language.Futhark.Syntax.$fFoldableNoInfo_$cnull
                  Language.Futhark.Syntax.$fFoldableNoInfo_$clength
                  Language.Futhark.Syntax.$fFoldableNoInfo_$celem
                  Language.Futhark.Syntax.$fFoldableNoInfo_$cmaximum
                  Language.Futhark.Syntax.$fFoldableNoInfo_$cminimum
                  Language.Futhark.Syntax.$fFoldableNoInfo_$csum
                  Language.Futhark.Syntax.$fFoldableNoInfo_$cproduct -}
13904bef35c7220bfbb9b2885b4fa96a
  $fFoldableNoInfo1 ::
    GHC.Num.Num a3 =>
    Language.Futhark.Syntax.NoInfo a3 -> Data.Monoid.Product a3
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),1*U(A,A,A,A,A,A,1*C1(U))><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a5
                   $dNum :: GHC.Num.Num a5
                   eta :: Language.Futhark.Syntax.NoInfo a5 ->
                 case eta of wild { Language.Futhark.Syntax.NoInfo ->
                 (Data.Monoid.$fMonoidProduct2 @ a5 $dNum)
                   `cast`
                 (Sym (Data.Monoid.NTCo:Product[0] <a5>_R)) }) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fFoldableNoInfo2 ::
    GHC.Num.Num a3 =>
    Language.Futhark.Syntax.NoInfo a3 -> Data.Monoid.Sum a3
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),1*U(A,A,A,A,A,A,1*C1(U))><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a5
                   $dNum :: GHC.Num.Num a5
                   eta :: Language.Futhark.Syntax.NoInfo a5 ->
                 case eta of wild { Language.Futhark.Syntax.NoInfo ->
                 (Data.Monoid.$fMonoidSum2 @ a5 $dNum)
                   `cast`
                 (Sym (Data.Monoid.NTCo:Sum[0] <a5>_R)) }) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fFoldableNoInfo3 ::
    GHC.Classes.Eq a3 =>
    a3 -> Language.Futhark.Syntax.NoInfo a3 -> Data.Monoid.Any
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*H>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a5
                   $dEq :: GHC.Classes.Eq a5
                   eta :: a5
                   eta1 :: Language.Futhark.Syntax.NoInfo a5 ->
                 case eta1 of wild { Language.Futhark.Syntax.NoInfo ->
                 GHC.Types.False `cast` (Sym (Data.Monoid.NTCo:Any[0])) }) -}
0d4bac7b3f4d083c3626db51a345361c
  $fFoldableNoInfo4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fFoldableNoInfo_$celem ::
    GHC.Classes.Eq a =>
    a -> Language.Futhark.Syntax.NoInfo a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*H>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fFoldableNoInfo3
                  `cast`
                (forall a5.
                 <GHC.Classes.Eq a5>_R
                 ->_R <a5>_R
                 ->_R <Language.Futhark.Syntax.NoInfo a5>_R
                 ->_R Data.Monoid.NTCo:Any[0]) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fFoldableNoInfo_$cfoldl' ::
    (b -> a -> b) -> b -> Language.Futhark.Syntax.NoInfo a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,1*H>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   @ a5
                   f :: b -> a5 -> b
                   z0 :: b
                   xs :: Language.Futhark.Syntax.NoInfo a5 ->
                 case xs of wild { Language.Futhark.Syntax.NoInfo -> z0 }) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fFoldableNoInfo_$cfoldl1 ::
    (a -> a -> a) -> Language.Futhark.Syntax.NoInfo a -> a
  {- Arity: 2, Strictness: <B,A><B,1*H>b, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ @ a5
                   w :: a5 -> a5 -> a5
                   w1 :: Language.Futhark.Syntax.NoInfo a5 ->
                 Language.Futhark.Syntax.$w$cfoldl1 @ a5 w1) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fFoldableNoInfo_$cfoldr ::
    (a -> b -> b) -> b -> Language.Futhark.Syntax.NoInfo a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,1*H>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a5
                   @ b
                   ds :: a5 -> b -> b
                   b1 :: b
                   ds1 :: Language.Futhark.Syntax.NoInfo a5 ->
                 case ds1 of wild { Language.Futhark.Syntax.NoInfo -> b1 }) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fFoldableNoInfo_$cfoldr1 ::
    (a -> a -> a) -> Language.Futhark.Syntax.NoInfo a -> a
  {- Arity: 2, Strictness: <B,A><B,1*H>b, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ @ a5
                   w :: a5 -> a5 -> a5
                   w1 :: Language.Futhark.Syntax.NoInfo a5 ->
                 Language.Futhark.Syntax.$w$cfoldr1 @ a5 w1) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fFoldableNoInfo_$clength ::
    Language.Futhark.Syntax.NoInfo a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*H>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a5 xs :: Language.Futhark.Syntax.NoInfo a5 ->
                 case xs of wild { Language.Futhark.Syntax.NoInfo ->
                 Language.Futhark.Syntax.$fFoldableNoInfo4 }) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fFoldableNoInfo_$cmaximum ::
    GHC.Classes.Ord a => Language.Futhark.Syntax.NoInfo a -> a
  {- Arity: 2, Strictness: <B,A><B,1*H>b, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ @ a5
                   w :: GHC.Classes.Ord a5
                   w1 :: Language.Futhark.Syntax.NoInfo a5 ->
                 Language.Futhark.Syntax.$w$cmaximum @ a5 w1) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fFoldableNoInfo_$cminimum ::
    GHC.Classes.Ord a => Language.Futhark.Syntax.NoInfo a -> a
  {- Arity: 2, Strictness: <B,A><B,1*H>b, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ @ a5
                   w :: GHC.Classes.Ord a5
                   w1 :: Language.Futhark.Syntax.NoInfo a5 ->
                 Language.Futhark.Syntax.$w$cminimum @ a5 w1) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fFoldableNoInfo_$cnull ::
    Language.Futhark.Syntax.NoInfo a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a5 ds :: Language.Futhark.Syntax.NoInfo a5 ->
                 case ds of wild { Language.Futhark.Syntax.NoInfo ->
                 GHC.Types.True }) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fFoldableNoInfo_$cproduct ::
    GHC.Num.Num a => Language.Futhark.Syntax.NoInfo a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),1*U(A,A,A,A,A,A,1*C1(U))><S,1*H>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fFoldableNoInfo1
                  `cast`
                (forall a5.
                 <GHC.Num.Num a5>_R
                 ->_R <Language.Futhark.Syntax.NoInfo a5>_R
                 ->_R Data.Monoid.NTCo:Product[0] <a5>_R) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fFoldableNoInfo_$csum ::
    GHC.Num.Num a => Language.Futhark.Syntax.NoInfo a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),1*U(A,A,A,A,A,A,1*C1(U))><S,1*H>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fFoldableNoInfo2
                  `cast`
                (forall a5.
                 <GHC.Num.Num a5>_R
                 ->_R <Language.Futhark.Syntax.NoInfo a5>_R
                 ->_R Data.Monoid.NTCo:Sum[0] <a5>_R) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fFoldableNoInfo_$ctoList ::
    Language.Futhark.Syntax.NoInfo a -> [a]
  {- Arity: 1, Strictness: <L,U>, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a5 t1 :: Language.Futhark.Syntax.NoInfo a5 ->
                 GHC.Base.build
                   @ a5
                   (\ @ b c :: a5 -> b -> b[OneShot] n :: b[OneShot] ->
                    Language.Futhark.Syntax.$fFoldableNoInfo_$cfoldr
                      @ a5
                      @ b
                      c
                      n
                      t1)) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fFoldableNoInfo_$s$dmfold ::
    GHC.Base.Monoid m => Language.Futhark.Syntax.NoInfo m -> m
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,A,A)><S,1*H>,
     Unfolding: InlineRule (-1, True, False)
                (\ @ m
                   $dMonoid :: GHC.Base.Monoid m
                   eta :: Language.Futhark.Syntax.NoInfo m ->
                 Language.Futhark.Syntax.$fFoldableNoInfo_$s$dmfoldMap
                   @ m
                   @ m
                   $dMonoid
                   (GHC.Base.id @ m)
                   eta) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fFoldableNoInfo_$s$dmfoldMap ::
    GHC.Base.Monoid m =>
    (a -> m) -> Language.Futhark.Syntax.NoInfo a -> m
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,A,A)><L,A><S,1*H>,
     Unfolding: InlineRule (-1, True, False)
                (\ @ a5
                   @ m
                   $dMonoid :: GHC.Base.Monoid m
                   f :: a5 -> m
                   eta :: Language.Futhark.Syntax.NoInfo a5 ->
                 Language.Futhark.Syntax.$fFoldableNoInfo_$cfoldr
                   @ a5
                   @ m
                   (let {
                      f1 :: m -> m -> m = GHC.Base.mappend @ m $dMonoid
                    } in
                    \ x :: a5 -> f1 (f x))
                   (GHC.Base.mempty @ m $dMonoid)
                   eta) -}
36b022f74c11b45b268c679b91cb8a0a
  $fFunctorInfo :: GHC.Base.Functor Language.Futhark.Syntax.Info
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.Info
                  Language.Futhark.Syntax.$fFunctorInfo_$cfmap
                  Language.Futhark.Syntax.$fFunctorInfo_$c<$ -}
36b022f74c11b45b268c679b91cb8a0a
  $fFunctorInfo1 :: a -> Language.Futhark.Syntax.Info b -> a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a5 @ b eta :: a5 eta1 :: Language.Futhark.Syntax.Info b ->
                 eta) -}
36b022f74c11b45b268c679b91cb8a0a
  $fFunctorInfo2 :: (a -> b) -> Language.Futhark.Syntax.Info a -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a5 @ b f :: a5 -> b ds :: Language.Futhark.Syntax.Info a5 ->
                 f ds `cast` (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)) -}
36b022f74c11b45b268c679b91cb8a0a
  $fFunctorInfo_$c<$ ::
    a
    -> Language.Futhark.Syntax.Info b -> Language.Futhark.Syntax.Info a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fFunctorInfo1
                  `cast`
                (forall a5 b.
                 <a5>_R
                 ->_R <Language.Futhark.Syntax.Info b>_R
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)) -}
36b022f74c11b45b268c679b91cb8a0a
  $fFunctorInfo_$cfmap ::
    (a -> b)
    -> Language.Futhark.Syntax.Info a -> Language.Futhark.Syntax.Info b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fFunctorInfo2
                  `cast`
                (forall a5 b.
                 <a5 -> b>_R
                 ->_R <Language.Futhark.Syntax.Info a5>_R
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <b>_R)) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fFunctorNoInfo :: GHC.Base.Functor Language.Futhark.Syntax.NoInfo
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.NoInfo
                  Language.Futhark.Syntax.$fFunctorNoInfo_$cfmap
                  Language.Futhark.Syntax.$fFunctorNoInfo_$c<$ -}
13904bef35c7220bfbb9b2885b4fa96a
  $fFunctorNoInfo_$c<$ ::
    a
    -> Language.Futhark.Syntax.NoInfo b
    -> Language.Futhark.Syntax.NoInfo a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a5 @ b eta :: a5 ds :: Language.Futhark.Syntax.NoInfo b ->
                 case ds of wild { Language.Futhark.Syntax.NoInfo ->
                 Language.Futhark.Syntax.NoInfo @ a5 }) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fFunctorNoInfo_$cfmap ::
    (a -> b)
    -> Language.Futhark.Syntax.NoInfo a
    -> Language.Futhark.Syntax.NoInfo b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a5
                   @ b
                   ds :: a5 -> b
                   ds1 :: Language.Futhark.Syntax.NoInfo a5 ->
                 case ds1 of wild { Language.Futhark.Syntax.NoInfo ->
                 Language.Futhark.Syntax.NoInfo @ b }) -}
922bd38dbf61b406ded790909459e61d
  $fHashableIdentBase ::
    Data.Hashable.Class.Hashable vn =>
    Data.Hashable.Class.Hashable
      (Language.Futhark.Syntax.IdentBase ty vn)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(U),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (ty :: * -> *)
                      @ vn
                      $dHashable :: Data.Hashable.Class.Hashable vn.
                  @ (Language.Futhark.Syntax.IdentBase ty vn)
                  (Language.Futhark.Syntax.$fHashableIdentBase_$chashWithSalt
                     @ ty
                     @ vn
                     $dHashable)
                  (Language.Futhark.Syntax.$fHashableIdentBase_$chash
                     @ ty
                     @ vn
                     $dHashable) -}
922bd38dbf61b406ded790909459e61d
  $fHashableIdentBase_$chash ::
    Data.Hashable.Class.Hashable vn =>
    Language.Futhark.Syntax.IdentBase ty vn -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(1*C1(U),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (ty :: * -> *)
                   @ vn
                   $dHashable :: Data.Hashable.Class.Hashable vn ->
                 Language.Futhark.Syntax.$fHashableIdentBase_$chashWithSalt
                   @ ty
                   @ vn
                   $dHashable
                   Data.Hashable.Class.defaultSalt) -}
922bd38dbf61b406ded790909459e61d
  $fHashableIdentBase_$chashWithSalt ::
    Data.Hashable.Class.Hashable vn =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.IdentBase ty vn -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(U),A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (ty :: * -> *)
                   @ vn
                   $dHashable :: Data.Hashable.Class.Hashable vn
                   salt :: GHC.Types.Int ->
                 let {
                   f :: vn -> GHC.Types.Int
                   = Data.Hashable.Class.hashWithSalt @ vn $dHashable salt
                 } in
                 \ x :: Language.Futhark.Syntax.IdentBase ty vn ->
                 f (case x of wild { Language.Futhark.Syntax.Ident ds ds1 ds2 ->
                    ds })) -}
3a9c647c4f90fbf4f3c0ed2a825c4fe2
  $fHashableParamBase ::
    Data.Hashable.Class.Hashable vn =>
    Data.Hashable.Class.Hashable
      (Language.Futhark.Syntax.ParamBase f vn)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(U),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *)
                      @ vn
                      $dHashable :: Data.Hashable.Class.Hashable vn.
                  @ (Language.Futhark.Syntax.ParamBase f vn)
                  (Language.Futhark.Syntax.$fHashableParamBase_$chashWithSalt
                     @ f
                     @ vn
                     $dHashable)
                  (Language.Futhark.Syntax.$fHashableParamBase_$chash
                     @ f
                     @ vn
                     $dHashable) -}
3a9c647c4f90fbf4f3c0ed2a825c4fe2
  $fHashableParamBase_$chash ::
    Data.Hashable.Class.Hashable vn =>
    Language.Futhark.Syntax.ParamBase f vn -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(1*C1(U),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dHashable :: Data.Hashable.Class.Hashable vn ->
                 Language.Futhark.Syntax.$fHashableParamBase_$chashWithSalt
                   @ f
                   @ vn
                   $dHashable
                   Data.Hashable.Class.defaultSalt) -}
3a9c647c4f90fbf4f3c0ed2a825c4fe2
  $fHashableParamBase_$chashWithSalt ::
    Data.Hashable.Class.Hashable vn =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.ParamBase f vn -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(U),A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dHashable :: Data.Hashable.Class.Hashable vn
                   salt :: GHC.Types.Int ->
                 let {
                   f1 :: vn -> GHC.Types.Int
                   = Data.Hashable.Class.hashWithSalt @ vn $dHashable salt
                 } in
                 \ x :: Language.Futhark.Syntax.ParamBase f vn ->
                 f1
                   (case x of wild { Language.Futhark.Syntax.Param ds ds1 ds2 ->
                    ds })) -}
970de88f5513e7faf9ba9d7c216b7e50
  $fLocatedExpBase ::
    Data.Loc.Located (Language.Futhark.Syntax.ExpBase f vn)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *) @ vn.
                  @ (Language.Futhark.Syntax.ExpBase f vn)
                  (Language.Futhark.Syntax.$fLocatedExpBase_$clocOf @ f @ vn)
                  (Language.Futhark.Syntax.$fLocatedExpBase_$clocOfList @ f @ vn) -}
970de88f5513e7faf9ba9d7c216b7e50
  $fLocatedExpBase_$clocOf ::
    Language.Futhark.Syntax.ExpBase f vn -> Data.Loc.Loc
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.ExpBase f vn ->
                 case ds of wild {
                   Language.Futhark.Syntax.Literal ds1 loc
                   -> loc `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.TupLit ds1 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.ArrayLit ds1 ds2 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Empty ds1 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Var ident
                   -> case ident of wild1 { Language.Futhark.Syntax.Ident ds1 ds2 ds3 ->
                      ds3 `cast` (Data.Loc.NTCo:SrcLoc[0]) }
                   Language.Futhark.Syntax.LetPat ds1 ds2 ds3 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.If ds1 ds2 ds3 ds4 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Apply ds1 ds2 ds3 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.DoLoop ds1 ds2 ds3 ds4 ds5 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.BinOp ds1 ds2 ds3 ds4 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.UnOp ds1 ds2 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.LetWith ds1 ds2 ds3 ds4 ds5 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Index ds1 ds2 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.TupleIndex ds1 ds2 ds3 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Size ds1 ds2 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Split ds1 ds2 ds3 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Concat ds1 ds2 ds3 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Copy ds1 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Iota ds1 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Replicate ds1 ds2 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Reshape ds1 ds2 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Transpose ds1 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Rearrange ds1 ds2 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Rotate ds1 ds2 ds3 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Map ds1 ds2 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Reduce ds1 ds2 ds3 ds4 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Scan ds1 ds2 ds3 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Filter ds1 ds2 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Partition ds1 ds2 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Stream ds1 ds2 ds3 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Write ds1 ds2 ds3 loc
                   -> loc `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Zip ds1 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Unzip ds1 ds2 pos
                   -> pos `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Unsafe ds1 loc
                   -> loc `cast` (Data.Loc.NTCo:SrcLoc[0]) }) -}
970de88f5513e7faf9ba9d7c216b7e50
  $fLocatedExpBase_$clocOfList ::
    [Language.Futhark.Syntax.ExpBase f vn] -> Data.Loc.Loc
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   xs :: [Language.Futhark.Syntax.ExpBase f vn] ->
                 Data.Loc.$dmlocOfList_go
                   (GHC.Base.build
                      @ Data.Loc.Loc
                      (\ @ b1 c :: Data.Loc.Loc -> b1 -> b1[OneShot] n :: b1[OneShot] ->
                       GHC.Base.foldr
                         @ (Language.Futhark.Syntax.ExpBase f vn)
                         @ b1
                         (GHC.Base.mapFB
                            @ Data.Loc.Loc
                            @ b1
                            @ (Language.Futhark.Syntax.ExpBase f vn)
                            c
                            (Language.Futhark.Syntax.$fLocatedExpBase_$clocOf @ f @ vn))
                         n
                         xs))) -}
922bd38dbf61b406ded790909459e61d
  $fLocatedIdentBase ::
    Data.Loc.Located (Language.Futhark.Syntax.IdentBase ty vn)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (ty :: * -> *) @ vn.
                  @ (Language.Futhark.Syntax.IdentBase ty vn)
                  (Language.Futhark.Syntax.$fLocatedIdentBase_$clocOf @ ty @ vn)
                  (Language.Futhark.Syntax.$fLocatedIdentBase_$clocOfList
                     @ ty
                     @ vn) -}
922bd38dbf61b406ded790909459e61d
  $fLocatedIdentBase_$clocOf ::
    Language.Futhark.Syntax.IdentBase ty vn -> Data.Loc.Loc
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (ty :: * -> *)
                   @ vn
                   x :: Language.Futhark.Syntax.IdentBase ty vn ->
                 case x of wild { Language.Futhark.Syntax.Ident ds ds1 ds2 ->
                 ds2 `cast` (Data.Loc.NTCo:SrcLoc[0]) }) -}
922bd38dbf61b406ded790909459e61d
  $fLocatedIdentBase_$clocOfList ::
    [Language.Futhark.Syntax.IdentBase ty vn] -> Data.Loc.Loc
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (ty :: * -> *)
                   @ vn
                   xs :: [Language.Futhark.Syntax.IdentBase ty vn] ->
                 Data.Loc.$dmlocOfList_go
                   (GHC.Base.build
                      @ Data.Loc.Loc
                      (\ @ b1 c :: Data.Loc.Loc -> b1 -> b1[OneShot] n :: b1[OneShot] ->
                       GHC.Base.foldr
                         @ (Language.Futhark.Syntax.IdentBase ty vn)
                         @ b1
                         (GHC.Base.mapFB
                            @ Data.Loc.Loc
                            @ b1
                            @ (Language.Futhark.Syntax.IdentBase ty vn)
                            c
                            (Language.Futhark.Syntax.$fLocatedIdentBase_$clocOf @ ty @ vn))
                         n
                         xs))) -}
970de88f5513e7faf9ba9d7c216b7e50
  $fLocatedLambdaBase ::
    Data.Loc.Located (Language.Futhark.Syntax.LambdaBase f vn)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *) @ vn.
                  @ (Language.Futhark.Syntax.LambdaBase f vn)
                  (Language.Futhark.Syntax.$fLocatedLambdaBase_$clocOf @ f @ vn)
                  (Language.Futhark.Syntax.$fLocatedLambdaBase_$clocOfList
                     @ f
                     @ vn) -}
970de88f5513e7faf9ba9d7c216b7e50
  $fLocatedLambdaBase_$clocOf ::
    Language.Futhark.Syntax.LambdaBase f vn -> Data.Loc.Loc
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.LambdaBase f vn ->
                 case ds of wild {
                   Language.Futhark.Syntax.AnonymFun ds1 ds2 ds3 loc
                   -> loc `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.CurryFun ds1 ds2 ds3 loc
                   -> loc `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.UnOpFun ds1 ds2 ds3 loc
                   -> loc `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.BinOpFun ds1 ds2 ds3 ds4 loc
                   -> loc `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.CurryBinOpLeft ds1 ds2 ds3 ds4 loc
                   -> loc `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.CurryBinOpRight ds1 ds2 ds3 ds4 loc
                   -> loc `cast` (Data.Loc.NTCo:SrcLoc[0]) }) -}
970de88f5513e7faf9ba9d7c216b7e50
  $fLocatedLambdaBase_$clocOfList ::
    [Language.Futhark.Syntax.LambdaBase f vn] -> Data.Loc.Loc
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   xs :: [Language.Futhark.Syntax.LambdaBase f vn] ->
                 Data.Loc.$dmlocOfList_go
                   (GHC.Base.build
                      @ Data.Loc.Loc
                      (\ @ b1 c :: Data.Loc.Loc -> b1 -> b1[OneShot] n :: b1[OneShot] ->
                       GHC.Base.foldr
                         @ (Language.Futhark.Syntax.LambdaBase f vn)
                         @ b1
                         (GHC.Base.mapFB
                            @ Data.Loc.Loc
                            @ b1
                            @ (Language.Futhark.Syntax.LambdaBase f vn)
                            c
                            (Language.Futhark.Syntax.$fLocatedLambdaBase_$clocOf @ f @ vn))
                         n
                         xs))) -}
3a9c647c4f90fbf4f3c0ed2a825c4fe2
  $fLocatedParamBase ::
    Data.Loc.Located (Language.Futhark.Syntax.ParamBase f vn)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *) @ vn.
                  @ (Language.Futhark.Syntax.ParamBase f vn)
                  (Language.Futhark.Syntax.$fLocatedParamBase_$clocOf @ f @ vn)
                  (Language.Futhark.Syntax.$fLocatedParamBase_$clocOfList
                     @ f
                     @ vn) -}
3a9c647c4f90fbf4f3c0ed2a825c4fe2
  $fLocatedParamBase_$clocOf ::
    Language.Futhark.Syntax.ParamBase f vn -> Data.Loc.Loc
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   x :: Language.Futhark.Syntax.ParamBase f vn ->
                 case x of wild { Language.Futhark.Syntax.Param ds ds1 ds2 ->
                 ds2 `cast` (Data.Loc.NTCo:SrcLoc[0]) }) -}
3a9c647c4f90fbf4f3c0ed2a825c4fe2
  $fLocatedParamBase_$clocOfList ::
    [Language.Futhark.Syntax.ParamBase f vn] -> Data.Loc.Loc
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   xs :: [Language.Futhark.Syntax.ParamBase f vn] ->
                 Data.Loc.$dmlocOfList_go
                   (GHC.Base.build
                      @ Data.Loc.Loc
                      (\ @ b1 c :: Data.Loc.Loc -> b1 -> b1[OneShot] n :: b1[OneShot] ->
                       GHC.Base.foldr
                         @ (Language.Futhark.Syntax.ParamBase f vn)
                         @ b1
                         (GHC.Base.mapFB
                            @ Data.Loc.Loc
                            @ b1
                            @ (Language.Futhark.Syntax.ParamBase f vn)
                            c
                            (Language.Futhark.Syntax.$fLocatedParamBase_$clocOf @ f @ vn))
                         n
                         xs))) -}
a287655e57bb05ee92e568d795ff4dac
  $fLocatedPatternBase ::
    Data.Loc.Located (Language.Futhark.Syntax.PatternBase f vn)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *) @ vn.
                  @ (Language.Futhark.Syntax.PatternBase f vn)
                  (Language.Futhark.Syntax.$fLocatedPatternBase_$clocOf @ f @ vn)
                  (Language.Futhark.Syntax.$fLocatedPatternBase_$clocOfList
                     @ f
                     @ vn) -}
a287655e57bb05ee92e568d795ff4dac
  $fLocatedPatternBase_$clocOf ::
    Language.Futhark.Syntax.PatternBase f vn -> Data.Loc.Loc
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.PatternBase f vn ->
                 case ds of wild {
                   Language.Futhark.Syntax.TuplePattern ds1 loc
                   -> loc `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.Id ident
                   -> case ident of wild1 { Language.Futhark.Syntax.Ident ds1 ds2 ds3 ->
                      ds3 `cast` (Data.Loc.NTCo:SrcLoc[0]) }
                   Language.Futhark.Syntax.Wildcard ds1 loc
                   -> loc `cast` (Data.Loc.NTCo:SrcLoc[0]) }) -}
a287655e57bb05ee92e568d795ff4dac
  $fLocatedPatternBase_$clocOfList ::
    [Language.Futhark.Syntax.PatternBase f vn] -> Data.Loc.Loc
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   xs :: [Language.Futhark.Syntax.PatternBase f vn] ->
                 Data.Loc.$dmlocOfList_go
                   (GHC.Base.build
                      @ Data.Loc.Loc
                      (\ @ b1 c :: Data.Loc.Loc -> b1 -> b1[OneShot] n :: b1[OneShot] ->
                       GHC.Base.foldr
                         @ (Language.Futhark.Syntax.PatternBase f vn)
                         @ b1
                         (GHC.Base.mapFB
                            @ Data.Loc.Loc
                            @ b1
                            @ (Language.Futhark.Syntax.PatternBase f vn)
                            c
                            (Language.Futhark.Syntax.$fLocatedPatternBase_$clocOf @ f @ vn))
                         n
                         xs))) -}
2da1e54d830a3cc0c1b5c70a77ffb606
  $fLocatedTypeDefBase ::
    Data.Loc.Located (Language.Futhark.Syntax.TypeDefBase f vn)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *) @ vn.
                  @ (Language.Futhark.Syntax.TypeDefBase f vn)
                  (Language.Futhark.Syntax.$fLocatedTypeDefBase_$clocOf @ f @ vn)
                  (Language.Futhark.Syntax.$fLocatedTypeDefBase_$clocOfList
                     @ f
                     @ vn) -}
2da1e54d830a3cc0c1b5c70a77ffb606
  $fLocatedTypeDefBase_$clocOf ::
    Language.Futhark.Syntax.TypeDefBase f vn -> Data.Loc.Loc
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   x :: Language.Futhark.Syntax.TypeDefBase f vn ->
                 case x of wild { Language.Futhark.Syntax.TypeDef ds ds1 ds2 ->
                 ds2 `cast` (Data.Loc.NTCo:SrcLoc[0]) }) -}
2da1e54d830a3cc0c1b5c70a77ffb606
  $fLocatedTypeDefBase_$clocOfList ::
    [Language.Futhark.Syntax.TypeDefBase f vn] -> Data.Loc.Loc
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   xs :: [Language.Futhark.Syntax.TypeDefBase f vn] ->
                 Data.Loc.$dmlocOfList_go
                   (GHC.Base.build
                      @ Data.Loc.Loc
                      (\ @ b1 c :: Data.Loc.Loc -> b1 -> b1[OneShot] n :: b1[OneShot] ->
                       GHC.Base.foldr
                         @ (Language.Futhark.Syntax.TypeDefBase f vn)
                         @ b1
                         (GHC.Base.mapFB
                            @ Data.Loc.Loc
                            @ b1
                            @ (Language.Futhark.Syntax.TypeDefBase f vn)
                            c
                            (Language.Futhark.Syntax.$fLocatedTypeDefBase_$clocOf @ f @ vn))
                         n
                         xs))) -}
5e7052041c39992b8ea65ca85f152e71
  $fLocatedUserType ::
    Data.Loc.Located (Language.Futhark.Syntax.UserType vn)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ vn.
                  @ (Language.Futhark.Syntax.UserType vn)
                  (Language.Futhark.Syntax.$fLocatedUserType_$clocOf @ vn)
                  (Language.Futhark.Syntax.$fLocatedUserType_$clocOfList @ vn) -}
5e7052041c39992b8ea65ca85f152e71
  $fLocatedUserType_$clocOf ::
    Language.Futhark.Syntax.UserType vn -> Data.Loc.Loc
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ vn ds :: Language.Futhark.Syntax.UserType vn ->
                 case ds of wild {
                   Language.Futhark.Syntax.UserPrim ds1 loc
                   -> loc `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.UserArray ds1 ds2 loc
                   -> loc `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.UserTuple ds1 loc
                   -> loc `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.UserTypeAlias ds1 loc
                   -> loc `cast` (Data.Loc.NTCo:SrcLoc[0])
                   Language.Futhark.Syntax.UserUnique ds1 loc
                   -> loc `cast` (Data.Loc.NTCo:SrcLoc[0]) }) -}
5e7052041c39992b8ea65ca85f152e71
  $fLocatedUserType_$clocOfList ::
    [Language.Futhark.Syntax.UserType vn] -> Data.Loc.Loc
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ vn xs :: [Language.Futhark.Syntax.UserType vn] ->
                 Data.Loc.$dmlocOfList_go
                   (GHC.Base.build
                      @ Data.Loc.Loc
                      (\ @ b1 c :: Data.Loc.Loc -> b1 -> b1[OneShot] n :: b1[OneShot] ->
                       GHC.Base.foldr
                         @ (Language.Futhark.Syntax.UserType vn)
                         @ b1
                         (GHC.Base.mapFB
                            @ Data.Loc.Loc
                            @ b1
                            @ (Language.Futhark.Syntax.UserType vn)
                            c
                            (Language.Futhark.Syntax.$fLocatedUserType_$clocOf @ vn))
                         n
                         xs))) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fMonoidNoInfo ::
    GHC.Base.Monoid (Language.Futhark.Syntax.NoInfo a)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a5.
                  @ (Language.Futhark.Syntax.NoInfo a5)
                  (Language.Futhark.Syntax.NoInfo @ a5)
                  (Language.Futhark.Syntax.$fMonoidNoInfo_$cmappend @ a5)
                  (Language.Futhark.Syntax.$fMonoidNoInfo_$cmconcat @ a5) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fMonoidNoInfo_$cmappend ::
    Language.Futhark.Syntax.NoInfo a
    -> Language.Futhark.Syntax.NoInfo a
    -> Language.Futhark.Syntax.NoInfo a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a5
                   ds :: Language.Futhark.Syntax.NoInfo a5
                   ds1 :: Language.Futhark.Syntax.NoInfo a5 ->
                 Language.Futhark.Syntax.NoInfo @ a5) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fMonoidNoInfo_$cmconcat ::
    [Language.Futhark.Syntax.NoInfo a]
    -> Language.Futhark.Syntax.NoInfo a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a5 eta :: [Language.Futhark.Syntax.NoInfo a5] ->
                 case eta of wild { DEFAULT ->
                 Language.Futhark.Syntax.NoInfo @ a5 }) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fMonoidRank :: GHC.Base.Monoid (Language.Futhark.Syntax.Rank vn)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ vn.
                  @ (Language.Futhark.Syntax.Rank vn)
                  (Language.Futhark.Syntax.$fMonoidRank_$cmempty @ vn)
                  (Language.Futhark.Syntax.$fMonoidRank_$cmappend @ vn)
                  (Language.Futhark.Syntax.$fMonoidRank_$cmconcat @ vn) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fMonoidRank1 :: [Language.Futhark.Syntax.Rank vn] -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
7a74fb247e0302d6f92110f5fb7a641c
  $fMonoidRank2 ::
    Language.Futhark.Syntax.Rank vn
    -> Language.Futhark.Syntax.Rank vn -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (2, True, True)
                (\ @ vn
                   ds :: Language.Futhark.Syntax.Rank vn
                   ds1 :: Language.Futhark.Syntax.Rank vn ->
                 GHC.Num.$fNumInt_$c+
                   ds `cast` (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)
                   ds1 `cast` (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fMonoidRank_$cmappend ::
    Language.Futhark.Syntax.Rank vn
    -> Language.Futhark.Syntax.Rank vn
    -> Language.Futhark.Syntax.Rank vn
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fMonoidRank2
                  `cast`
                (forall vn.
                 <Language.Futhark.Syntax.Rank vn>_R
                 ->_R <Language.Futhark.Syntax.Rank vn>_R
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fMonoidRank_$cmconcat ::
    [Language.Futhark.Syntax.Rank vn]
    -> Language.Futhark.Syntax.Rank vn
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ vn w :: [Language.Futhark.Syntax.Rank vn] ->
                 case Language.Futhark.Syntax.$fMonoidRank1
                        @ vn
                        w of ww { DEFAULT ->
                 (GHC.Types.I# ww)
                   `cast`
                 (Sym (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)) }) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fMonoidRank_$cmempty :: Language.Futhark.Syntax.Rank vn
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (\ @ vn -> Language.Futhark.Syntax.$fFoldableNoInfo4)
                  `cast`
                (forall vn. Sym (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)) -}
23c47b362b456c0c51d94a86b9652b66
  $fMonoidShapeDecl ::
    GHC.Base.Monoid (Language.Futhark.Syntax.ShapeDecl vn)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ vn.
                  @ (Language.Futhark.Syntax.ShapeDecl vn)
                  (GHC.Types.[] @ (Language.Futhark.Syntax.DimDecl vn))
                    `cast`
                  (Sym (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R))
                  (Language.Futhark.Syntax.$fMonoidShapeDecl_$cmappend @ vn)
                  (Language.Futhark.Syntax.$fMonoidShapeDecl_$cmconcat @ vn) -}
23c47b362b456c0c51d94a86b9652b66
  $fMonoidShapeDecl1 ::
    [Language.Futhark.Syntax.ShapeDecl vn]
    -> Language.Futhark.Syntax.ShapeDecl vn
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
23c47b362b456c0c51d94a86b9652b66
  $fMonoidShapeDecl2 ::
    Language.Futhark.Syntax.ShapeDecl vn
    -> Language.Futhark.Syntax.ShapeDecl vn
    -> [Language.Futhark.Syntax.DimDecl vn]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ vn
                   ds :: Language.Futhark.Syntax.ShapeDecl vn
                   ds1 :: Language.Futhark.Syntax.ShapeDecl vn ->
                 GHC.Base.augment
                   @ (Language.Futhark.Syntax.DimDecl vn)
                   (\ @ b
                      c :: Language.Futhark.Syntax.DimDecl vn -> b -> b[OneShot]
                      n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ (Language.Futhark.Syntax.DimDecl vn)
                      @ b
                      c
                      n
                      ds `cast` (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R))
                   ds1 `cast` (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R)) -}
23c47b362b456c0c51d94a86b9652b66
  $fMonoidShapeDecl_$cmappend ::
    Language.Futhark.Syntax.ShapeDecl vn
    -> Language.Futhark.Syntax.ShapeDecl vn
    -> Language.Futhark.Syntax.ShapeDecl vn
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fMonoidShapeDecl2
                  `cast`
                (forall vn.
                 <Language.Futhark.Syntax.ShapeDecl vn>_R
                 ->_R <Language.Futhark.Syntax.ShapeDecl vn>_R
                 ->_R Sym (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R)) -}
23c47b362b456c0c51d94a86b9652b66
  $fMonoidShapeDecl_$cmconcat ::
    [Language.Futhark.Syntax.ShapeDecl vn]
    -> Language.Futhark.Syntax.ShapeDecl vn
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ vn eta :: [Language.Futhark.Syntax.ShapeDecl vn] ->
                 Language.Futhark.Syntax.$fMonoidShapeDecl1 @ vn eta) -}
d07c5b7b353387a89237c9062561c998
  $fOrdBinOp :: GHC.Classes.Ord Language.Futhark.Syntax.BinOp
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.BinOp
                  Language.Futhark.Syntax.$fEqBinOp
                  Language.Futhark.Syntax.$fOrdBinOp_$ccompare
                  Language.Futhark.Syntax.$fOrdBinOp_$c<
                  Language.Futhark.Syntax.$fOrdBinOp_$c<=
                  Language.Futhark.Syntax.$fOrdBinOp_$c>
                  Language.Futhark.Syntax.$fOrdBinOp_$c>=
                  Language.Futhark.Syntax.$fOrdBinOp_$cmax
                  Language.Futhark.Syntax.$fOrdBinOp_$cmin -}
d07c5b7b353387a89237c9062561c998
  $fOrdBinOp_$c< ::
    Language.Futhark.Syntax.BinOp
    -> Language.Futhark.Syntax.BinOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a5 :: Language.Futhark.Syntax.BinOp
                   b :: Language.Futhark.Syntax.BinOp ->
                 case a5 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<#
                      (GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x1)
                      (GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x2)) } }) -}
d07c5b7b353387a89237c9062561c998
  $fOrdBinOp_$c<= ::
    Language.Futhark.Syntax.BinOp
    -> Language.Futhark.Syntax.BinOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a5 :: Language.Futhark.Syntax.BinOp
                   b :: Language.Futhark.Syntax.BinOp ->
                 case a5 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<=#
                      (GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x1)
                      (GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x2)) } }) -}
d07c5b7b353387a89237c9062561c998
  $fOrdBinOp_$c> ::
    Language.Futhark.Syntax.BinOp
    -> Language.Futhark.Syntax.BinOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a5 :: Language.Futhark.Syntax.BinOp
                   b :: Language.Futhark.Syntax.BinOp ->
                 case a5 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.>#
                      (GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x1)
                      (GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x2)) } }) -}
d07c5b7b353387a89237c9062561c998
  $fOrdBinOp_$c>= ::
    Language.Futhark.Syntax.BinOp
    -> Language.Futhark.Syntax.BinOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a5 :: Language.Futhark.Syntax.BinOp
                   b :: Language.Futhark.Syntax.BinOp ->
                 case a5 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.>=#
                      (GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x1)
                      (GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x2)) } }) -}
d07c5b7b353387a89237c9062561c998
  $fOrdBinOp_$ccompare ::
    Language.Futhark.Syntax.BinOp
    -> Language.Futhark.Syntax.BinOp -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a5 :: Language.Futhark.Syntax.BinOp
                   b :: Language.Futhark.Syntax.BinOp ->
                 case a5 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 let {
                   b# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x2
                 } in
                 let {
                   a# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.EQ }
                   GHC.Types.True -> GHC.Types.LT } } }) -}
d07c5b7b353387a89237c9062561c998
  $fOrdBinOp_$cmax ::
    Language.Futhark.Syntax.BinOp
    -> Language.Futhark.Syntax.BinOp -> Language.Futhark.Syntax.BinOp
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Language.Futhark.Syntax.BinOp
                   y :: Language.Futhark.Syntax.BinOp ->
                 case x of x1 { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=#
                           (GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x1)
                           (GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x2)) of wild {
                   GHC.Types.False -> x1 GHC.Types.True -> x2 } } }) -}
d07c5b7b353387a89237c9062561c998
  $fOrdBinOp_$cmin ::
    Language.Futhark.Syntax.BinOp
    -> Language.Futhark.Syntax.BinOp -> Language.Futhark.Syntax.BinOp
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Language.Futhark.Syntax.BinOp
                   y :: Language.Futhark.Syntax.BinOp ->
                 case x of x1 { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=#
                           (GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x1)
                           (GHC.Prim.dataToTag# @ Language.Futhark.Syntax.BinOp x2)) of wild {
                   GHC.Types.False -> x2 GHC.Types.True -> x1 } } }) -}
db30d13db6ddfb68145b68842fcdae94
  $fOrdDiet :: GHC.Classes.Ord Language.Futhark.Syntax.Diet
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.Diet
                  Language.Futhark.Syntax.$fEqDiet
                  Language.Futhark.Syntax.$fOrdDiet_$ccompare
                  Language.Futhark.Syntax.$fOrdDiet_$c<
                  Language.Futhark.Syntax.$fOrdDiet_$c<=
                  Language.Futhark.Syntax.$fOrdDiet_$c>
                  Language.Futhark.Syntax.$fOrdDiet_$c>=
                  Language.Futhark.Syntax.$fOrdDiet_$cmax
                  Language.Futhark.Syntax.$fOrdDiet_$cmin -}
db30d13db6ddfb68145b68842fcdae94
  $fOrdDiet_$c< ::
    Language.Futhark.Syntax.Diet
    -> Language.Futhark.Syntax.Diet -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
db30d13db6ddfb68145b68842fcdae94
  $fOrdDiet_$c<= ::
    Language.Futhark.Syntax.Diet
    -> Language.Futhark.Syntax.Diet -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
db30d13db6ddfb68145b68842fcdae94
  $fOrdDiet_$c> ::
    Language.Futhark.Syntax.Diet
    -> Language.Futhark.Syntax.Diet -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
db30d13db6ddfb68145b68842fcdae94
  $fOrdDiet_$c>= ::
    Language.Futhark.Syntax.Diet
    -> Language.Futhark.Syntax.Diet -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
db30d13db6ddfb68145b68842fcdae94
  $fOrdDiet_$ccompare ::
    Language.Futhark.Syntax.Diet
    -> Language.Futhark.Syntax.Diet -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
db30d13db6ddfb68145b68842fcdae94
  $fOrdDiet_$cmax ::
    Language.Futhark.Syntax.Diet
    -> Language.Futhark.Syntax.Diet -> Language.Futhark.Syntax.Diet
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U> -}
db30d13db6ddfb68145b68842fcdae94
  $fOrdDiet_$cmin ::
    Language.Futhark.Syntax.Diet
    -> Language.Futhark.Syntax.Diet -> Language.Futhark.Syntax.Diet
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U> -}
1e77a56c44dbb158500633823a0c068b
  $fOrdDimDecl ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.DimDecl vn),
     GHC.Classes.Ord vn) =>
    GHC.Classes.Ord (Language.Futhark.Syntax.DimDecl vn)
  DFunId[1]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U><L,U(A,C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ vn
                      $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.DimDecl vn)
                      $dOrd :: GHC.Classes.Ord vn.
                  @ (Language.Futhark.Syntax.DimDecl vn)
                  $dEq
                  (Language.Futhark.Syntax.$fOrdDimDecl_$ccompare @ vn $dEq $dOrd)
                  (Language.Futhark.Syntax.$fOrdDimDecl_$c< @ vn $dEq $dOrd)
                  (Language.Futhark.Syntax.$fOrdDimDecl_$c<= @ vn $dEq $dOrd)
                  (Language.Futhark.Syntax.$fOrdDimDecl_$c> @ vn $dEq $dOrd)
                  (Language.Futhark.Syntax.$fOrdDimDecl_$c>= @ vn $dEq $dOrd)
                  (Language.Futhark.Syntax.$fOrdDimDecl_$cmax @ vn $dEq $dOrd)
                  (Language.Futhark.Syntax.$fOrdDimDecl_$cmin @ vn $dEq $dOrd) -}
1e77a56c44dbb158500633823a0c068b
  $fOrdDimDecl_$c< ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.DimDecl vn),
     GHC.Classes.Ord vn) =>
    Language.Futhark.Syntax.DimDecl vn
    -> Language.Futhark.Syntax.DimDecl vn -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ @ vn
                   w :: GHC.Classes.Eq (Language.Futhark.Syntax.DimDecl vn)
                   w1 :: GHC.Classes.Ord vn
                   w2 :: Language.Futhark.Syntax.DimDecl vn
                   w3 :: Language.Futhark.Syntax.DimDecl vn ->
                 Language.Futhark.Syntax.$w$c< @ vn w1 w2 w3) -}
1e77a56c44dbb158500633823a0c068b
  $fOrdDimDecl_$c<= ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.DimDecl vn),
     GHC.Classes.Ord vn) =>
    Language.Futhark.Syntax.DimDecl vn
    -> Language.Futhark.Syntax.DimDecl vn -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><L,1*U(A,A,A,1*C1(C1(U)),A,A,A,A)><S,1*U><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ @ vn
                   w :: GHC.Classes.Eq (Language.Futhark.Syntax.DimDecl vn)
                   w1 :: GHC.Classes.Ord vn
                   w2 :: Language.Futhark.Syntax.DimDecl vn
                   w3 :: Language.Futhark.Syntax.DimDecl vn ->
                 Language.Futhark.Syntax.$w$c<= @ vn w1 w2 w3) -}
1e77a56c44dbb158500633823a0c068b
  $fOrdDimDecl_$c> ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.DimDecl vn),
     GHC.Classes.Ord vn) =>
    Language.Futhark.Syntax.DimDecl vn
    -> Language.Futhark.Syntax.DimDecl vn -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><L,1*U(A,A,A,A,1*C1(C1(U)),A,A,A)><S,1*U><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ @ vn
                   w :: GHC.Classes.Eq (Language.Futhark.Syntax.DimDecl vn)
                   w1 :: GHC.Classes.Ord vn
                   w2 :: Language.Futhark.Syntax.DimDecl vn
                   w3 :: Language.Futhark.Syntax.DimDecl vn ->
                 Language.Futhark.Syntax.$w$c> @ vn w1 w2 w3) -}
1e77a56c44dbb158500633823a0c068b
  $fOrdDimDecl_$c>= ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.DimDecl vn),
     GHC.Classes.Ord vn) =>
    Language.Futhark.Syntax.DimDecl vn
    -> Language.Futhark.Syntax.DimDecl vn -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><L,1*U(A,A,A,A,A,1*C1(C1(U)),A,A)><S,1*U><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ @ vn
                   w :: GHC.Classes.Eq (Language.Futhark.Syntax.DimDecl vn)
                   w1 :: GHC.Classes.Ord vn
                   w2 :: Language.Futhark.Syntax.DimDecl vn
                   w3 :: Language.Futhark.Syntax.DimDecl vn ->
                 Language.Futhark.Syntax.$w$c>= @ vn w1 w2 w3) -}
1e77a56c44dbb158500633823a0c068b
  $fOrdDimDecl_$ccompare ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.DimDecl vn),
     GHC.Classes.Ord vn) =>
    Language.Futhark.Syntax.DimDecl vn
    -> Language.Futhark.Syntax.DimDecl vn -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,1*U><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ @ vn
                   w :: GHC.Classes.Eq (Language.Futhark.Syntax.DimDecl vn)
                   w1 :: GHC.Classes.Ord vn
                   w2 :: Language.Futhark.Syntax.DimDecl vn
                   w3 :: Language.Futhark.Syntax.DimDecl vn ->
                 Language.Futhark.Syntax.$w$ccompare @ vn w1 w2 w3) -}
1e77a56c44dbb158500633823a0c068b
  $fOrdDimDecl_$cmax ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.DimDecl vn),
     GHC.Classes.Ord vn) =>
    Language.Futhark.Syntax.DimDecl vn
    -> Language.Futhark.Syntax.DimDecl vn
    -> Language.Futhark.Syntax.DimDecl vn
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><L,1*U(A,A,A,1*C1(C1(U)),A,A,A,A)><S,1*U><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ @ vn
                   w :: GHC.Classes.Eq (Language.Futhark.Syntax.DimDecl vn)
                   w1 :: GHC.Classes.Ord vn
                   w2 :: Language.Futhark.Syntax.DimDecl vn
                   w3 :: Language.Futhark.Syntax.DimDecl vn ->
                 Language.Futhark.Syntax.$w$cmax @ vn w1 w2 w3) -}
1e77a56c44dbb158500633823a0c068b
  $fOrdDimDecl_$cmin ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.DimDecl vn),
     GHC.Classes.Ord vn) =>
    Language.Futhark.Syntax.DimDecl vn
    -> Language.Futhark.Syntax.DimDecl vn
    -> Language.Futhark.Syntax.DimDecl vn
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><L,1*U(A,A,A,1*C1(C1(U)),A,A,A,A)><S,1*U><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ @ vn
                   w :: GHC.Classes.Eq (Language.Futhark.Syntax.DimDecl vn)
                   w1 :: GHC.Classes.Ord vn
                   w2 :: Language.Futhark.Syntax.DimDecl vn
                   w3 :: Language.Futhark.Syntax.DimDecl vn ->
                 Language.Futhark.Syntax.$w$cmin @ vn w1 w2 w3) -}
6a7e7f623049cf90a3840b9e074fa90f
  $fOrdForLoopDirection ::
    GHC.Classes.Ord Language.Futhark.Syntax.ForLoopDirection
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.ForLoopDirection
                  Language.Futhark.Syntax.$fEqForLoopDirection
                  Language.Futhark.Syntax.$fOrdForLoopDirection_$ccompare
                  Language.Futhark.Syntax.$fOrdForLoopDirection_$c<
                  Language.Futhark.Syntax.$fOrdForLoopDirection_$c<=
                  Language.Futhark.Syntax.$fOrdForLoopDirection_$c>
                  Language.Futhark.Syntax.$fOrdForLoopDirection_$c>=
                  Language.Futhark.Syntax.$fOrdForLoopDirection_$cmax
                  Language.Futhark.Syntax.$fOrdForLoopDirection_$cmin -}
6a7e7f623049cf90a3840b9e074fa90f
  $fOrdForLoopDirection_$c< ::
    Language.Futhark.Syntax.ForLoopDirection
    -> Language.Futhark.Syntax.ForLoopDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a5 :: Language.Futhark.Syntax.ForLoopDirection
                   b :: Language.Futhark.Syntax.ForLoopDirection ->
                 case a5 of wild {
                   Language.Futhark.Syntax.FromUpTo
                   -> case b of wild1 {
                        Language.Futhark.Syntax.FromUpTo -> GHC.Types.False
                        Language.Futhark.Syntax.FromDownTo -> GHC.Types.True }
                   Language.Futhark.Syntax.FromDownTo
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
6a7e7f623049cf90a3840b9e074fa90f
  $fOrdForLoopDirection_$c<= ::
    Language.Futhark.Syntax.ForLoopDirection
    -> Language.Futhark.Syntax.ForLoopDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a5 :: Language.Futhark.Syntax.ForLoopDirection
                   b :: Language.Futhark.Syntax.ForLoopDirection ->
                 case a5 of wild {
                   Language.Futhark.Syntax.FromUpTo
                   -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   Language.Futhark.Syntax.FromDownTo
                   -> case b of wild1 {
                        Language.Futhark.Syntax.FromUpTo -> GHC.Types.False
                        Language.Futhark.Syntax.FromDownTo -> GHC.Types.True } }) -}
6a7e7f623049cf90a3840b9e074fa90f
  $fOrdForLoopDirection_$c> ::
    Language.Futhark.Syntax.ForLoopDirection
    -> Language.Futhark.Syntax.ForLoopDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a5 :: Language.Futhark.Syntax.ForLoopDirection
                   b :: Language.Futhark.Syntax.ForLoopDirection ->
                 case a5 of wild {
                   Language.Futhark.Syntax.FromUpTo
                   -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   Language.Futhark.Syntax.FromDownTo
                   -> case b of wild1 {
                        Language.Futhark.Syntax.FromUpTo -> GHC.Types.True
                        Language.Futhark.Syntax.FromDownTo -> GHC.Types.False } }) -}
6a7e7f623049cf90a3840b9e074fa90f
  $fOrdForLoopDirection_$c>= ::
    Language.Futhark.Syntax.ForLoopDirection
    -> Language.Futhark.Syntax.ForLoopDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a5 :: Language.Futhark.Syntax.ForLoopDirection
                   b :: Language.Futhark.Syntax.ForLoopDirection ->
                 case a5 of wild {
                   Language.Futhark.Syntax.FromUpTo
                   -> case b of wild1 {
                        Language.Futhark.Syntax.FromUpTo -> GHC.Types.True
                        Language.Futhark.Syntax.FromDownTo -> GHC.Types.False }
                   Language.Futhark.Syntax.FromDownTo
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
6a7e7f623049cf90a3840b9e074fa90f
  $fOrdForLoopDirection_$ccompare ::
    Language.Futhark.Syntax.ForLoopDirection
    -> Language.Futhark.Syntax.ForLoopDirection -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a5 :: Language.Futhark.Syntax.ForLoopDirection
                   b :: Language.Futhark.Syntax.ForLoopDirection ->
                 case a5 of wild {
                   Language.Futhark.Syntax.FromUpTo
                   -> case b of wild1 {
                        Language.Futhark.Syntax.FromUpTo -> GHC.Types.EQ
                        Language.Futhark.Syntax.FromDownTo -> GHC.Types.LT }
                   Language.Futhark.Syntax.FromDownTo
                   -> case b of wild1 {
                        Language.Futhark.Syntax.FromUpTo -> GHC.Types.GT
                        Language.Futhark.Syntax.FromDownTo -> GHC.Types.EQ } }) -}
6a7e7f623049cf90a3840b9e074fa90f
  $fOrdForLoopDirection_$cmax ::
    Language.Futhark.Syntax.ForLoopDirection
    -> Language.Futhark.Syntax.ForLoopDirection
    -> Language.Futhark.Syntax.ForLoopDirection
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Language.Futhark.Syntax.ForLoopDirection
                   y :: Language.Futhark.Syntax.ForLoopDirection ->
                 case x of wild {
                   Language.Futhark.Syntax.FromUpTo -> y
                   Language.Futhark.Syntax.FromDownTo
                   -> case y of wild1 { DEFAULT ->
                      Language.Futhark.Syntax.FromDownTo } }) -}
6a7e7f623049cf90a3840b9e074fa90f
  $fOrdForLoopDirection_$cmin ::
    Language.Futhark.Syntax.ForLoopDirection
    -> Language.Futhark.Syntax.ForLoopDirection
    -> Language.Futhark.Syntax.ForLoopDirection
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Language.Futhark.Syntax.ForLoopDirection
                   y :: Language.Futhark.Syntax.ForLoopDirection ->
                 case x of wild {
                   Language.Futhark.Syntax.FromUpTo
                   -> case y of wild1 { DEFAULT -> Language.Futhark.Syntax.FromUpTo }
                   Language.Futhark.Syntax.FromDownTo -> y }) -}
36b022f74c11b45b268c679b91cb8a0a
  $fOrdInfo ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.Info a),
     GHC.Classes.Ord a) =>
    GHC.Classes.Ord (Language.Futhark.Syntax.Info a)
  DFunId[1]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U><L,U(A,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a5
                      $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.Info a5)
                      $dOrd :: GHC.Classes.Ord a5.
                  @ (Language.Futhark.Syntax.Info a5)
                  $dEq
                  (Language.Futhark.Syntax.$fOrdInfo_$ccompare @ a5 $dEq $dOrd)
                  (Language.Futhark.Syntax.$fOrdInfo_$c< @ a5 $dEq $dOrd)
                  (Language.Futhark.Syntax.$fOrdInfo_$c<= @ a5 $dEq $dOrd)
                  (Language.Futhark.Syntax.$fOrdInfo_$c> @ a5 $dEq $dOrd)
                  (Language.Futhark.Syntax.$fOrdInfo_$c>= @ a5 $dEq $dOrd)
                  (Language.Futhark.Syntax.$fOrdInfo_$cmax @ a5 $dEq $dOrd)
                  (Language.Futhark.Syntax.$fOrdInfo_$cmin @ a5 $dEq $dOrd) -}
36b022f74c11b45b268c679b91cb8a0a
  $fOrdInfo1 ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.Info a),
     GHC.Classes.Ord a) =>
    a -> a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><S(LLLLLLLS),1*U(A,A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a5
                   $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.Info a5)
                   $dOrd :: GHC.Classes.Ord a5 ->
                 GHC.Classes.min @ a5 $dOrd) -}
36b022f74c11b45b268c679b91cb8a0a
  $fOrdInfo2 ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.Info a),
     GHC.Classes.Ord a) =>
    a -> a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><S(LLLLLLSL),1*U(A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a5
                   $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.Info a5)
                   $dOrd :: GHC.Classes.Ord a5 ->
                 GHC.Classes.max @ a5 $dOrd) -}
36b022f74c11b45b268c679b91cb8a0a
  $fOrdInfo3 ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.Info a),
     GHC.Classes.Ord a) =>
    a -> a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><S(LLLLLSLL),1*U(A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a5
                   $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.Info a5)
                   $dOrd :: GHC.Classes.Ord a5 ->
                 GHC.Classes.>= @ a5 $dOrd) -}
36b022f74c11b45b268c679b91cb8a0a
  $fOrdInfo4 ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.Info a),
     GHC.Classes.Ord a) =>
    a -> a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><S(LLLLSLLL),1*U(A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a5
                   $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.Info a5)
                   $dOrd :: GHC.Classes.Ord a5 ->
                 GHC.Classes.> @ a5 $dOrd) -}
36b022f74c11b45b268c679b91cb8a0a
  $fOrdInfo5 ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.Info a),
     GHC.Classes.Ord a) =>
    a -> a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><S(LLLSLLLL),1*U(A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a5
                   $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.Info a5)
                   $dOrd :: GHC.Classes.Ord a5 ->
                 GHC.Classes.<= @ a5 $dOrd) -}
36b022f74c11b45b268c679b91cb8a0a
  $fOrdInfo6 ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.Info a),
     GHC.Classes.Ord a) =>
    a -> a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><S(LLSLLLLL),1*U(A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a5
                   $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.Info a5)
                   $dOrd :: GHC.Classes.Ord a5 ->
                 GHC.Classes.< @ a5 $dOrd) -}
36b022f74c11b45b268c679b91cb8a0a
  $fOrdInfo7 ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.Info a),
     GHC.Classes.Ord a) =>
    a -> a -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><S(LSLLLLLL),1*U(A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a5
                   $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.Info a5)
                   $dOrd :: GHC.Classes.Ord a5 ->
                 GHC.Classes.compare @ a5 $dOrd) -}
36b022f74c11b45b268c679b91cb8a0a
  $fOrdInfo_$c< ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.Info a),
     GHC.Classes.Ord a) =>
    Language.Futhark.Syntax.Info a
    -> Language.Futhark.Syntax.Info a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><S(LLSLLLLL),1*U(A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fOrdInfo6
                  `cast`
                (forall a5.
                 <GHC.Classes.Eq (Language.Futhark.Syntax.Info a5)>_R
                 ->_R <GHC.Classes.Ord a5>_R
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)
                 ->_R <GHC.Types.Bool>_R) -}
36b022f74c11b45b268c679b91cb8a0a
  $fOrdInfo_$c<= ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.Info a),
     GHC.Classes.Ord a) =>
    Language.Futhark.Syntax.Info a
    -> Language.Futhark.Syntax.Info a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><S(LLLSLLLL),1*U(A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fOrdInfo5
                  `cast`
                (forall a5.
                 <GHC.Classes.Eq (Language.Futhark.Syntax.Info a5)>_R
                 ->_R <GHC.Classes.Ord a5>_R
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)
                 ->_R <GHC.Types.Bool>_R) -}
36b022f74c11b45b268c679b91cb8a0a
  $fOrdInfo_$c> ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.Info a),
     GHC.Classes.Ord a) =>
    Language.Futhark.Syntax.Info a
    -> Language.Futhark.Syntax.Info a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><S(LLLLSLLL),1*U(A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fOrdInfo4
                  `cast`
                (forall a5.
                 <GHC.Classes.Eq (Language.Futhark.Syntax.Info a5)>_R
                 ->_R <GHC.Classes.Ord a5>_R
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)
                 ->_R <GHC.Types.Bool>_R) -}
36b022f74c11b45b268c679b91cb8a0a
  $fOrdInfo_$c>= ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.Info a),
     GHC.Classes.Ord a) =>
    Language.Futhark.Syntax.Info a
    -> Language.Futhark.Syntax.Info a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><S(LLLLLSLL),1*U(A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fOrdInfo3
                  `cast`
                (forall a5.
                 <GHC.Classes.Eq (Language.Futhark.Syntax.Info a5)>_R
                 ->_R <GHC.Classes.Ord a5>_R
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)
                 ->_R <GHC.Types.Bool>_R) -}
36b022f74c11b45b268c679b91cb8a0a
  $fOrdInfo_$ccompare ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.Info a),
     GHC.Classes.Ord a) =>
    Language.Futhark.Syntax.Info a
    -> Language.Futhark.Syntax.Info a -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><S(LSLLLLLL),1*U(A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fOrdInfo7
                  `cast`
                (forall a5.
                 <GHC.Classes.Eq (Language.Futhark.Syntax.Info a5)>_R
                 ->_R <GHC.Classes.Ord a5>_R
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)
                 ->_R <GHC.Types.Ordering>_R) -}
36b022f74c11b45b268c679b91cb8a0a
  $fOrdInfo_$cmax ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.Info a),
     GHC.Classes.Ord a) =>
    Language.Futhark.Syntax.Info a
    -> Language.Futhark.Syntax.Info a -> Language.Futhark.Syntax.Info a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><S(LLLLLLSL),1*U(A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fOrdInfo2
                  `cast`
                (forall a5.
                 <GHC.Classes.Eq (Language.Futhark.Syntax.Info a5)>_R
                 ->_R <GHC.Classes.Ord a5>_R
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)) -}
36b022f74c11b45b268c679b91cb8a0a
  $fOrdInfo_$cmin ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.Info a),
     GHC.Classes.Ord a) =>
    Language.Futhark.Syntax.Info a
    -> Language.Futhark.Syntax.Info a -> Language.Futhark.Syntax.Info a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><S(LLLLLLLS),1*U(A,A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fOrdInfo1
                  `cast`
                (forall a5.
                 <GHC.Classes.Eq (Language.Futhark.Syntax.Info a5)>_R
                 ->_R <GHC.Classes.Ord a5>_R
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fOrdNoInfo ::
    GHC.Classes.Eq (Language.Futhark.Syntax.NoInfo a) =>
    GHC.Classes.Ord (Language.Futhark.Syntax.NoInfo a)
  DFunId[1]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a5
                      $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.NoInfo a5).
                  @ (Language.Futhark.Syntax.NoInfo a5)
                  $dEq
                  (Language.Futhark.Syntax.$fOrdNoInfo_$ccompare @ a5 $dEq)
                  (Language.Futhark.Syntax.$fOrdNoInfo_$c> @ a5 $dEq)
                  (Language.Futhark.Syntax.$fOrdNoInfo_$c>= @ a5 $dEq)
                  (Language.Futhark.Syntax.$fOrdNoInfo_$c> @ a5 $dEq)
                  (Language.Futhark.Syntax.$fOrdNoInfo_$c>= @ a5 $dEq)
                  (Language.Futhark.Syntax.$fOrdNoInfo_$cmin @ a5 $dEq)
                  (Language.Futhark.Syntax.$fOrdNoInfo_$cmin @ a5 $dEq) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fOrdNoInfo_$c> ::
    GHC.Classes.Eq (Language.Futhark.Syntax.NoInfo a) =>
    Language.Futhark.Syntax.NoInfo a
    -> Language.Futhark.Syntax.NoInfo a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*H><S,1*H>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a5
                   $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.NoInfo a5)
                   a6 :: Language.Futhark.Syntax.NoInfo a5
                   b :: Language.Futhark.Syntax.NoInfo a5 ->
                 case a6 of wild { Language.Futhark.Syntax.NoInfo ->
                 case b of wild1 { Language.Futhark.Syntax.NoInfo ->
                 GHC.Types.False } }) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fOrdNoInfo_$c>= ::
    GHC.Classes.Eq (Language.Futhark.Syntax.NoInfo a) =>
    Language.Futhark.Syntax.NoInfo a
    -> Language.Futhark.Syntax.NoInfo a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*H><S,1*H>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a5
                   $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.NoInfo a5)
                   a6 :: Language.Futhark.Syntax.NoInfo a5
                   b :: Language.Futhark.Syntax.NoInfo a5 ->
                 case a6 of wild { Language.Futhark.Syntax.NoInfo ->
                 case b of wild1 { Language.Futhark.Syntax.NoInfo ->
                 GHC.Types.True } }) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fOrdNoInfo_$ccompare ::
    GHC.Classes.Eq (Language.Futhark.Syntax.NoInfo a) =>
    Language.Futhark.Syntax.NoInfo a
    -> Language.Futhark.Syntax.NoInfo a -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*H><S,1*H>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a5
                   $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.NoInfo a5)
                   a6 :: Language.Futhark.Syntax.NoInfo a5
                   b :: Language.Futhark.Syntax.NoInfo a5 ->
                 case a6 of wild { Language.Futhark.Syntax.NoInfo ->
                 case b of wild1 { Language.Futhark.Syntax.NoInfo ->
                 GHC.Types.EQ } }) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fOrdNoInfo_$cmin ::
    GHC.Classes.Eq (Language.Futhark.Syntax.NoInfo a) =>
    Language.Futhark.Syntax.NoInfo a
    -> Language.Futhark.Syntax.NoInfo a
    -> Language.Futhark.Syntax.NoInfo a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*H><S,1*U()>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a5
                   $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.NoInfo a5)
                   x :: Language.Futhark.Syntax.NoInfo a5
                   y :: Language.Futhark.Syntax.NoInfo a5 ->
                 case x of wild { Language.Futhark.Syntax.NoInfo -> y }) -}
38fd8ca4b903061d48e25eb1353c4a5e
  $fOrdPrimType :: GHC.Classes.Ord Language.Futhark.Syntax.PrimType
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.PrimType
                  Language.Futhark.Syntax.$fEqPrimType
                  Language.Futhark.Syntax.$fOrdPrimType_$ccompare
                  Language.Futhark.Syntax.$fOrdPrimType_$c<
                  Language.Futhark.Syntax.$fOrdPrimType_$c<=
                  Language.Futhark.Syntax.$fOrdPrimType_$c>
                  Language.Futhark.Syntax.$fOrdPrimType_$c>=
                  Language.Futhark.Syntax.$fOrdPrimType_$cmax
                  Language.Futhark.Syntax.$fOrdPrimType_$cmin -}
38fd8ca4b903061d48e25eb1353c4a5e
  $fOrdPrimType_$c< ::
    Language.Futhark.Syntax.PrimType
    -> Language.Futhark.Syntax.PrimType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Language.Futhark.Syntax.PrimType
                   y :: Language.Futhark.Syntax.PrimType ->
                 case Language.Futhark.Syntax.$fOrdPrimType_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
38fd8ca4b903061d48e25eb1353c4a5e
  $fOrdPrimType_$c<= ::
    Language.Futhark.Syntax.PrimType
    -> Language.Futhark.Syntax.PrimType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Language.Futhark.Syntax.PrimType
                   y :: Language.Futhark.Syntax.PrimType ->
                 case Language.Futhark.Syntax.$fOrdPrimType_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
38fd8ca4b903061d48e25eb1353c4a5e
  $fOrdPrimType_$c> ::
    Language.Futhark.Syntax.PrimType
    -> Language.Futhark.Syntax.PrimType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Language.Futhark.Syntax.PrimType
                   y :: Language.Futhark.Syntax.PrimType ->
                 case Language.Futhark.Syntax.$fOrdPrimType_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
38fd8ca4b903061d48e25eb1353c4a5e
  $fOrdPrimType_$c>= ::
    Language.Futhark.Syntax.PrimType
    -> Language.Futhark.Syntax.PrimType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Language.Futhark.Syntax.PrimType
                   y :: Language.Futhark.Syntax.PrimType ->
                 case Language.Futhark.Syntax.$fOrdPrimType_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
38fd8ca4b903061d48e25eb1353c4a5e
  $fOrdPrimType_$ccompare ::
    Language.Futhark.Syntax.PrimType
    -> Language.Futhark.Syntax.PrimType -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a5 :: Language.Futhark.Syntax.PrimType
                   b :: Language.Futhark.Syntax.PrimType ->
                 case a5 of wild {
                   Language.Futhark.Syntax.Signed a6
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Language.Futhark.Syntax.Signed b1
                        -> Futhark.Representation.Primitive.$fOrdCmpOp_$ccompare2 a6 b1 }
                   Language.Futhark.Syntax.Unsigned a6
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Language.Futhark.Syntax.Signed ds -> GHC.Types.GT
                        Language.Futhark.Syntax.Unsigned b1
                        -> Futhark.Representation.Primitive.$fOrdCmpOp_$ccompare2 a6 b1 }
                   Language.Futhark.Syntax.FloatType a6
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.Futhark.Syntax.FloatType b1
                        -> Futhark.Representation.Primitive.$fOrdCmpOp_$ccompare1 a6 b1
                        Language.Futhark.Syntax.Bool -> GHC.Types.LT }
                   Language.Futhark.Syntax.Bool
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.Futhark.Syntax.Bool -> GHC.Types.EQ } }) -}
38fd8ca4b903061d48e25eb1353c4a5e
  $fOrdPrimType_$cmax ::
    Language.Futhark.Syntax.PrimType
    -> Language.Futhark.Syntax.PrimType
    -> Language.Futhark.Syntax.PrimType
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Language.Futhark.Syntax.PrimType
                   y :: Language.Futhark.Syntax.PrimType ->
                 case Language.Futhark.Syntax.$fOrdPrimType_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
38fd8ca4b903061d48e25eb1353c4a5e
  $fOrdPrimType_$cmin ::
    Language.Futhark.Syntax.PrimType
    -> Language.Futhark.Syntax.PrimType
    -> Language.Futhark.Syntax.PrimType
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Language.Futhark.Syntax.PrimType
                   y :: Language.Futhark.Syntax.PrimType ->
                 case Language.Futhark.Syntax.$fOrdPrimType_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
400b85f01ad530ac1a7fa288900f4e88
  $fOrdPrimValue :: GHC.Classes.Ord Language.Futhark.Syntax.PrimValue
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.PrimValue
                  Language.Futhark.Syntax.$fEqPrimValue
                  Language.Futhark.Syntax.$fOrdPrimValue_$ccompare
                  Language.Futhark.Syntax.$fOrdPrimValue_$c<
                  Language.Futhark.Syntax.$fOrdPrimValue_$c<=
                  Language.Futhark.Syntax.$fOrdPrimValue_$c>
                  Language.Futhark.Syntax.$fOrdPrimValue_$c>=
                  Language.Futhark.Syntax.$fOrdPrimValue_$cmax
                  Language.Futhark.Syntax.$fOrdPrimValue_$cmin -}
400b85f01ad530ac1a7fa288900f4e88
  $fOrdPrimValue_$c< ::
    Language.Futhark.Syntax.PrimValue
    -> Language.Futhark.Syntax.PrimValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Language.Futhark.Syntax.PrimValue
                   y :: Language.Futhark.Syntax.PrimValue ->
                 case Language.Futhark.Syntax.$fOrdPrimValue_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
400b85f01ad530ac1a7fa288900f4e88
  $fOrdPrimValue_$c<= ::
    Language.Futhark.Syntax.PrimValue
    -> Language.Futhark.Syntax.PrimValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Language.Futhark.Syntax.PrimValue
                   y :: Language.Futhark.Syntax.PrimValue ->
                 case Language.Futhark.Syntax.$fOrdPrimValue_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
400b85f01ad530ac1a7fa288900f4e88
  $fOrdPrimValue_$c> ::
    Language.Futhark.Syntax.PrimValue
    -> Language.Futhark.Syntax.PrimValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Language.Futhark.Syntax.PrimValue
                   y :: Language.Futhark.Syntax.PrimValue ->
                 case Language.Futhark.Syntax.$fOrdPrimValue_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
400b85f01ad530ac1a7fa288900f4e88
  $fOrdPrimValue_$c>= ::
    Language.Futhark.Syntax.PrimValue
    -> Language.Futhark.Syntax.PrimValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Language.Futhark.Syntax.PrimValue
                   y :: Language.Futhark.Syntax.PrimValue ->
                 case Language.Futhark.Syntax.$fOrdPrimValue_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
400b85f01ad530ac1a7fa288900f4e88
  $fOrdPrimValue_$ccompare ::
    Language.Futhark.Syntax.PrimValue
    -> Language.Futhark.Syntax.PrimValue -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a5 :: Language.Futhark.Syntax.PrimValue
                   b :: Language.Futhark.Syntax.PrimValue ->
                 case a5 of wild {
                   Language.Futhark.Syntax.SignedValue a6
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Language.Futhark.Syntax.SignedValue b1
                        -> case a6 of wild2 {
                             Futhark.Representation.Primitive.Int8Value dt
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.LT
                                  Futhark.Representation.Primitive.Int8Value dt1
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<# dt dt1) of wild4 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==# dt dt1) of wild5 {
                                            GHC.Types.False -> GHC.Types.GT
                                            GHC.Types.True -> GHC.Types.EQ }
                                       GHC.Types.True -> GHC.Types.LT } }
                             Futhark.Representation.Primitive.Int16Value dt
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.LT
                                  Futhark.Representation.Primitive.Int8Value dt1 -> GHC.Types.GT
                                  Futhark.Representation.Primitive.Int16Value dt1
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<# dt dt1) of wild4 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==# dt dt1) of wild5 {
                                            GHC.Types.False -> GHC.Types.GT
                                            GHC.Types.True -> GHC.Types.EQ }
                                       GHC.Types.True -> GHC.Types.LT } }
                             Futhark.Representation.Primitive.Int32Value dt
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.GT
                                  Futhark.Representation.Primitive.Int32Value dt1
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<# dt dt1) of wild4 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==# dt dt1) of wild5 {
                                            GHC.Types.False -> GHC.Types.GT
                                            GHC.Types.True -> GHC.Types.EQ }
                                       GHC.Types.True -> GHC.Types.LT }
                                  Futhark.Representation.Primitive.Int64Value dt1 -> GHC.Types.LT }
                             Futhark.Representation.Primitive.Int64Value dt
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.GT
                                  Futhark.Representation.Primitive.Int64Value dt1
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<# dt dt1) of wild4 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==# dt dt1) of wild5 {
                                            GHC.Types.False -> GHC.Types.GT
                                            GHC.Types.True -> GHC.Types.EQ }
                                       GHC.Types.True -> GHC.Types.LT } } } }
                   Language.Futhark.Syntax.UnsignedValue a6
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Language.Futhark.Syntax.SignedValue ds -> GHC.Types.GT
                        Language.Futhark.Syntax.UnsignedValue b1
                        -> case a6 of wild2 {
                             Futhark.Representation.Primitive.Int8Value dt
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.LT
                                  Futhark.Representation.Primitive.Int8Value dt1
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<# dt dt1) of wild4 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==# dt dt1) of wild5 {
                                            GHC.Types.False -> GHC.Types.GT
                                            GHC.Types.True -> GHC.Types.EQ }
                                       GHC.Types.True -> GHC.Types.LT } }
                             Futhark.Representation.Primitive.Int16Value dt
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.LT
                                  Futhark.Representation.Primitive.Int8Value dt1 -> GHC.Types.GT
                                  Futhark.Representation.Primitive.Int16Value dt1
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<# dt dt1) of wild4 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==# dt dt1) of wild5 {
                                            GHC.Types.False -> GHC.Types.GT
                                            GHC.Types.True -> GHC.Types.EQ }
                                       GHC.Types.True -> GHC.Types.LT } }
                             Futhark.Representation.Primitive.Int32Value dt
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.GT
                                  Futhark.Representation.Primitive.Int32Value dt1
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<# dt dt1) of wild4 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==# dt dt1) of wild5 {
                                            GHC.Types.False -> GHC.Types.GT
                                            GHC.Types.True -> GHC.Types.EQ }
                                       GHC.Types.True -> GHC.Types.LT }
                                  Futhark.Representation.Primitive.Int64Value dt1 -> GHC.Types.LT }
                             Futhark.Representation.Primitive.Int64Value dt
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.GT
                                  Futhark.Representation.Primitive.Int64Value dt1
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<# dt dt1) of wild4 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==# dt dt1) of wild5 {
                                            GHC.Types.False -> GHC.Types.GT
                                            GHC.Types.True -> GHC.Types.EQ }
                                       GHC.Types.True -> GHC.Types.LT } } } }
                   Language.Futhark.Syntax.FloatValue a6
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.Futhark.Syntax.FloatValue b1
                        -> case a6 of wild2 {
                             Futhark.Representation.Primitive.Float32Value dt
                             -> case b1 of wild3 {
                                  Futhark.Representation.Primitive.Float32Value dt1
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.ltFloat# dt dt1) of wild4 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.eqFloat# dt dt1) of wild5 {
                                            GHC.Types.False -> GHC.Types.GT
                                            GHC.Types.True -> GHC.Types.EQ }
                                       GHC.Types.True -> GHC.Types.LT }
                                  Futhark.Representation.Primitive.Float64Value ipv
                                  -> GHC.Types.LT }
                             Futhark.Representation.Primitive.Float64Value dt
                             -> case b1 of wild3 {
                                  Futhark.Representation.Primitive.Float32Value ipv -> GHC.Types.GT
                                  Futhark.Representation.Primitive.Float64Value dt1
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<## dt dt1) of wild4 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==## dt dt1) of wild5 {
                                            GHC.Types.False -> GHC.Types.GT
                                            GHC.Types.True -> GHC.Types.EQ }
                                       GHC.Types.True -> GHC.Types.LT } } }
                        Language.Futhark.Syntax.BoolValue ds -> GHC.Types.LT }
                   Language.Futhark.Syntax.BoolValue a6
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.Futhark.Syntax.BoolValue b1
                        -> case a6 of wild2 {
                             GHC.Types.False
                             -> case b1 of wild3 {
                                  GHC.Types.False -> GHC.Types.EQ GHC.Types.True -> GHC.Types.LT }
                             GHC.Types.True
                             -> case b1 of wild3 {
                                  GHC.Types.False -> GHC.Types.GT
                                  GHC.Types.True -> GHC.Types.EQ } } } }) -}
400b85f01ad530ac1a7fa288900f4e88
  $fOrdPrimValue_$cmax ::
    Language.Futhark.Syntax.PrimValue
    -> Language.Futhark.Syntax.PrimValue
    -> Language.Futhark.Syntax.PrimValue
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Language.Futhark.Syntax.PrimValue
                   y :: Language.Futhark.Syntax.PrimValue ->
                 case Language.Futhark.Syntax.$fOrdPrimValue_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
400b85f01ad530ac1a7fa288900f4e88
  $fOrdPrimValue_$cmin ::
    Language.Futhark.Syntax.PrimValue
    -> Language.Futhark.Syntax.PrimValue
    -> Language.Futhark.Syntax.PrimValue
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Language.Futhark.Syntax.PrimValue
                   y :: Language.Futhark.Syntax.PrimValue ->
                 case Language.Futhark.Syntax.$fOrdPrimValue_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fOrdRank ::
    GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn) =>
    GHC.Classes.Ord (Language.Futhark.Syntax.Rank vn)
  DFunId[1]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ vn
                      $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn).
                  @ (Language.Futhark.Syntax.Rank vn)
                  $dEq
                  (Language.Futhark.Syntax.$fOrdRank_$ccompare @ vn $dEq)
                  (Language.Futhark.Syntax.$fOrdRank_$c< @ vn $dEq)
                  (Language.Futhark.Syntax.$fOrdRank_$c<= @ vn $dEq)
                  (Language.Futhark.Syntax.$fOrdRank_$c> @ vn $dEq)
                  (Language.Futhark.Syntax.$fOrdRank_$c>= @ vn $dEq)
                  (Language.Futhark.Syntax.$fOrdRank_$cmax @ vn $dEq)
                  (Language.Futhark.Syntax.$fOrdRank_$cmin @ vn $dEq) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fOrdRank1 ::
    GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn) =>
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ vn
                   $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn)
                   eta :: GHC.Types.Int
                   eta1 :: GHC.Types.Int ->
                 GHC.Classes.$fOrdInt_$cmin eta eta1) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fOrdRank2 ::
    GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn) =>
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ vn
                   $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn)
                   eta :: GHC.Types.Int
                   eta1 :: GHC.Types.Int ->
                 GHC.Classes.$fOrdInt_$cmax eta eta1) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fOrdRank3 ::
    GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn) =>
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ vn
                   $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn)
                   eta :: GHC.Types.Int
                   eta1 :: GHC.Types.Int ->
                 GHC.Classes.geInt eta eta1) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fOrdRank4 ::
    GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn) =>
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ vn
                   $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn)
                   eta :: GHC.Types.Int
                   eta1 :: GHC.Types.Int ->
                 GHC.Classes.gtInt eta eta1) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fOrdRank5 ::
    GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn) =>
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ vn
                   $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn)
                   eta :: GHC.Types.Int
                   eta1 :: GHC.Types.Int ->
                 GHC.Classes.leInt eta eta1) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fOrdRank6 ::
    GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn) =>
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ vn
                   $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn)
                   eta :: GHC.Types.Int
                   eta1 :: GHC.Types.Int ->
                 GHC.Classes.ltInt eta eta1) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fOrdRank7 ::
    GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn) =>
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ vn
                   $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn)
                   eta :: GHC.Types.Int
                   eta1 :: GHC.Types.Int ->
                 GHC.Classes.compareInt eta eta1) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fOrdRank_$c< ::
    GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn) =>
    Language.Futhark.Syntax.Rank vn
    -> Language.Futhark.Syntax.Rank vn -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fOrdRank6
                  `cast`
                (forall vn.
                 <GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn)>_R
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)
                 ->_R <GHC.Types.Bool>_R) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fOrdRank_$c<= ::
    GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn) =>
    Language.Futhark.Syntax.Rank vn
    -> Language.Futhark.Syntax.Rank vn -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fOrdRank5
                  `cast`
                (forall vn.
                 <GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn)>_R
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)
                 ->_R <GHC.Types.Bool>_R) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fOrdRank_$c> ::
    GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn) =>
    Language.Futhark.Syntax.Rank vn
    -> Language.Futhark.Syntax.Rank vn -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fOrdRank4
                  `cast`
                (forall vn.
                 <GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn)>_R
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)
                 ->_R <GHC.Types.Bool>_R) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fOrdRank_$c>= ::
    GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn) =>
    Language.Futhark.Syntax.Rank vn
    -> Language.Futhark.Syntax.Rank vn -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fOrdRank3
                  `cast`
                (forall vn.
                 <GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn)>_R
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)
                 ->_R <GHC.Types.Bool>_R) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fOrdRank_$ccompare ::
    GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn) =>
    Language.Futhark.Syntax.Rank vn
    -> Language.Futhark.Syntax.Rank vn -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fOrdRank7
                  `cast`
                (forall vn.
                 <GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn)>_R
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)
                 ->_R <GHC.Types.Ordering>_R) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fOrdRank_$cmax ::
    GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn) =>
    Language.Futhark.Syntax.Rank vn
    -> Language.Futhark.Syntax.Rank vn
    -> Language.Futhark.Syntax.Rank vn
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fOrdRank2
                  `cast`
                (forall vn.
                 <GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn)>_R
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fOrdRank_$cmin ::
    GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn) =>
    Language.Futhark.Syntax.Rank vn
    -> Language.Futhark.Syntax.Rank vn
    -> Language.Futhark.Syntax.Rank vn
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.$fOrdRank1
                  `cast`
                (forall vn.
                 <GHC.Classes.Eq (Language.Futhark.Syntax.Rank vn)>_R
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)
                 ->_R Sym (Language.Futhark.Syntax.NTCo:Rank[0] <vn>_P)) -}
23c47b362b456c0c51d94a86b9652b66
  $fOrdShapeDecl ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.ShapeDecl vn),
     GHC.Classes.Ord vn) =>
    GHC.Classes.Ord (Language.Futhark.Syntax.ShapeDecl vn)
  DFunId[1]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U><L,U(U,C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ vn
                      $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.ShapeDecl vn)
                      $dOrd :: GHC.Classes.Ord vn.
                  @ (Language.Futhark.Syntax.ShapeDecl vn)
                  $dEq
                  (Language.Futhark.Syntax.$fOrdShapeDecl_$ccompare @ vn $dEq $dOrd)
                  (Language.Futhark.Syntax.$fOrdShapeDecl_$c< @ vn $dEq $dOrd)
                  (Language.Futhark.Syntax.$fOrdShapeDecl_$c<= @ vn $dEq $dOrd)
                  (Language.Futhark.Syntax.$fOrdShapeDecl_$c> @ vn $dEq $dOrd)
                  (Language.Futhark.Syntax.$fOrdShapeDecl_$c>= @ vn $dEq $dOrd)
                  (Language.Futhark.Syntax.$fOrdShapeDecl_$cmax @ vn $dEq $dOrd)
                  (Language.Futhark.Syntax.$fOrdShapeDecl_$cmin @ vn $dEq $dOrd) -}
23c47b362b456c0c51d94a86b9652b66
  $fOrdShapeDecl_$c< ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.ShapeDecl vn),
     GHC.Classes.Ord vn) =>
    Language.Futhark.Syntax.ShapeDecl vn
    -> Language.Futhark.Syntax.ShapeDecl vn -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><L,U(1*U,C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ @ vn
                   w :: GHC.Classes.Eq (Language.Futhark.Syntax.ShapeDecl vn)
                   w1 :: GHC.Classes.Ord vn ->
                 Language.Futhark.Syntax.$w$c<1 @ vn w1) -}
23c47b362b456c0c51d94a86b9652b66
  $fOrdShapeDecl_$c<= ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.ShapeDecl vn),
     GHC.Classes.Ord vn) =>
    Language.Futhark.Syntax.ShapeDecl vn
    -> Language.Futhark.Syntax.ShapeDecl vn -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><L,U(1*U,C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ @ vn
                   w :: GHC.Classes.Eq (Language.Futhark.Syntax.ShapeDecl vn)
                   w1 :: GHC.Classes.Ord vn ->
                 Language.Futhark.Syntax.$w$c<=1 @ vn w1) -}
23c47b362b456c0c51d94a86b9652b66
  $fOrdShapeDecl_$c> ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.ShapeDecl vn),
     GHC.Classes.Ord vn) =>
    Language.Futhark.Syntax.ShapeDecl vn
    -> Language.Futhark.Syntax.ShapeDecl vn -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><L,U(1*U,C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ @ vn
                   w :: GHC.Classes.Eq (Language.Futhark.Syntax.ShapeDecl vn)
                   w1 :: GHC.Classes.Ord vn ->
                 Language.Futhark.Syntax.$w$c>1 @ vn w1) -}
23c47b362b456c0c51d94a86b9652b66
  $fOrdShapeDecl_$c>= ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.ShapeDecl vn),
     GHC.Classes.Ord vn) =>
    Language.Futhark.Syntax.ShapeDecl vn
    -> Language.Futhark.Syntax.ShapeDecl vn -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><L,U(1*U,C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ @ vn
                   w :: GHC.Classes.Eq (Language.Futhark.Syntax.ShapeDecl vn)
                   w1 :: GHC.Classes.Ord vn ->
                 Language.Futhark.Syntax.$w$c>=1 @ vn w1) -}
23c47b362b456c0c51d94a86b9652b66
  $fOrdShapeDecl_$ccompare ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.ShapeDecl vn),
     GHC.Classes.Ord vn) =>
    Language.Futhark.Syntax.ShapeDecl vn
    -> Language.Futhark.Syntax.ShapeDecl vn -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><L,U(1*U,C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ @ vn
                   w :: GHC.Classes.Eq (Language.Futhark.Syntax.ShapeDecl vn)
                   w1 :: GHC.Classes.Ord vn ->
                 Language.Futhark.Syntax.$w$ccompare1 @ vn w1) -}
23c47b362b456c0c51d94a86b9652b66
  $fOrdShapeDecl_$cmax ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.ShapeDecl vn),
     GHC.Classes.Ord vn) =>
    Language.Futhark.Syntax.ShapeDecl vn
    -> Language.Futhark.Syntax.ShapeDecl vn
    -> Language.Futhark.Syntax.ShapeDecl vn
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><L,U(1*U,C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ @ vn
                   w :: GHC.Classes.Eq (Language.Futhark.Syntax.ShapeDecl vn)
                   w1 :: GHC.Classes.Ord vn ->
                 Language.Futhark.Syntax.$w$cmax1 @ vn w1) -}
23c47b362b456c0c51d94a86b9652b66
  $fOrdShapeDecl_$cmin ::
    (GHC.Classes.Eq (Language.Futhark.Syntax.ShapeDecl vn),
     GHC.Classes.Ord vn) =>
    Language.Futhark.Syntax.ShapeDecl vn
    -> Language.Futhark.Syntax.ShapeDecl vn
    -> Language.Futhark.Syntax.ShapeDecl vn
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><L,U(1*U,C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ @ vn
                   w :: GHC.Classes.Eq (Language.Futhark.Syntax.ShapeDecl vn)
                   w1 :: GHC.Classes.Ord vn ->
                 Language.Futhark.Syntax.$w$cmin1 @ vn w1) -}
e22888e07cdc5159294b6b72f8ca9208
  $fOrdUnOp :: GHC.Classes.Ord Language.Futhark.Syntax.UnOp
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.UnOp
                  Language.Futhark.Syntax.$fEqUnOp
                  Language.Futhark.Syntax.$fOrdUnOp_$ccompare
                  Language.Futhark.Syntax.$fOrdUnOp_$c<
                  Language.Futhark.Syntax.$fOrdUnOp_$c<=
                  Language.Futhark.Syntax.$fOrdUnOp_$c>
                  Language.Futhark.Syntax.$fOrdUnOp_$c>=
                  Language.Futhark.Syntax.$fOrdUnOp_$cmax
                  Language.Futhark.Syntax.$fOrdUnOp_$cmin -}
e22888e07cdc5159294b6b72f8ca9208
  $fOrdUnOp_$c< ::
    Language.Futhark.Syntax.UnOp
    -> Language.Futhark.Syntax.UnOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Language.Futhark.Syntax.UnOp
                   y :: Language.Futhark.Syntax.UnOp ->
                 case x of wild {
                   Language.Futhark.Syntax.Not
                   -> case y of wild1 {
                        Language.Futhark.Syntax.Not -> GHC.Types.False
                        Language.Futhark.Syntax.Negate -> GHC.Types.True
                        Language.Futhark.Syntax.Complement -> GHC.Types.True
                        Language.Futhark.Syntax.Abs -> GHC.Types.True
                        Language.Futhark.Syntax.Signum -> GHC.Types.True
                        Language.Futhark.Syntax.ToFloat ds -> GHC.Types.True
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.True
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.True }
                   Language.Futhark.Syntax.Negate
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.Complement -> GHC.Types.True
                        Language.Futhark.Syntax.Abs -> GHC.Types.True
                        Language.Futhark.Syntax.Signum -> GHC.Types.True
                        Language.Futhark.Syntax.ToFloat ds -> GHC.Types.True
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.True
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.True }
                   Language.Futhark.Syntax.Complement
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.Abs -> GHC.Types.True
                        Language.Futhark.Syntax.Signum -> GHC.Types.True
                        Language.Futhark.Syntax.ToFloat ds -> GHC.Types.True
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.True
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.True }
                   Language.Futhark.Syntax.Abs
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.Signum -> GHC.Types.True
                        Language.Futhark.Syntax.ToFloat ds -> GHC.Types.True
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.True
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.True }
                   Language.Futhark.Syntax.Signum
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.ToFloat ds -> GHC.Types.True
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.True
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.True }
                   Language.Futhark.Syntax.ToFloat a5
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.ToFloat ds
                        -> case a5 of wild2 {
                             Futhark.Representation.Primitive.Float32
                             -> case ds of wild3 {
                                  Futhark.Representation.Primitive.Float32 -> GHC.Types.False
                                  Futhark.Representation.Primitive.Float64 -> GHC.Types.True }
                             Futhark.Representation.Primitive.Float64
                             -> case ds of wild3 { DEFAULT -> GHC.Types.False } }
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.True
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.True }
                   Language.Futhark.Syntax.ToSigned a5
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.ToSigned b1
                        -> case a5 of wild2 {
                             Futhark.Representation.Primitive.Int8
                             -> case b1 of wild3 {
                                  Futhark.Representation.Primitive.Int8 -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int16 -> GHC.Types.True
                                  Futhark.Representation.Primitive.Int32 -> GHC.Types.True
                                  Futhark.Representation.Primitive.Int64 -> GHC.Types.True }
                             Futhark.Representation.Primitive.Int16
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int32 -> GHC.Types.True
                                  Futhark.Representation.Primitive.Int64 -> GHC.Types.True }
                             Futhark.Representation.Primitive.Int32
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int64 -> GHC.Types.True }
                             Futhark.Representation.Primitive.Int64
                             -> case b1 of wild3 { DEFAULT -> GHC.Types.False } }
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.True }
                   Language.Futhark.Syntax.ToUnsigned a5
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.ToUnsigned b1
                        -> case a5 of wild2 {
                             Futhark.Representation.Primitive.Int8
                             -> case b1 of wild3 {
                                  Futhark.Representation.Primitive.Int8 -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int16 -> GHC.Types.True
                                  Futhark.Representation.Primitive.Int32 -> GHC.Types.True
                                  Futhark.Representation.Primitive.Int64 -> GHC.Types.True }
                             Futhark.Representation.Primitive.Int16
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int32 -> GHC.Types.True
                                  Futhark.Representation.Primitive.Int64 -> GHC.Types.True }
                             Futhark.Representation.Primitive.Int32
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int64 -> GHC.Types.True }
                             Futhark.Representation.Primitive.Int64
                             -> case b1 of wild3 { DEFAULT -> GHC.Types.False } } } }) -}
e22888e07cdc5159294b6b72f8ca9208
  $fOrdUnOp_$c<= ::
    Language.Futhark.Syntax.UnOp
    -> Language.Futhark.Syntax.UnOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Language.Futhark.Syntax.UnOp
                   y :: Language.Futhark.Syntax.UnOp ->
                 case x of wild {
                   Language.Futhark.Syntax.Not
                   -> case y of wild1 { DEFAULT -> GHC.Types.True }
                   Language.Futhark.Syntax.Negate
                   -> case y of wild1 {
                        Language.Futhark.Syntax.Not -> GHC.Types.False
                        Language.Futhark.Syntax.Negate -> GHC.Types.True
                        Language.Futhark.Syntax.Complement -> GHC.Types.True
                        Language.Futhark.Syntax.Abs -> GHC.Types.True
                        Language.Futhark.Syntax.Signum -> GHC.Types.True
                        Language.Futhark.Syntax.ToFloat ds -> GHC.Types.True
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.True
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.True }
                   Language.Futhark.Syntax.Complement
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.Complement -> GHC.Types.True
                        Language.Futhark.Syntax.Abs -> GHC.Types.True
                        Language.Futhark.Syntax.Signum -> GHC.Types.True
                        Language.Futhark.Syntax.ToFloat ds -> GHC.Types.True
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.True
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.True }
                   Language.Futhark.Syntax.Abs
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.Abs -> GHC.Types.True
                        Language.Futhark.Syntax.Signum -> GHC.Types.True
                        Language.Futhark.Syntax.ToFloat ds -> GHC.Types.True
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.True
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.True }
                   Language.Futhark.Syntax.Signum
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.Signum -> GHC.Types.True
                        Language.Futhark.Syntax.ToFloat ds -> GHC.Types.True
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.True
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.True }
                   Language.Futhark.Syntax.ToFloat a5
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.ToFloat ds
                        -> case a5 of wild2 {
                             Futhark.Representation.Primitive.Float32
                             -> case ds of wild3 { DEFAULT -> GHC.Types.True }
                             Futhark.Representation.Primitive.Float64
                             -> case ds of wild3 {
                                  Futhark.Representation.Primitive.Float32 -> GHC.Types.False
                                  Futhark.Representation.Primitive.Float64 -> GHC.Types.True } }
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.True
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.True }
                   Language.Futhark.Syntax.ToSigned a5
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.ToSigned b1
                        -> case a5 of wild2 {
                             Futhark.Representation.Primitive.Int8
                             -> case b1 of wild3 { DEFAULT -> GHC.Types.True }
                             Futhark.Representation.Primitive.Int16
                             -> case b1 of wild3 {
                                  Futhark.Representation.Primitive.Int8 -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int16 -> GHC.Types.True
                                  Futhark.Representation.Primitive.Int32 -> GHC.Types.True
                                  Futhark.Representation.Primitive.Int64 -> GHC.Types.True }
                             Futhark.Representation.Primitive.Int32
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int32 -> GHC.Types.True
                                  Futhark.Representation.Primitive.Int64 -> GHC.Types.True }
                             Futhark.Representation.Primitive.Int64
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int64 -> GHC.Types.True } }
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.True }
                   Language.Futhark.Syntax.ToUnsigned a5
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.ToUnsigned b1
                        -> case a5 of wild2 {
                             Futhark.Representation.Primitive.Int8
                             -> case b1 of wild3 { DEFAULT -> GHC.Types.True }
                             Futhark.Representation.Primitive.Int16
                             -> case b1 of wild3 {
                                  Futhark.Representation.Primitive.Int8 -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int16 -> GHC.Types.True
                                  Futhark.Representation.Primitive.Int32 -> GHC.Types.True
                                  Futhark.Representation.Primitive.Int64 -> GHC.Types.True }
                             Futhark.Representation.Primitive.Int32
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int32 -> GHC.Types.True
                                  Futhark.Representation.Primitive.Int64 -> GHC.Types.True }
                             Futhark.Representation.Primitive.Int64
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int64
                                  -> GHC.Types.True } } } }) -}
e22888e07cdc5159294b6b72f8ca9208
  $fOrdUnOp_$c> ::
    Language.Futhark.Syntax.UnOp
    -> Language.Futhark.Syntax.UnOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Language.Futhark.Syntax.UnOp
                   y :: Language.Futhark.Syntax.UnOp ->
                 case x of wild {
                   Language.Futhark.Syntax.Not
                   -> case y of wild1 { DEFAULT -> GHC.Types.False }
                   Language.Futhark.Syntax.Negate
                   -> case y of wild1 {
                        Language.Futhark.Syntax.Not -> GHC.Types.True
                        Language.Futhark.Syntax.Negate -> GHC.Types.False
                        Language.Futhark.Syntax.Complement -> GHC.Types.False
                        Language.Futhark.Syntax.Abs -> GHC.Types.False
                        Language.Futhark.Syntax.Signum -> GHC.Types.False
                        Language.Futhark.Syntax.ToFloat ds -> GHC.Types.False
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.False
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.False }
                   Language.Futhark.Syntax.Complement
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Futhark.Syntax.Complement -> GHC.Types.False
                        Language.Futhark.Syntax.Abs -> GHC.Types.False
                        Language.Futhark.Syntax.Signum -> GHC.Types.False
                        Language.Futhark.Syntax.ToFloat ds -> GHC.Types.False
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.False
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.False }
                   Language.Futhark.Syntax.Abs
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Futhark.Syntax.Abs -> GHC.Types.False
                        Language.Futhark.Syntax.Signum -> GHC.Types.False
                        Language.Futhark.Syntax.ToFloat ds -> GHC.Types.False
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.False
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.False }
                   Language.Futhark.Syntax.Signum
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Futhark.Syntax.Signum -> GHC.Types.False
                        Language.Futhark.Syntax.ToFloat ds -> GHC.Types.False
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.False
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.False }
                   Language.Futhark.Syntax.ToFloat a5
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Futhark.Syntax.ToFloat ds
                        -> case a5 of wild2 {
                             Futhark.Representation.Primitive.Float32
                             -> case ds of wild3 { DEFAULT -> GHC.Types.False }
                             Futhark.Representation.Primitive.Float64
                             -> case ds of wild3 {
                                  Futhark.Representation.Primitive.Float32 -> GHC.Types.True
                                  Futhark.Representation.Primitive.Float64 -> GHC.Types.False } }
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.False
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.False }
                   Language.Futhark.Syntax.ToSigned a5
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Futhark.Syntax.ToSigned b1
                        -> case a5 of wild2 {
                             Futhark.Representation.Primitive.Int8
                             -> case b1 of wild3 { DEFAULT -> GHC.Types.False }
                             Futhark.Representation.Primitive.Int16
                             -> case b1 of wild3 {
                                  Futhark.Representation.Primitive.Int8 -> GHC.Types.True
                                  Futhark.Representation.Primitive.Int16 -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int32 -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int64 -> GHC.Types.False }
                             Futhark.Representation.Primitive.Int32
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  Futhark.Representation.Primitive.Int32 -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int64 -> GHC.Types.False }
                             Futhark.Representation.Primitive.Int64
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  Futhark.Representation.Primitive.Int64 -> GHC.Types.False } }
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.False }
                   Language.Futhark.Syntax.ToUnsigned a5
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Futhark.Syntax.ToUnsigned b1
                        -> case a5 of wild2 {
                             Futhark.Representation.Primitive.Int8
                             -> case b1 of wild3 { DEFAULT -> GHC.Types.False }
                             Futhark.Representation.Primitive.Int16
                             -> case b1 of wild3 {
                                  Futhark.Representation.Primitive.Int8 -> GHC.Types.True
                                  Futhark.Representation.Primitive.Int16 -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int32 -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int64 -> GHC.Types.False }
                             Futhark.Representation.Primitive.Int32
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  Futhark.Representation.Primitive.Int32 -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int64 -> GHC.Types.False }
                             Futhark.Representation.Primitive.Int64
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  Futhark.Representation.Primitive.Int64
                                  -> GHC.Types.False } } } }) -}
e22888e07cdc5159294b6b72f8ca9208
  $fOrdUnOp_$c>= ::
    Language.Futhark.Syntax.UnOp
    -> Language.Futhark.Syntax.UnOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Language.Futhark.Syntax.UnOp
                   y :: Language.Futhark.Syntax.UnOp ->
                 case x of wild {
                   Language.Futhark.Syntax.Not
                   -> case y of wild1 {
                        Language.Futhark.Syntax.Not -> GHC.Types.True
                        Language.Futhark.Syntax.Negate -> GHC.Types.False
                        Language.Futhark.Syntax.Complement -> GHC.Types.False
                        Language.Futhark.Syntax.Abs -> GHC.Types.False
                        Language.Futhark.Syntax.Signum -> GHC.Types.False
                        Language.Futhark.Syntax.ToFloat ds -> GHC.Types.False
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.False
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.False }
                   Language.Futhark.Syntax.Negate
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Futhark.Syntax.Complement -> GHC.Types.False
                        Language.Futhark.Syntax.Abs -> GHC.Types.False
                        Language.Futhark.Syntax.Signum -> GHC.Types.False
                        Language.Futhark.Syntax.ToFloat ds -> GHC.Types.False
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.False
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.False }
                   Language.Futhark.Syntax.Complement
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Futhark.Syntax.Abs -> GHC.Types.False
                        Language.Futhark.Syntax.Signum -> GHC.Types.False
                        Language.Futhark.Syntax.ToFloat ds -> GHC.Types.False
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.False
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.False }
                   Language.Futhark.Syntax.Abs
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Futhark.Syntax.Signum -> GHC.Types.False
                        Language.Futhark.Syntax.ToFloat ds -> GHC.Types.False
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.False
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.False }
                   Language.Futhark.Syntax.Signum
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Futhark.Syntax.ToFloat ds -> GHC.Types.False
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.False
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.False }
                   Language.Futhark.Syntax.ToFloat a5
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Futhark.Syntax.ToFloat ds
                        -> case a5 of wild2 {
                             Futhark.Representation.Primitive.Float32
                             -> case ds of wild3 {
                                  Futhark.Representation.Primitive.Float32 -> GHC.Types.True
                                  Futhark.Representation.Primitive.Float64 -> GHC.Types.False }
                             Futhark.Representation.Primitive.Float64
                             -> case ds of wild3 { DEFAULT -> GHC.Types.True } }
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.False
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.False }
                   Language.Futhark.Syntax.ToSigned a5
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Futhark.Syntax.ToSigned b1
                        -> case a5 of wild2 {
                             Futhark.Representation.Primitive.Int8
                             -> case b1 of wild3 {
                                  Futhark.Representation.Primitive.Int8 -> GHC.Types.True
                                  Futhark.Representation.Primitive.Int16 -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int32 -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int64 -> GHC.Types.False }
                             Futhark.Representation.Primitive.Int16
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  Futhark.Representation.Primitive.Int32 -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int64 -> GHC.Types.False }
                             Futhark.Representation.Primitive.Int32
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  Futhark.Representation.Primitive.Int64 -> GHC.Types.False }
                             Futhark.Representation.Primitive.Int64
                             -> case b1 of wild3 { DEFAULT -> GHC.Types.True } }
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.False }
                   Language.Futhark.Syntax.ToUnsigned a5
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Futhark.Syntax.ToUnsigned b1
                        -> case a5 of wild2 {
                             Futhark.Representation.Primitive.Int8
                             -> case b1 of wild3 {
                                  Futhark.Representation.Primitive.Int8 -> GHC.Types.True
                                  Futhark.Representation.Primitive.Int16 -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int32 -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int64 -> GHC.Types.False }
                             Futhark.Representation.Primitive.Int16
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  Futhark.Representation.Primitive.Int32 -> GHC.Types.False
                                  Futhark.Representation.Primitive.Int64 -> GHC.Types.False }
                             Futhark.Representation.Primitive.Int32
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  Futhark.Representation.Primitive.Int64 -> GHC.Types.False }
                             Futhark.Representation.Primitive.Int64
                             -> case b1 of wild3 { DEFAULT -> GHC.Types.True } } } }) -}
e22888e07cdc5159294b6b72f8ca9208
  $fOrdUnOp_$ccompare ::
    Language.Futhark.Syntax.UnOp
    -> Language.Futhark.Syntax.UnOp -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a5 :: Language.Futhark.Syntax.UnOp
                   b :: Language.Futhark.Syntax.UnOp ->
                 case a5 of wild {
                   Language.Futhark.Syntax.Not
                   -> case b of wild1 {
                        Language.Futhark.Syntax.Not -> GHC.Types.EQ
                        Language.Futhark.Syntax.Negate -> GHC.Types.LT
                        Language.Futhark.Syntax.Complement -> GHC.Types.LT
                        Language.Futhark.Syntax.Abs -> GHC.Types.LT
                        Language.Futhark.Syntax.Signum -> GHC.Types.LT
                        Language.Futhark.Syntax.ToFloat ds -> GHC.Types.LT
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.LT
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.LT }
                   Language.Futhark.Syntax.Negate
                   -> case b of wild1 {
                        Language.Futhark.Syntax.Not -> GHC.Types.GT
                        Language.Futhark.Syntax.Negate -> GHC.Types.EQ
                        Language.Futhark.Syntax.Complement -> GHC.Types.LT
                        Language.Futhark.Syntax.Abs -> GHC.Types.LT
                        Language.Futhark.Syntax.Signum -> GHC.Types.LT
                        Language.Futhark.Syntax.ToFloat ds -> GHC.Types.LT
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.LT
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.LT }
                   Language.Futhark.Syntax.Complement
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.Futhark.Syntax.Complement -> GHC.Types.EQ
                        Language.Futhark.Syntax.Abs -> GHC.Types.LT
                        Language.Futhark.Syntax.Signum -> GHC.Types.LT
                        Language.Futhark.Syntax.ToFloat ds -> GHC.Types.LT
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.LT
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.LT }
                   Language.Futhark.Syntax.Abs
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.Futhark.Syntax.Abs -> GHC.Types.EQ
                        Language.Futhark.Syntax.Signum -> GHC.Types.LT
                        Language.Futhark.Syntax.ToFloat ds -> GHC.Types.LT
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.LT
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.LT }
                   Language.Futhark.Syntax.Signum
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.Futhark.Syntax.Signum -> GHC.Types.EQ
                        Language.Futhark.Syntax.ToFloat ds -> GHC.Types.LT
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.LT
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.LT }
                   Language.Futhark.Syntax.ToFloat a6
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.Futhark.Syntax.ToFloat ds
                        -> Futhark.Representation.Primitive.$fOrdCmpOp_$ccompare1 a6 ds
                        Language.Futhark.Syntax.ToSigned ds -> GHC.Types.LT
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.LT }
                   Language.Futhark.Syntax.ToSigned a6
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.Futhark.Syntax.ToSigned b1
                        -> Futhark.Representation.Primitive.$fOrdCmpOp_$ccompare2 a6 b1
                        Language.Futhark.Syntax.ToUnsigned ds -> GHC.Types.LT }
                   Language.Futhark.Syntax.ToUnsigned a6
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.Futhark.Syntax.ToUnsigned b1
                        -> Futhark.Representation.Primitive.$fOrdCmpOp_$ccompare2
                             a6
                             b1 } }) -}
e22888e07cdc5159294b6b72f8ca9208
  $fOrdUnOp_$cmax ::
    Language.Futhark.Syntax.UnOp
    -> Language.Futhark.Syntax.UnOp -> Language.Futhark.Syntax.UnOp
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Language.Futhark.Syntax.UnOp
                   y :: Language.Futhark.Syntax.UnOp ->
                 case x of wild {
                   Language.Futhark.Syntax.Not -> y
                   Language.Futhark.Syntax.Negate
                   -> case y of wild1 {
                        DEFAULT -> Language.Futhark.Syntax.Negate
                        Language.Futhark.Syntax.Complement
                        -> Language.Futhark.Syntax.Complement
                        Language.Futhark.Syntax.Abs -> Language.Futhark.Syntax.Abs
                        Language.Futhark.Syntax.Signum -> Language.Futhark.Syntax.Signum
                        Language.Futhark.Syntax.ToFloat ds -> wild1
                        Language.Futhark.Syntax.ToSigned ds -> wild1
                        Language.Futhark.Syntax.ToUnsigned ds -> wild1 }
                   Language.Futhark.Syntax.Complement
                   -> case y of wild1 {
                        DEFAULT -> Language.Futhark.Syntax.Complement
                        Language.Futhark.Syntax.Abs -> Language.Futhark.Syntax.Abs
                        Language.Futhark.Syntax.Signum -> Language.Futhark.Syntax.Signum
                        Language.Futhark.Syntax.ToFloat ds -> wild1
                        Language.Futhark.Syntax.ToSigned ds -> wild1
                        Language.Futhark.Syntax.ToUnsigned ds -> wild1 }
                   Language.Futhark.Syntax.Abs
                   -> case y of wild1 {
                        DEFAULT -> Language.Futhark.Syntax.Abs
                        Language.Futhark.Syntax.Signum -> Language.Futhark.Syntax.Signum
                        Language.Futhark.Syntax.ToFloat ds -> wild1
                        Language.Futhark.Syntax.ToSigned ds -> wild1
                        Language.Futhark.Syntax.ToUnsigned ds -> wild1 }
                   Language.Futhark.Syntax.Signum
                   -> case y of wild1 {
                        DEFAULT -> Language.Futhark.Syntax.Signum
                        Language.Futhark.Syntax.ToFloat ds -> wild1
                        Language.Futhark.Syntax.ToSigned ds -> wild1
                        Language.Futhark.Syntax.ToUnsigned ds -> wild1 }
                   Language.Futhark.Syntax.ToFloat a5
                   -> case y of wild1 {
                        DEFAULT -> wild
                        Language.Futhark.Syntax.ToFloat ds
                        -> case a5 of wild2 {
                             Futhark.Representation.Primitive.Float32
                             -> case ds of wild3 { DEFAULT -> wild1 }
                             Futhark.Representation.Primitive.Float64
                             -> case ds of wild3 {
                                  Futhark.Representation.Primitive.Float32 -> wild
                                  Futhark.Representation.Primitive.Float64 -> wild1 } }
                        Language.Futhark.Syntax.ToSigned ds -> wild1
                        Language.Futhark.Syntax.ToUnsigned ds -> wild1 }
                   Language.Futhark.Syntax.ToSigned a5
                   -> case y of wild1 {
                        DEFAULT -> wild
                        Language.Futhark.Syntax.ToSigned b1
                        -> case a5 of wild2 {
                             Futhark.Representation.Primitive.Int8
                             -> case b1 of wild3 { DEFAULT -> wild1 }
                             Futhark.Representation.Primitive.Int16
                             -> case b1 of wild3 {
                                  Futhark.Representation.Primitive.Int8 -> wild
                                  Futhark.Representation.Primitive.Int16 -> wild1
                                  Futhark.Representation.Primitive.Int32 -> wild1
                                  Futhark.Representation.Primitive.Int64 -> wild1 }
                             Futhark.Representation.Primitive.Int32
                             -> case b1 of wild3 {
                                  DEFAULT -> wild
                                  Futhark.Representation.Primitive.Int32 -> wild1
                                  Futhark.Representation.Primitive.Int64 -> wild1 }
                             Futhark.Representation.Primitive.Int64
                             -> case b1 of wild3 {
                                  DEFAULT -> wild
                                  Futhark.Representation.Primitive.Int64 -> wild1 } }
                        Language.Futhark.Syntax.ToUnsigned ds -> wild1 }
                   Language.Futhark.Syntax.ToUnsigned a5
                   -> case y of wild1 {
                        DEFAULT -> wild
                        Language.Futhark.Syntax.ToUnsigned b1
                        -> case a5 of wild2 {
                             Futhark.Representation.Primitive.Int8
                             -> case b1 of wild3 { DEFAULT -> wild1 }
                             Futhark.Representation.Primitive.Int16
                             -> case b1 of wild3 {
                                  Futhark.Representation.Primitive.Int8 -> wild
                                  Futhark.Representation.Primitive.Int16 -> wild1
                                  Futhark.Representation.Primitive.Int32 -> wild1
                                  Futhark.Representation.Primitive.Int64 -> wild1 }
                             Futhark.Representation.Primitive.Int32
                             -> case b1 of wild3 {
                                  DEFAULT -> wild
                                  Futhark.Representation.Primitive.Int32 -> wild1
                                  Futhark.Representation.Primitive.Int64 -> wild1 }
                             Futhark.Representation.Primitive.Int64
                             -> case b1 of wild3 {
                                  DEFAULT -> wild
                                  Futhark.Representation.Primitive.Int64 -> wild1 } } } }) -}
e22888e07cdc5159294b6b72f8ca9208
  $fOrdUnOp_$cmin ::
    Language.Futhark.Syntax.UnOp
    -> Language.Futhark.Syntax.UnOp -> Language.Futhark.Syntax.UnOp
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Language.Futhark.Syntax.UnOp
                   y :: Language.Futhark.Syntax.UnOp ->
                 case x of wild {
                   Language.Futhark.Syntax.Not
                   -> case y of wild1 { DEFAULT -> Language.Futhark.Syntax.Not }
                   Language.Futhark.Syntax.Negate
                   -> case y of wild1 {
                        Language.Futhark.Syntax.Not -> Language.Futhark.Syntax.Not
                        Language.Futhark.Syntax.Negate -> Language.Futhark.Syntax.Negate
                        Language.Futhark.Syntax.Complement
                        -> Language.Futhark.Syntax.Negate
                        Language.Futhark.Syntax.Abs -> Language.Futhark.Syntax.Negate
                        Language.Futhark.Syntax.Signum -> Language.Futhark.Syntax.Negate
                        Language.Futhark.Syntax.ToFloat ds
                        -> Language.Futhark.Syntax.Negate
                        Language.Futhark.Syntax.ToSigned ds
                        -> Language.Futhark.Syntax.Negate
                        Language.Futhark.Syntax.ToUnsigned ds
                        -> Language.Futhark.Syntax.Negate }
                   Language.Futhark.Syntax.Complement
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        Language.Futhark.Syntax.Complement
                        -> Language.Futhark.Syntax.Complement
                        Language.Futhark.Syntax.Abs -> Language.Futhark.Syntax.Complement
                        Language.Futhark.Syntax.Signum
                        -> Language.Futhark.Syntax.Complement
                        Language.Futhark.Syntax.ToFloat ds
                        -> Language.Futhark.Syntax.Complement
                        Language.Futhark.Syntax.ToSigned ds
                        -> Language.Futhark.Syntax.Complement
                        Language.Futhark.Syntax.ToUnsigned ds
                        -> Language.Futhark.Syntax.Complement }
                   Language.Futhark.Syntax.Abs
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        Language.Futhark.Syntax.Abs -> Language.Futhark.Syntax.Abs
                        Language.Futhark.Syntax.Signum -> Language.Futhark.Syntax.Abs
                        Language.Futhark.Syntax.ToFloat ds -> Language.Futhark.Syntax.Abs
                        Language.Futhark.Syntax.ToSigned ds -> Language.Futhark.Syntax.Abs
                        Language.Futhark.Syntax.ToUnsigned ds
                        -> Language.Futhark.Syntax.Abs }
                   Language.Futhark.Syntax.Signum
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        Language.Futhark.Syntax.Signum -> Language.Futhark.Syntax.Signum
                        Language.Futhark.Syntax.ToFloat ds
                        -> Language.Futhark.Syntax.Signum
                        Language.Futhark.Syntax.ToSigned ds
                        -> Language.Futhark.Syntax.Signum
                        Language.Futhark.Syntax.ToUnsigned ds
                        -> Language.Futhark.Syntax.Signum }
                   Language.Futhark.Syntax.ToFloat a5
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        Language.Futhark.Syntax.ToFloat ds
                        -> case a5 of wild2 {
                             Futhark.Representation.Primitive.Float32
                             -> case ds of wild3 { DEFAULT -> wild }
                             Futhark.Representation.Primitive.Float64
                             -> case ds of wild3 {
                                  Futhark.Representation.Primitive.Float32 -> wild1
                                  Futhark.Representation.Primitive.Float64 -> wild } }
                        Language.Futhark.Syntax.ToSigned ds -> wild
                        Language.Futhark.Syntax.ToUnsigned ds -> wild }
                   Language.Futhark.Syntax.ToSigned a5
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        Language.Futhark.Syntax.ToSigned b1
                        -> case a5 of wild2 {
                             Futhark.Representation.Primitive.Int8
                             -> case b1 of wild3 { DEFAULT -> wild }
                             Futhark.Representation.Primitive.Int16
                             -> case b1 of wild3 {
                                  Futhark.Representation.Primitive.Int8 -> wild1
                                  Futhark.Representation.Primitive.Int16 -> wild
                                  Futhark.Representation.Primitive.Int32 -> wild
                                  Futhark.Representation.Primitive.Int64 -> wild }
                             Futhark.Representation.Primitive.Int32
                             -> case b1 of wild3 {
                                  DEFAULT -> wild1
                                  Futhark.Representation.Primitive.Int32 -> wild
                                  Futhark.Representation.Primitive.Int64 -> wild }
                             Futhark.Representation.Primitive.Int64
                             -> case b1 of wild3 {
                                  DEFAULT -> wild1
                                  Futhark.Representation.Primitive.Int64 -> wild } }
                        Language.Futhark.Syntax.ToUnsigned ds -> wild }
                   Language.Futhark.Syntax.ToUnsigned a5
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        Language.Futhark.Syntax.ToUnsigned b1
                        -> case a5 of wild2 {
                             Futhark.Representation.Primitive.Int8
                             -> case b1 of wild3 { DEFAULT -> wild }
                             Futhark.Representation.Primitive.Int16
                             -> case b1 of wild3 {
                                  Futhark.Representation.Primitive.Int8 -> wild1
                                  Futhark.Representation.Primitive.Int16 -> wild
                                  Futhark.Representation.Primitive.Int32 -> wild
                                  Futhark.Representation.Primitive.Int64 -> wild }
                             Futhark.Representation.Primitive.Int32
                             -> case b1 of wild3 {
                                  DEFAULT -> wild1
                                  Futhark.Representation.Primitive.Int32 -> wild
                                  Futhark.Representation.Primitive.Int64 -> wild }
                             Futhark.Representation.Primitive.Int64
                             -> case b1 of wild3 {
                                  DEFAULT -> wild1
                                  Futhark.Representation.Primitive.Int64 -> wild } } } }) -}
f5e74c92dfc57aa431b0945cf61909a2
  $fShowArrayTypeBase ::
    (GHC.Show.Show (shape vn), GHC.Show.Show (as vn)) =>
    GHC.Show.Show (Language.Futhark.Syntax.ArrayTypeBase shape as vn)
  DFunId[0]
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (shape :: * -> *)
                      @ (as :: * -> *)
                      @ vn
                      $dShow :: GHC.Show.Show (shape vn)
                      $dShow1 :: GHC.Show.Show (as vn).
                  @ (Language.Futhark.Syntax.ArrayTypeBase shape as vn)
                  (Language.Futhark.Syntax.$fShowArrayTypeBase_$cshowsPrec
                     @ shape
                     @ as
                     @ vn
                     $dShow
                     $dShow1)
                  (Language.Futhark.Syntax.$fShowArrayTypeBase_$cshow
                     @ shape
                     @ as
                     @ vn
                     $dShow
                     $dShow1)
                  (Language.Futhark.Syntax.$fShowArrayTypeBase_$cshowList
                     @ shape
                     @ as
                     @ vn
                     $dShow
                     $dShow1) -}
dcdbebc2320bceaffae198d28a8872f2
  $fShowArrayTypeBase1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TupleArray "#) -}
9ec56638d974d977929faa37079b2d9d
  $fShowArrayTypeBase10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Signed "#) -}
9716f284ffc2078864f92d2a23aa62cd
  $fShowArrayTypeBase2 ::
    Language.Futhark.Syntax.TupleArrayElemTypeBase
      Language.Futhark.Syntax.Rank Language.Futhark.Syntax.NoInfo ()
    -> GHC.Show.ShowS
  {- Arity: 2 -}
45ea088ea2859a047e0778ce9276118c
  $fShowArrayTypeBase3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PrimArray "#) -}
d2d244df11ccea03631f4b6df4bb30e4
  $fShowArrayTypeBase4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoInfo"#) -}
076463a5740d24d893272b10ae687b15
  $fShowArrayTypeBase5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Rank "#) -}
6cc1347c598526abe9e2de7503a75572
  $fShowArrayTypeBase6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11) -}
79dff6986da8e79e5239c099f8d90bb2
  $fShowArrayTypeBase7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Bool"#) -}
9f239891d55808f04c082371cff55301
  $fShowArrayTypeBase8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FloatType "#) -}
d758ed09720187e5a3e660bde46f24c5
  $fShowArrayTypeBase9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Unsigned "#) -}
f5e74c92dfc57aa431b0945cf61909a2
  $fShowArrayTypeBase_$cshow ::
    (GHC.Show.Show (shape vn), GHC.Show.Show (as vn)) =>
    Language.Futhark.Syntax.ArrayTypeBase shape as vn
    -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (shape :: * -> *)
                   @ (as :: * -> *)
                   @ vn
                   $dShow :: GHC.Show.Show (shape vn)
                   $dShow1 :: GHC.Show.Show (as vn)
                   x :: Language.Futhark.Syntax.ArrayTypeBase shape as vn ->
                 Language.Futhark.Syntax.$fShowArrayTypeBase_$cshowsPrec
                   @ shape
                   @ as
                   @ vn
                   $dShow
                   $dShow1
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f5e74c92dfc57aa431b0945cf61909a2
  $fShowArrayTypeBase_$cshowList ::
    (GHC.Show.Show (shape vn), GHC.Show.Show (as vn)) =>
    [Language.Futhark.Syntax.ArrayTypeBase shape as vn]
    -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ (shape :: * -> *)
                   @ (as :: * -> *)
                   @ vn
                   $dShow :: GHC.Show.Show (shape vn)
                   $dShow1 :: GHC.Show.Show (as vn)
                   eta :: [Language.Futhark.Syntax.ArrayTypeBase shape as vn]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.ArrayTypeBase shape as vn)
                   (Language.Futhark.Syntax.$fShowArrayTypeBase_$cshowsPrec
                      @ shape
                      @ as
                      @ vn
                      $dShow
                      $dShow1
                      Language.Futhark.Syntax.$fFoldableNoInfo4)
                   eta
                   eta1) -}
f5e74c92dfc57aa431b0945cf61909a2
  $fShowArrayTypeBase_$cshowsPrec ::
    (GHC.Show.Show (shape vn), GHC.Show.Show (as vn)) =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.ArrayTypeBase shape as vn
    -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ (shape :: * -> *)
                   @ (as :: * -> *)
                   @ vn
                   w :: GHC.Show.Show (shape vn)
                   w1 :: GHC.Show.Show (as vn)
                   w2 :: GHC.Types.Int
                   w3 :: Language.Futhark.Syntax.ArrayTypeBase shape as vn ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Language.Futhark.Syntax.$w$cshowsPrec1
                   @ shape
                   @ as
                   @ vn
                   w
                   w1
                   ww1
                   w3 }) -}
38fd8ca4b903061d48e25eb1353c4a5e
  $fShowArrayTypeBase_$cshowsPrec1 ::
    GHC.Types.Int -> Language.Futhark.Syntax.PrimType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ a5 :: GHC.Types.Int
                   ds :: Language.Futhark.Syntax.PrimType
                   eta :: GHC.Base.String ->
                 case ds of wild {
                   Language.Futhark.Syntax.Signed b1
                   -> case a5 of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Syntax.$fShowArrayTypeBase10
                             (Futhark.Representation.Primitive.$w$cshowsPrec3 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowArrayTypeBase10
                                (Futhark.Representation.Primitive.$w$cshowsPrec3
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } }
                   Language.Futhark.Syntax.Unsigned b1
                   -> case a5 of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Syntax.$fShowArrayTypeBase9
                             (Futhark.Representation.Primitive.$w$cshowsPrec3 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowArrayTypeBase9
                                (Futhark.Representation.Primitive.$w$cshowsPrec3
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } }
                   Language.Futhark.Syntax.FloatType b1
                   -> case a5 of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Language.Futhark.Syntax.$fShowArrayTypeBase8
                            (case b1 of wild2 {
                               Futhark.Representation.Primitive.Float32
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Futhark.Representation.Primitive.$fShowFloatType3
                                    x1
                               Futhark.Representation.Primitive.Float64
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Futhark.Representation.Primitive.$fShowFloatType2
                                    x1 })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } }
                   Language.Futhark.Syntax.Bool
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.Futhark.Syntax.$fShowArrayTypeBase7
                        eta }) -}
d07c5b7b353387a89237c9062561c998
  $fShowBinOp :: GHC.Show.Show Language.Futhark.Syntax.BinOp
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.BinOp
                  Language.Futhark.Syntax.$fShowBinOp_$cshowsPrec
                  Language.Futhark.Syntax.$fShowBinOp_$cshow
                  Language.Futhark.Syntax.$fShowBinOp_$cshowList -}
d07c5b7b353387a89237c9062561c998
  $fShowBinOp_$cshow ::
    Language.Futhark.Syntax.BinOp -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Language.Futhark.Syntax.BinOp ->
                 Language.Futhark.Syntax.$fShowBinOp_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d07c5b7b353387a89237c9062561c998
  $fShowBinOp_$cshowList ::
    [Language.Futhark.Syntax.BinOp] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Language.Futhark.Syntax.BinOp
                   Language.Futhark.Syntax.$w$cshowsPrec3) -}
d07c5b7b353387a89237c9062561c998
  $fShowBinOp_$cshowsPrec ::
    GHC.Types.Int -> Language.Futhark.Syntax.BinOp -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: Language.Futhark.Syntax.BinOp
                   w2 :: GHC.Base.String ->
                 Language.Futhark.Syntax.$w$cshowsPrec3 w1 w2) -}
0fa33a778e20c3a3e6c1bcf68b69cf89
  $fShowDecBase ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Show.Show (Language.Futhark.Syntax.DecBase f vn)
  DFunId[0]
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *)
                      @ vn
                      $dShowable :: Language.Futhark.Syntax.Showable f vn.
                  @ (Language.Futhark.Syntax.DecBase f vn)
                  (Language.Futhark.Syntax.$fShowDecBase_$cshowsPrec
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowDecBase_$cshow @ f @ vn $dShowable)
                  (Language.Futhark.Syntax.$fShowDecBase_$cshowList
                     @ f
                     @ vn
                     $dShowable) -}
5c01387f43c907a81800cc44c7f62483
  $fShowDecBase1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ModDec "#) -}
8b3e4ee5d06856e0a37f54ab26e1a948
  $fShowDecBase10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TypeDec "#) -}
a13dbe63c6aeb84316ddce821104a4be
  $fShowDecBase11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TypeDef {"#) -}
a4b65ad86289dd209877d98e3757a3b7
  $fShowDecBase12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "typeDefLocation = "#) -}
ae46ed252d8982bfbc4f41c3c8810e16
  $fShowDecBase13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "userType = "#) -}
696a9d87dd5a53731bd06f6f9311ce71
  $fShowDecBase14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "typeAlias = "#) -}
9648bbd0bee3a3a5369a631565d8f31e
  $fShowDecBase15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "expandedType = "#) -}
7bfbef2eacac2e5e7d7e9e90b11458d8
  $fShowDecBase16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "declaredType = "#) -}
7cb02af3604451b57ed2737a975b3676
  $fShowDecBase17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TypeDecl {"#) -}
237d9cd29793fe619df70df5553aecea
  $fShowDecBase18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FunDec "#) -}
9bc5eef19cc03c89437a3444a0683e63
  $fShowDecBase19 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1f26b71cc20ee07bdf05fbd0ff6f3bd9
  $fShowDecBase2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SigDef {"#) -}
455fb361e40a1f1d36374eb159527296
  $fShowDecBase3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
fa6fa7cbf43a865c7793183807ef3681
  $fShowDecBase4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "sigDefLocation = "#) -}
8d5d5c1dcec56aca7d7412a23b24c44a
  $fShowDecBase5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "sigDecls = "#) -}
51c7b52af56de86a8e2aecf9b12e205d
  $fShowDecBase6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
808405ac15b32cabc2c29f5c2935f306
  $fShowDecBase7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "sigName = "#) -}
16b67007ce8fcdb8e5f816801c125d98
  $fShowDecBase8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SigDec "#) -}
4df492762d60ca3dcd6c566876401e34
  $fShowDecBase9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FunOrTypeDec "#) -}
0fa33a778e20c3a3e6c1bcf68b69cf89
  $fShowDecBase_$cshow ::
    Language.Futhark.Syntax.Showable f vn =>
    Language.Futhark.Syntax.DecBase f vn -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U>,
     Unfolding: (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   x :: Language.Futhark.Syntax.DecBase f vn ->
                 case x of wild {
                   Language.Futhark.Syntax.FunOrTypeDec b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.Futhark.Syntax.$fShowDecBase9
                        (case b1 of wild1 {
                           Language.Futhark.Syntax.FunDec b2
                           -> GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows9
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Language.Futhark.Syntax.$fShowDecBase18
                                   (case b2 of ww { Language.Futhark.Syntax.FunDef ww1 ww2 ww3 ww4 ww5 ww6 ->
                                    Language.Futhark.Syntax.$w$cshowsPrec12
                                      @ f
                                      @ vn
                                      $dShowable
                                      11
                                      ww1
                                      ww2
                                      ww3
                                      ww4
                                      ww5
                                      Language.Futhark.Syntax.$fShowDecBase19 }))
                           Language.Futhark.Syntax.TypeDec b2
                           -> GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows9
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Language.Futhark.Syntax.$fShowDecBase10
                                   (case b2 of ww { Language.Futhark.Syntax.TypeDef ww1 ww2 ww3 ->
                                    Language.Futhark.Syntax.$w$cshowsPrec9
                                      @ f
                                      @ vn
                                      $dShowable
                                      11
                                      ww1
                                      ww2
                                      Language.Futhark.Syntax.$fShowDecBase19 })) })
                   Language.Futhark.Syntax.SigDec b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.Futhark.Syntax.$fShowDecBase8
                        (case b1 of ww { Language.Futhark.Syntax.SigDef ww1 ww2 ww3 ->
                         Language.Futhark.Syntax.$w$cshowsPrec6
                           @ f
                           @ vn
                           $dShowable
                           11
                           ww1
                           ww2
                           (GHC.Types.[] @ GHC.Types.Char) })
                   Language.Futhark.Syntax.ModDec b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.Futhark.Syntax.$fShowDecBase1
                        (case b1 of ww { Language.Futhark.Syntax.ModDef ww1 ww2 ww3 ->
                         Language.Futhark.Syntax.$w$cshowsPrec5
                           @ f
                           @ vn
                           $dShowable
                           11
                           ww1
                           ww2
                           (GHC.Types.[] @ GHC.Types.Char) }) }) -}
0fa33a778e20c3a3e6c1bcf68b69cf89
  $fShowDecBase_$cshowList ::
    Language.Futhark.Syntax.Showable f vn =>
    [Language.Futhark.Syntax.DecBase f vn] -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   eta :: [Language.Futhark.Syntax.DecBase f vn]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.DecBase f vn)
                   (Language.Futhark.Syntax.$fShowDecBase_$cshowsPrec
                      @ f
                      @ vn
                      $dShowable
                      Language.Futhark.Syntax.$fFoldableNoInfo4)
                   eta
                   eta1) -}
0fa33a778e20c3a3e6c1bcf68b69cf89
  $fShowDecBase_$cshowsPrec ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.DecBase f vn -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   w1 :: GHC.Types.Int
                   w2 :: Language.Futhark.Syntax.DecBase f vn ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Language.Futhark.Syntax.$w$cshowsPrec4 @ f @ vn w ww1 w2 }) -}
db30d13db6ddfb68145b68842fcdae94
  $fShowDiet :: GHC.Show.Show Language.Futhark.Syntax.Diet
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.Diet
                  Language.Futhark.Syntax.$fShowDiet_$cshowsPrec
                  Language.Futhark.Syntax.$fShowDiet_$cshow
                  Language.Futhark.Syntax.$fShowDiet_$cshowList -}
db30d13db6ddfb68145b68842fcdae94
  $fShowDiet1 :: Language.Futhark.Syntax.Diet -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Language.Futhark.Syntax.$fShowDiet_$cshowsPrec
                   Language.Futhark.Syntax.$fFoldableNoInfo4) -}
db30d13db6ddfb68145b68842fcdae94
  $fShowDiet_$cshow ::
    Language.Futhark.Syntax.Diet -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Language.Futhark.Syntax.Diet ->
                 Language.Futhark.Syntax.$fShowDiet_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
db30d13db6ddfb68145b68842fcdae94
  $fShowDiet_$cshowList ::
    [Language.Futhark.Syntax.Diet] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Language.Futhark.Syntax.Diet
                   Language.Futhark.Syntax.$fShowDiet1) -}
db30d13db6ddfb68145b68842fcdae94
  $fShowDiet_$cshowsPrec ::
    GHC.Types.Int -> Language.Futhark.Syntax.Diet -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
1e77a56c44dbb158500633823a0c068b
  $fShowDimDecl ::
    GHC.Show.Show vn =>
    GHC.Show.Show (Language.Futhark.Syntax.DimDecl vn)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ vn $dShow :: GHC.Show.Show vn.
                  @ (Language.Futhark.Syntax.DimDecl vn)
                  (Language.Futhark.Syntax.$fShowDimDecl_$cshowsPrec @ vn $dShow)
                  (Language.Futhark.Syntax.$fShowDimDecl_$cshow @ vn $dShow)
                  (Language.Futhark.Syntax.$fShowDimDecl_$cshowList @ vn $dShow) -}
63af81c4ef2a46da927ee9b8767fc5c7
  $fShowDimDecl1 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Syntax.$fShowDimDecl2) -}
726ed926e4f00044d4e5e00d86bfb11b
  $fShowDimDecl2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AnyDim"#) -}
53c4c92af6ae0ab36a26c820f8cbfa60
  $fShowDimDecl3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ConstDim "#) -}
ca7fcc9a1c0a7c529b9a6bbf96722368
  $fShowDimDecl4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NamedDim "#) -}
1e77a56c44dbb158500633823a0c068b
  $fShowDimDecl_$cshow ::
    GHC.Show.Show vn =>
    Language.Futhark.Syntax.DimDecl vn -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ vn
                   $dShow :: GHC.Show.Show vn
                   x :: Language.Futhark.Syntax.DimDecl vn ->
                 case x of wild {
                   Language.Futhark.Syntax.NamedDim b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.Futhark.Syntax.$fShowDimDecl4
                        (GHC.Show.showsPrec
                           @ vn
                           $dShow
                           Language.Futhark.Syntax.$fShowArrayTypeBase6
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   Language.Futhark.Syntax.ConstDim b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.Futhark.Syntax.$fShowDimDecl3
                        (case b1 of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                11
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   Language.Futhark.Syntax.AnyDim
                   -> Language.Futhark.Syntax.$fShowDimDecl2 }) -}
1e77a56c44dbb158500633823a0c068b
  $fShowDimDecl_$cshowList ::
    GHC.Show.Show vn =>
    [Language.Futhark.Syntax.DimDecl vn] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ vn
                   $dShow :: GHC.Show.Show vn
                   eta :: [Language.Futhark.Syntax.DimDecl vn]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.DimDecl vn)
                   (Language.Futhark.Syntax.$fShowDimDecl_$cshowsPrec
                      @ vn
                      $dShow
                      Language.Futhark.Syntax.$fFoldableNoInfo4)
                   eta
                   eta1) -}
1e77a56c44dbb158500633823a0c068b
  $fShowDimDecl_$cshowsPrec ::
    GHC.Show.Show vn =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.DimDecl vn -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ vn
                   $dShow :: GHC.Show.Show vn
                   a5 :: GHC.Types.Int
                   ds :: Language.Futhark.Syntax.DimDecl vn ->
                 case ds of wild {
                   Language.Futhark.Syntax.NamedDim b1
                   -> case a5 of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec
                            @ vn
                            $dShow
                            Language.Futhark.Syntax.$fShowArrayTypeBase6
                            b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Syntax.$fShowDimDecl4
                             (g x1)
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowDimDecl4
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1))) } }
                   Language.Futhark.Syntax.ConstDim b1
                   -> case a5 of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Syntax.$fShowDimDecl3
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11 ww3 x1 of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowDimDecl3
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows8
                                           x1) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) } }
                   Language.Futhark.Syntax.AnyDim
                   -> Language.Futhark.Syntax.$fShowDimDecl1 }) -}
970de88f5513e7faf9ba9d7c216b7e50
  $fShowExpBase ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Show.Show (Language.Futhark.Syntax.ExpBase f vn)
  DFunId[0]
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *)
                      @ vn
                      $dShowable :: Language.Futhark.Syntax.Showable f vn.
                  @ (Language.Futhark.Syntax.ExpBase f vn)
                  (Language.Futhark.Syntax.$fShowExpBase_$cshowsPrec
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowExpBase_$cshow @ f @ vn $dShowable)
                  (Language.Futhark.Syntax.$fShowExpBase_$cshowList
                     @ f
                     @ vn
                     $dShowable) -}
970de88f5513e7faf9ba9d7c216b7e50
  $fShowExpBase_$cshow ::
    Language.Futhark.Syntax.Showable f vn =>
    Language.Futhark.Syntax.ExpBase f vn -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   x :: Language.Futhark.Syntax.ExpBase f vn ->
                 Language.Futhark.Syntax.$fShowExpBase_$cshowsPrec
                   @ f
                   @ vn
                   $dShowable
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
970de88f5513e7faf9ba9d7c216b7e50
  $fShowExpBase_$cshowList ::
    Language.Futhark.Syntax.Showable f vn =>
    [Language.Futhark.Syntax.ExpBase f vn] -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   eta :: [Language.Futhark.Syntax.ExpBase f vn]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.ExpBase f vn)
                   (Language.Futhark.Syntax.$fShowExpBase_$cshowsPrec
                      @ f
                      @ vn
                      $dShowable
                      Language.Futhark.Syntax.$fFoldableNoInfo4)
                   eta
                   eta1) -}
970de88f5513e7faf9ba9d7c216b7e50
  $fShowExpBase_$cshowsPrec ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.ExpBase f vn -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   w1 :: GHC.Types.Int
                   w2 :: Language.Futhark.Syntax.ExpBase f vn ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Language.Futhark.Syntax.$w$cshowsPrec13 @ f @ vn w ww1 w2 }) -}
6a7e7f623049cf90a3840b9e074fa90f
  $fShowForLoopDirection ::
    GHC.Show.Show Language.Futhark.Syntax.ForLoopDirection
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.ForLoopDirection
                  Language.Futhark.Syntax.$fShowForLoopDirection_$cshowsPrec
                  Language.Futhark.Syntax.$fShowForLoopDirection_$cshow
                  Language.Futhark.Syntax.$fShowForLoopDirection_$cshowList -}
6a7e7f623049cf90a3840b9e074fa90f
  $fShowForLoopDirection1 ::
    Language.Futhark.Syntax.ForLoopDirection -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Language.Futhark.Syntax.ForLoopDirection
                   eta :: GHC.Base.String ->
                 case ds of wild {
                   Language.Futhark.Syntax.FromUpTo
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.Futhark.Syntax.$fShowForLoopDirection3)
                        eta
                   Language.Futhark.Syntax.FromDownTo
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.Futhark.Syntax.$fShowForLoopDirection2)
                        eta }) -}
dba754c9c30749107f0e919006d17035
  $fShowForLoopDirection2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FromDownTo"#) -}
c58fa33c4f1c5846000b378672580d62
  $fShowForLoopDirection3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FromUpTo"#) -}
6a7e7f623049cf90a3840b9e074fa90f
  $fShowForLoopDirection_$cshow ::
    Language.Futhark.Syntax.ForLoopDirection -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Language.Futhark.Syntax.ForLoopDirection ->
                 case x of wild {
                   Language.Futhark.Syntax.FromUpTo
                   -> Language.Futhark.Syntax.$fShowForLoopDirection3
                   Language.Futhark.Syntax.FromDownTo
                   -> Language.Futhark.Syntax.$fShowForLoopDirection2 }) -}
6a7e7f623049cf90a3840b9e074fa90f
  $fShowForLoopDirection_$cshowList ::
    [Language.Futhark.Syntax.ForLoopDirection] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Language.Futhark.Syntax.ForLoopDirection
                   Language.Futhark.Syntax.$fShowForLoopDirection1) -}
6a7e7f623049cf90a3840b9e074fa90f
  $fShowForLoopDirection_$cshowsPrec ::
    GHC.Types.Int
    -> Language.Futhark.Syntax.ForLoopDirection -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: Language.Futhark.Syntax.ForLoopDirection
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   Language.Futhark.Syntax.FromUpTo
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.Futhark.Syntax.$fShowForLoopDirection3)
                        eta
                   Language.Futhark.Syntax.FromDownTo
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.Futhark.Syntax.$fShowForLoopDirection2)
                        eta }) -}
7a0c20ff6ce6f0f3284eed57b4934773
  $fShowFunDefBase ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Show.Show (Language.Futhark.Syntax.FunDefBase f vn)
  DFunId[0]
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *)
                      @ vn
                      $dShowable :: Language.Futhark.Syntax.Showable f vn.
                  @ (Language.Futhark.Syntax.FunDefBase f vn)
                  (Language.Futhark.Syntax.$fShowFunDefBase_$cshowsPrec
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowFunDefBase_$cshow
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowFunDefBase_$cshowList
                     @ f
                     @ vn
                     $dShowable) -}
7a0c20ff6ce6f0f3284eed57b4934773
  $fShowFunDefBase_$cshow ::
    Language.Futhark.Syntax.Showable f vn =>
    Language.Futhark.Syntax.FunDefBase f vn -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U(U,U(U(U,U,U),U(U,U(U,U,U))),1*U(1*U,U),U,1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   x :: Language.Futhark.Syntax.FunDefBase f vn ->
                 Language.Futhark.Syntax.$fShowFunDefBase_$cshowsPrec
                   @ f
                   @ vn
                   $dShowable
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7a0c20ff6ce6f0f3284eed57b4934773
  $fShowFunDefBase_$cshowList ::
    Language.Futhark.Syntax.Showable f vn =>
    [Language.Futhark.Syntax.FunDefBase f vn] -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   eta :: [Language.Futhark.Syntax.FunDefBase f vn]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.FunDefBase f vn)
                   (Language.Futhark.Syntax.$fShowFunDefBase_$cshowsPrec
                      @ f
                      @ vn
                      $dShowable
                      Language.Futhark.Syntax.$fFoldableNoInfo4)
                   eta
                   eta1) -}
7a0c20ff6ce6f0f3284eed57b4934773
  $fShowFunDefBase_$cshowsPrec ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.FunDefBase f vn -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U(U)><S,1*U(U,U(U(U,U,U),U(U,U(U,U,U))),1*U(1*U,U),U,1*U,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   w1 :: GHC.Types.Int
                   w2 :: Language.Futhark.Syntax.FunDefBase f vn ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.Futhark.Syntax.FunDef ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Language.Futhark.Syntax.$w$cshowsPrec12
                   @ f
                   @ vn
                   w
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 } }) -}
d421b41fdf8c94dbd148dd9f652f8857
  $fShowFunOrTypeDecBase ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Show.Show (Language.Futhark.Syntax.FunOrTypeDecBase f vn)
  DFunId[0]
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *)
                      @ vn
                      $dShowable :: Language.Futhark.Syntax.Showable f vn.
                  @ (Language.Futhark.Syntax.FunOrTypeDecBase f vn)
                  (Language.Futhark.Syntax.$fShowFunOrTypeDecBase_$cshowsPrec
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowFunOrTypeDecBase_$cshow
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowFunOrTypeDecBase_$cshowList
                     @ f
                     @ vn
                     $dShowable) -}
d421b41fdf8c94dbd148dd9f652f8857
  $fShowFunOrTypeDecBase_$cshow ::
    Language.Futhark.Syntax.Showable f vn =>
    Language.Futhark.Syntax.FunOrTypeDecBase f vn -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U>,
     Unfolding: (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   x :: Language.Futhark.Syntax.FunOrTypeDecBase f vn ->
                 case x of wild {
                   Language.Futhark.Syntax.FunDec b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.Futhark.Syntax.$fShowDecBase18
                        (case b1 of ww { Language.Futhark.Syntax.FunDef ww1 ww2 ww3 ww4 ww5 ww6 ->
                         Language.Futhark.Syntax.$w$cshowsPrec12
                           @ f
                           @ vn
                           $dShowable
                           11
                           ww1
                           ww2
                           ww3
                           ww4
                           ww5
                           (GHC.Types.[] @ GHC.Types.Char) })
                   Language.Futhark.Syntax.TypeDec b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.Futhark.Syntax.$fShowDecBase10
                        (case b1 of ww { Language.Futhark.Syntax.TypeDef ww1 ww2 ww3 ->
                         Language.Futhark.Syntax.$w$cshowsPrec9
                           @ f
                           @ vn
                           $dShowable
                           11
                           ww1
                           ww2
                           (GHC.Types.[] @ GHC.Types.Char) }) }) -}
d421b41fdf8c94dbd148dd9f652f8857
  $fShowFunOrTypeDecBase_$cshowList ::
    Language.Futhark.Syntax.Showable f vn =>
    [Language.Futhark.Syntax.FunOrTypeDecBase f vn] -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   eta :: [Language.Futhark.Syntax.FunOrTypeDecBase f vn]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.FunOrTypeDecBase f vn)
                   (Language.Futhark.Syntax.$fShowFunOrTypeDecBase_$cshowsPrec
                      @ f
                      @ vn
                      $dShowable
                      Language.Futhark.Syntax.$fFoldableNoInfo4)
                   eta
                   eta1) -}
d421b41fdf8c94dbd148dd9f652f8857
  $fShowFunOrTypeDecBase_$cshowsPrec ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.FunOrTypeDecBase f vn -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   w1 :: GHC.Types.Int
                   w2 :: Language.Futhark.Syntax.FunOrTypeDecBase f vn ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Language.Futhark.Syntax.$w$cshowsPrec8 @ f @ vn w ww1 w2 }) -}
922bd38dbf61b406ded790909459e61d
  $fShowIdentBase ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Show.Show (Language.Futhark.Syntax.IdentBase f vn)
  DFunId[0]
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(C(C1(U)),A,A),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *)
                      @ vn
                      $dShowable :: Language.Futhark.Syntax.Showable f vn.
                  @ (Language.Futhark.Syntax.IdentBase f vn)
                  (Language.Futhark.Syntax.$fShowIdentBase_$cshowsPrec
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowIdentBase_$cshow
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowIdentBase_$cshowList
                     @ f
                     @ vn
                     $dShowable) -}
21c5ffc717b1f9f70be53499487f9593
  $fShowIdentBase1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Ident {"#) -}
c1e616db4ce458c8b957a28768e63ab7
  $fShowIdentBase2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "identSrcLoc = "#) -}
238675ee36cfa7733a47e80cc1a80402
  $fShowIdentBase3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "identType = "#) -}
b18c266435fea6f955c401ab08067480
  $fShowIdentBase4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "identName = "#) -}
922bd38dbf61b406ded790909459e61d
  $fShowIdentBase_$cshow ::
    Language.Futhark.Syntax.Showable f vn =>
    Language.Futhark.Syntax.IdentBase f vn -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(C(C1(U)),A,A),A)><S,1*U(U,U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   x :: Language.Futhark.Syntax.IdentBase f vn ->
                 Language.Futhark.Syntax.$fShowIdentBase_$cshowsPrec
                   @ f
                   @ vn
                   $dShowable
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
922bd38dbf61b406ded790909459e61d
  $fShowIdentBase_$cshowList ::
    Language.Futhark.Syntax.Showable f vn =>
    [Language.Futhark.Syntax.IdentBase f vn] -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(C(C1(U)),A,A),A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   eta :: [Language.Futhark.Syntax.IdentBase f vn]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.IdentBase f vn)
                   (Language.Futhark.Syntax.$fShowIdentBase_$cshowsPrec
                      @ f
                      @ vn
                      $dShowable
                      Language.Futhark.Syntax.$fFoldableNoInfo4)
                   eta
                   eta1) -}
922bd38dbf61b406ded790909459e61d
  $fShowIdentBase_$cshowsPrec ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.IdentBase f vn -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(1*U(1*C1(C1(U)),A,A),A,1*U(1*C1(C1(U)),A,A),A)><S,1*U(U)><S,1*U(U,U,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   w1 :: GHC.Types.Int
                   w2 :: Language.Futhark.Syntax.IdentBase f vn ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.Futhark.Syntax.Ident ww3 ww4 ww5 ->
                 Language.Futhark.Syntax.$w$cshowsPrec14
                   @ f
                   @ vn
                   w
                   ww1
                   ww3
                   ww4 } }) -}
36b022f74c11b45b268c679b91cb8a0a
  $fShowInfo ::
    GHC.Show.Show a => GHC.Show.Show (Language.Futhark.Syntax.Info a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a5 $dShow :: GHC.Show.Show a5.
                  @ (Language.Futhark.Syntax.Info a5)
                  (Language.Futhark.Syntax.$fShowInfo_$cshowsPrec @ a5 $dShow)
                  (Language.Futhark.Syntax.$fShowInfo_$cshow @ a5 $dShow)
                  (Language.Futhark.Syntax.$fShowInfo_$cshowList @ a5 $dShow) -}
9c109defa8131e11fc800c047c67c8d0
  $fShowInfo1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unInfo = "#) -}
40d0af4238a58a9e048c5fb74d2084a5
  $fShowInfo2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Info {"#) -}
232a89c60ad736bf6fc54efc1440caad
  $fShowInfo3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Syntax.$fShowDecBase3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
36b022f74c11b45b268c679b91cb8a0a
  $fShowInfo_$cshow ::
    GHC.Show.Show a =>
    Language.Futhark.Syntax.Info a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,U>,
     Unfolding: (\ @ a5
                   $dShow :: GHC.Show.Show a5
                   x :: Language.Futhark.Syntax.Info a5 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Language.Futhark.Syntax.$fShowInfo2
                   (GHC.Base.++
                      @ GHC.Types.Char
                      Language.Futhark.Syntax.$fShowInfo1
                      (GHC.Show.showsPrec
                         @ a5
                         $dShow
                         Language.Futhark.Syntax.$fFoldableNoInfo4
                         x `cast` (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)
                         Language.Futhark.Syntax.$fShowInfo3))) -}
36b022f74c11b45b268c679b91cb8a0a
  $fShowInfo_$cshowList ::
    GHC.Show.Show a =>
    [Language.Futhark.Syntax.Info a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a5
                   $dShow :: GHC.Show.Show a5
                   eta :: [Language.Futhark.Syntax.Info a5]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.Info a5)
                   (Language.Futhark.Syntax.$fShowInfo_$cshowsPrec
                      @ a5
                      $dShow
                      Language.Futhark.Syntax.$fFoldableNoInfo4)
                   eta
                   eta1) -}
36b022f74c11b45b268c679b91cb8a0a
  $fShowInfo_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Language.Futhark.Syntax.Info a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a5
                   w :: GHC.Show.Show a5
                   w1 :: GHC.Types.Int
                   w2 :: Language.Futhark.Syntax.Info a5 ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Language.Futhark.Syntax.$w$cshowsPrec15 @ a5 w ww1 w2 }) -}
970de88f5513e7faf9ba9d7c216b7e50
  $fShowLambdaBase ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Show.Show (Language.Futhark.Syntax.LambdaBase f vn)
  DFunId[0]
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *)
                      @ vn
                      $dShowable :: Language.Futhark.Syntax.Showable f vn.
                  @ (Language.Futhark.Syntax.LambdaBase f vn)
                  (Language.Futhark.Syntax.$fShowLambdaBase_$cshowsPrec
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowLambdaBase_$cshow
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowLambdaBase_$cshowList
                     @ f
                     @ vn
                     $dShowable) -}
970de88f5513e7faf9ba9d7c216b7e50
  $fShowLambdaBase_$cshow ::
    Language.Futhark.Syntax.Showable f vn =>
    Language.Futhark.Syntax.LambdaBase f vn -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   x :: Language.Futhark.Syntax.LambdaBase f vn ->
                 Language.Futhark.Syntax.$fShowLambdaBase_$cshowsPrec
                   @ f
                   @ vn
                   $dShowable
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
970de88f5513e7faf9ba9d7c216b7e50
  $fShowLambdaBase_$cshowList ::
    Language.Futhark.Syntax.Showable f vn =>
    [Language.Futhark.Syntax.LambdaBase f vn] -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   eta :: [Language.Futhark.Syntax.LambdaBase f vn]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.LambdaBase f vn)
                   (Language.Futhark.Syntax.$fShowLambdaBase_$cshowsPrec
                      @ f
                      @ vn
                      $dShowable
                      Language.Futhark.Syntax.$fFoldableNoInfo4)
                   eta
                   eta1) -}
970de88f5513e7faf9ba9d7c216b7e50
  $fShowLambdaBase_$cshowsPrec ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.LambdaBase f vn -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   w1 :: GHC.Types.Int
                   w2 :: Language.Futhark.Syntax.LambdaBase f vn ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Language.Futhark.Syntax.$w$cshowsPrec16 @ f @ vn w ww1 w2 }) -}
970de88f5513e7faf9ba9d7c216b7e50
  $fShowLoopFormBase ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Show.Show (Language.Futhark.Syntax.LoopFormBase f vn)
  DFunId[0]
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *)
                      @ vn
                      $dShowable :: Language.Futhark.Syntax.Showable f vn.
                  @ (Language.Futhark.Syntax.LoopFormBase f vn)
                  (Language.Futhark.Syntax.$fShowLoopFormBase_$cshowsPrec
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowLoopFormBase_$cshow
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowLoopFormBase_$cshowList
                     @ f
                     @ vn
                     $dShowable) -}
d17f3822a88ec03ee1ad13d0f4a30d25
  $fShowLoopFormBase1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "While "#) -}
d78636d3e21cd55e1feafc209d698ad0
  $fShowLoopFormBase2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "For "#) -}
970de88f5513e7faf9ba9d7c216b7e50
  $fShowLoopFormBase_$cshow ::
    Language.Futhark.Syntax.Showable f vn =>
    Language.Futhark.Syntax.LoopFormBase f vn -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   x :: Language.Futhark.Syntax.LoopFormBase f vn ->
                 Language.Futhark.Syntax.$fShowLoopFormBase_$cshowsPrec
                   @ f
                   @ vn
                   $dShowable
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
970de88f5513e7faf9ba9d7c216b7e50
  $fShowLoopFormBase_$cshowList ::
    Language.Futhark.Syntax.Showable f vn =>
    [Language.Futhark.Syntax.LoopFormBase f vn] -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   eta :: [Language.Futhark.Syntax.LoopFormBase f vn]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.LoopFormBase f vn)
                   (Language.Futhark.Syntax.$fShowLoopFormBase_$cshowsPrec
                      @ f
                      @ vn
                      $dShowable
                      Language.Futhark.Syntax.$fFoldableNoInfo4)
                   eta
                   eta1) -}
970de88f5513e7faf9ba9d7c216b7e50
  $fShowLoopFormBase_$cshowsPrec ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.LoopFormBase f vn -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   w1 :: GHC.Types.Int
                   w2 :: Language.Futhark.Syntax.LoopFormBase f vn ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Language.Futhark.Syntax.$w$cshowsPrec17 @ f @ vn w ww1 w2 }) -}
0fa33a778e20c3a3e6c1bcf68b69cf89
  $fShowModDefBase ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Show.Show (Language.Futhark.Syntax.ModDefBase f vn)
  DFunId[0]
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *)
                      @ vn
                      $dShowable :: Language.Futhark.Syntax.Showable f vn.
                  @ (Language.Futhark.Syntax.ModDefBase f vn)
                  (Language.Futhark.Syntax.$fShowModDefBase_$cshowsPrec
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowModDefBase_$cshow
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowModDefBase_$cshowList
                     @ f
                     @ vn
                     $dShowable) -}
0fa33a778e20c3a3e6c1bcf68b69cf89
  $fShowModDefBase_$cshow ::
    Language.Futhark.Syntax.Showable f vn =>
    Language.Futhark.Syntax.ModDefBase f vn -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U(1*U(U,U,U),1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   x :: Language.Futhark.Syntax.ModDefBase f vn ->
                 Language.Futhark.Syntax.$fShowModDefBase_$cshowsPrec
                   @ f
                   @ vn
                   $dShowable
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0fa33a778e20c3a3e6c1bcf68b69cf89
  $fShowModDefBase_$cshowList ::
    Language.Futhark.Syntax.Showable f vn =>
    [Language.Futhark.Syntax.ModDefBase f vn] -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   eta :: [Language.Futhark.Syntax.ModDefBase f vn]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.ModDefBase f vn)
                   (Language.Futhark.Syntax.$fShowModDefBase_$cshowsPrec
                      @ f
                      @ vn
                      $dShowable
                      Language.Futhark.Syntax.$fFoldableNoInfo4)
                   eta
                   eta1) -}
0fa33a778e20c3a3e6c1bcf68b69cf89
  $fShowModDefBase_$cshowsPrec ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.ModDefBase f vn -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U(U)><S,1*U(1*U(U,U,U),1*U,A)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   w1 :: GHC.Types.Int
                   w2 :: Language.Futhark.Syntax.ModDefBase f vn
                   w3 :: GHC.Base.String ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.Futhark.Syntax.ModDef ww3 ww4 ww5 ->
                 Language.Futhark.Syntax.$w$cshowsPrec5
                   @ f
                   @ vn
                   w
                   ww1
                   ww3
                   ww4
                   w3 } }) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fShowNoInfo :: GHC.Show.Show (Language.Futhark.Syntax.NoInfo a)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a5.
                  @ (Language.Futhark.Syntax.NoInfo a5)
                  (Language.Futhark.Syntax.$fShowNoInfo_$cshowsPrec @ a5)
                  (Language.Futhark.Syntax.$fShowNoInfo_$cshow @ a5)
                  (Language.Futhark.Syntax.$fShowNoInfo_$cshowList @ a5) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fShowNoInfo1 :: Language.Futhark.Syntax.NoInfo a -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*H><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a5
                   ds :: Language.Futhark.Syntax.NoInfo a5
                   eta :: GHC.Base.String ->
                 case ds of wild { Language.Futhark.Syntax.NoInfo ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      Language.Futhark.Syntax.$fShowArrayTypeBase4)
                   eta }) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fShowNoInfo_$cshow ::
    Language.Futhark.Syntax.NoInfo a -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a5 x :: Language.Futhark.Syntax.NoInfo a5 ->
                 case x of wild { Language.Futhark.Syntax.NoInfo ->
                 Language.Futhark.Syntax.$fShowArrayTypeBase4 }) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fShowNoInfo_$cshowList ::
    [Language.Futhark.Syntax.NoInfo a] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ @ a5 ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.NoInfo a5)
                   (Language.Futhark.Syntax.$fShowNoInfo1 @ a5)) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fShowNoInfo_$cshowsPrec ::
    GHC.Types.Int -> Language.Futhark.Syntax.NoInfo a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*H><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a5
                   ds :: GHC.Types.Int
                   ds1 :: Language.Futhark.Syntax.NoInfo a5
                   eta :: GHC.Base.String ->
                 case ds1 of wild { Language.Futhark.Syntax.NoInfo ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      Language.Futhark.Syntax.$fShowArrayTypeBase4)
                   eta }) -}
3a9c647c4f90fbf4f3c0ed2a825c4fe2
  $fShowParamBase ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Show.Show (Language.Futhark.Syntax.ParamBase f vn)
  DFunId[0]
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A,A),A,A,U(C(C1(U)),A,A))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *)
                      @ vn
                      $dShowable :: Language.Futhark.Syntax.Showable f vn.
                  @ (Language.Futhark.Syntax.ParamBase f vn)
                  (Language.Futhark.Syntax.$fShowParamBase_$cshowsPrec
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowParamBase_$cshow
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowParamBase_$cshowList
                     @ f
                     @ vn
                     $dShowable) -}
56b034977f98f8d9260b1bc9a4439bc8
  $fShowParamBase1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Param {"#) -}
92e1ec2f5ee745665e51d14c2df8c1a9
  $fShowParamBase2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "paramSrcLoc = "#) -}
6e20b21b0ce0bec83bbb5c7dfc057d3d
  $fShowParamBase3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "paramTypeDecl = "#) -}
c742a7194f356772138876e876285893
  $fShowParamBase4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "paramName = "#) -}
3a9c647c4f90fbf4f3c0ed2a825c4fe2
  $fShowParamBase_$cshow ::
    Language.Futhark.Syntax.Showable f vn =>
    Language.Futhark.Syntax.ParamBase f vn -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,U(U(C(C1(U)),A,A),A,A,U(C(C1(U)),A,A))><S,1*U(U,1*U(1*U,U),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   x :: Language.Futhark.Syntax.ParamBase f vn ->
                 Language.Futhark.Syntax.$fShowParamBase_$cshowsPrec
                   @ f
                   @ vn
                   $dShowable
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3a9c647c4f90fbf4f3c0ed2a825c4fe2
  $fShowParamBase_$cshowList ::
    Language.Futhark.Syntax.Showable f vn =>
    [Language.Futhark.Syntax.ParamBase f vn] -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,A,U(C(C1(U)),A,A))><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   eta :: [Language.Futhark.Syntax.ParamBase f vn]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.ParamBase f vn)
                   (Language.Futhark.Syntax.$fShowParamBase_$cshowsPrec
                      @ f
                      @ vn
                      $dShowable
                      Language.Futhark.Syntax.$fFoldableNoInfo4)
                   eta
                   eta1) -}
3a9c647c4f90fbf4f3c0ed2a825c4fe2
  $fShowParamBase_$cshowsPrec ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.ParamBase f vn -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,A,U(C(C1(U)),A,A))><S,1*U(U)><S,1*U(U,1*U(1*U,U),A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   w1 :: GHC.Types.Int
                   w2 :: Language.Futhark.Syntax.ParamBase f vn ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.Futhark.Syntax.Param ww3 ww4 ww5 ->
                 Language.Futhark.Syntax.$w$cshowsPrec18
                   @ f
                   @ vn
                   w
                   ww1
                   ww3
                   ww4 } }) -}
a287655e57bb05ee92e568d795ff4dac
  $fShowPatternBase ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Show.Show (Language.Futhark.Syntax.PatternBase f vn)
  DFunId[0]
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(C(C1(U)),A,A),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *)
                      @ vn
                      $dShowable :: Language.Futhark.Syntax.Showable f vn.
                  @ (Language.Futhark.Syntax.PatternBase f vn)
                  (Language.Futhark.Syntax.$fShowPatternBase_$cshowsPrec
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowPatternBase_$cshow
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowPatternBase_$cshowList
                     @ f
                     @ vn
                     $dShowable) -}
a287655e57bb05ee92e568d795ff4dac
  $fShowPatternBase_$cshow ::
    Language.Futhark.Syntax.Showable f vn =>
    Language.Futhark.Syntax.PatternBase f vn -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(C(C1(U)),A,A),A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   x :: Language.Futhark.Syntax.PatternBase f vn ->
                 Language.Futhark.Syntax.$fShowPatternBase_$cshowsPrec
                   @ f
                   @ vn
                   $dShowable
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a287655e57bb05ee92e568d795ff4dac
  $fShowPatternBase_$cshowList ::
    Language.Futhark.Syntax.Showable f vn =>
    [Language.Futhark.Syntax.PatternBase f vn] -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(C(C1(U)),A,A),A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   eta :: [Language.Futhark.Syntax.PatternBase f vn]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.PatternBase f vn)
                   (Language.Futhark.Syntax.$fShowPatternBase_$cshowsPrec
                      @ f
                      @ vn
                      $dShowable
                      Language.Futhark.Syntax.$fFoldableNoInfo4)
                   eta
                   eta1) -}
a287655e57bb05ee92e568d795ff4dac
  $fShowPatternBase_$cshowsPrec ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.PatternBase f vn -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(C(C1(U)),A,A),A)><S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   w1 :: GHC.Types.Int
                   w2 :: Language.Futhark.Syntax.PatternBase f vn ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Language.Futhark.Syntax.$w$cshowsPrec19 @ f @ vn w ww1 w2 }) -}
38fd8ca4b903061d48e25eb1353c4a5e
  $fShowPrimType :: GHC.Show.Show Language.Futhark.Syntax.PrimType
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.PrimType
                  Language.Futhark.Syntax.$fShowArrayTypeBase_$cshowsPrec1
                  Language.Futhark.Syntax.$fShowPrimType_$cshow
                  Language.Futhark.Syntax.$fShowPrimType_$cshowList -}
38fd8ca4b903061d48e25eb1353c4a5e
  $fShowPrimType1 ::
    Language.Futhark.Syntax.PrimType -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Language.Futhark.Syntax.$fShowArrayTypeBase_$cshowsPrec1
                   Language.Futhark.Syntax.$fFoldableNoInfo4) -}
38fd8ca4b903061d48e25eb1353c4a5e
  $fShowPrimType_$cshow ::
    Language.Futhark.Syntax.PrimType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Language.Futhark.Syntax.PrimType ->
                 Language.Futhark.Syntax.$fShowArrayTypeBase_$cshowsPrec1
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
38fd8ca4b903061d48e25eb1353c4a5e
  $fShowPrimType_$cshowList ::
    [Language.Futhark.Syntax.PrimType] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Language.Futhark.Syntax.PrimType
                   Language.Futhark.Syntax.$fShowPrimType1) -}
400b85f01ad530ac1a7fa288900f4e88
  $fShowPrimValue :: GHC.Show.Show Language.Futhark.Syntax.PrimValue
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.PrimValue
                  Language.Futhark.Syntax.$fShowPrimValue_$cshowsPrec
                  Language.Futhark.Syntax.$fShowPrimValue_$cshow
                  Language.Futhark.Syntax.$fShowPrimValue_$cshowList -}
400b85f01ad530ac1a7fa288900f4e88
  $fShowPrimValue1 ::
    Language.Futhark.Syntax.PrimValue -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Language.Futhark.Syntax.PrimValue ->
                 Language.Futhark.Syntax.$w$cshowsPrec20 0 w) -}
400b85f01ad530ac1a7fa288900f4e88
  $fShowPrimValue_$cshow ::
    Language.Futhark.Syntax.PrimValue -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
400b85f01ad530ac1a7fa288900f4e88
  $fShowPrimValue_$cshowList ::
    [Language.Futhark.Syntax.PrimValue] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Language.Futhark.Syntax.PrimValue
                   Language.Futhark.Syntax.$fShowPrimValue1) -}
400b85f01ad530ac1a7fa288900f4e88
  $fShowPrimValue_$cshowsPrec ::
    GHC.Types.Int
    -> Language.Futhark.Syntax.PrimValue -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Language.Futhark.Syntax.PrimValue ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.Futhark.Syntax.$w$cshowsPrec20 ww1 w1 }) -}
be3df31fb3649abb3aedb26e333c7284
  $fShowProgBase ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Show.Show (Language.Futhark.Syntax.ProgBase f vn)
  DFunId[0]
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *)
                      @ vn
                      $dShowable :: Language.Futhark.Syntax.Showable f vn.
                  @ (Language.Futhark.Syntax.ProgBase f vn)
                  (Language.Futhark.Syntax.$fShowProgBase_$cshowsPrec
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowProgBase_$cshow @ f @ vn $dShowable)
                  (Language.Futhark.Syntax.$fShowProgBase_$cshowList
                     @ f
                     @ vn
                     $dShowable) -}
3bb58d2aaa92639eabb3981dfc26d67b
  $fShowProgBaseWithHeaders ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Show.Show (Language.Futhark.Syntax.ProgBaseWithHeaders f vn)
  DFunId[0]
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *)
                      @ vn
                      $dShowable :: Language.Futhark.Syntax.Showable f vn.
                  @ (Language.Futhark.Syntax.ProgBaseWithHeaders f vn)
                  (Language.Futhark.Syntax.$fShowProgBaseWithHeaders_$cshowsPrec
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowProgBaseWithHeaders_$cshow
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowProgBaseWithHeaders_$cshowList
                     @ f
                     @ vn
                     $dShowable) -}
3bb58d2aaa92639eabb3981dfc26d67b
  $fShowProgBaseWithHeaders_$cshow ::
    Language.Futhark.Syntax.Showable f vn =>
    Language.Futhark.Syntax.ProgBaseWithHeaders f vn -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   x :: Language.Futhark.Syntax.ProgBaseWithHeaders f vn ->
                 Language.Futhark.Syntax.$fShowProgBaseWithHeaders_$cshowsPrec
                   @ f
                   @ vn
                   $dShowable
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3bb58d2aaa92639eabb3981dfc26d67b
  $fShowProgBaseWithHeaders_$cshowList ::
    Language.Futhark.Syntax.Showable f vn =>
    [Language.Futhark.Syntax.ProgBaseWithHeaders f vn]
    -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   eta :: [Language.Futhark.Syntax.ProgBaseWithHeaders f vn]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.ProgBaseWithHeaders f vn)
                   (Language.Futhark.Syntax.$fShowProgBaseWithHeaders_$cshowsPrec
                      @ f
                      @ vn
                      $dShowable
                      Language.Futhark.Syntax.$fFoldableNoInfo4)
                   eta
                   eta1) -}
3bb58d2aaa92639eabb3981dfc26d67b
  $fShowProgBaseWithHeaders_$cshowsPrec ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.ProgBaseWithHeaders f vn
    -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U(U)><S,1*U(1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   w1 :: GHC.Types.Int
                   w2 :: Language.Futhark.Syntax.ProgBaseWithHeaders f vn
                   w3 :: GHC.Base.String ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.Futhark.Syntax.ProgWithHeaders ww3 ww4 ->
                 Language.Futhark.Syntax.$w$cshowsPrec22
                   @ f
                   @ vn
                   w
                   ww1
                   ww3
                   ww4
                   w3 } }) -}
be3df31fb3649abb3aedb26e333c7284
  $fShowProgBase_$cshow ::
    Language.Futhark.Syntax.Showable f vn =>
    Language.Futhark.Syntax.ProgBase f vn -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   x :: Language.Futhark.Syntax.ProgBase f vn ->
                 Language.Futhark.Syntax.$fShowProgBase_$cshowsPrec
                   @ f
                   @ vn
                   $dShowable
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
be3df31fb3649abb3aedb26e333c7284
  $fShowProgBase_$cshowList ::
    Language.Futhark.Syntax.Showable f vn =>
    [Language.Futhark.Syntax.ProgBase f vn] -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   eta :: [Language.Futhark.Syntax.ProgBase f vn]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.ProgBase f vn)
                   (Language.Futhark.Syntax.$fShowProgBase_$cshowsPrec
                      @ f
                      @ vn
                      $dShowable
                      Language.Futhark.Syntax.$fFoldableNoInfo4)
                   eta
                   eta1) -}
be3df31fb3649abb3aedb26e333c7284
  $fShowProgBase_$cshowsPrec ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.ProgBase f vn -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   w1 :: GHC.Types.Int
                   w2 :: Language.Futhark.Syntax.ProgBase f vn
                   w3 :: GHC.Base.String ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.Futhark.Syntax.Prog ww3 ->
                 Language.Futhark.Syntax.$w$cshowsPrec21
                   @ f
                   @ vn
                   w
                   ww1
                   ww3
                   w3 } }) -}
24fb387b76f0de6e1364c57195f373ee
  $fShowProgHeader ::
    GHC.Show.Show Language.Futhark.Syntax.ProgHeader
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.ProgHeader
                  Language.Futhark.Syntax.$fShowProgHeader_$cshowsPrec
                  Language.Futhark.Syntax.$fShowProgHeader_$cshow
                  Language.Futhark.Syntax.$fShowProgHeader_$cshowList -}
24fb387b76f0de6e1364c57195f373ee
  $fShowProgHeader1 ::
    Language.Futhark.Syntax.ProgHeader -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Language.Futhark.Syntax.ProgHeader
                   w1 :: GHC.Base.String ->
                 case w of ww { Language.Futhark.Syntax.Include ww1 ->
                 Language.Futhark.Syntax.$w$cshowsPrec23 0 ww1 w1 }) -}
47af677cfc17787a886f6eaa02f8321c
  $fShowProgHeader2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Include "#) -}
24fb387b76f0de6e1364c57195f373ee
  $fShowProgHeader_$cshow ::
    Language.Futhark.Syntax.ProgHeader -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Language.Futhark.Syntax.ProgHeader ->
                 Language.Futhark.Syntax.$fShowProgHeader_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
24fb387b76f0de6e1364c57195f373ee
  $fShowProgHeader_$cshowList ::
    [Language.Futhark.Syntax.ProgHeader] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Language.Futhark.Syntax.ProgHeader
                   Language.Futhark.Syntax.$fShowProgHeader1) -}
24fb387b76f0de6e1364c57195f373ee
  $fShowProgHeader_$cshowsPrec ::
    GHC.Types.Int
    -> Language.Futhark.Syntax.ProgHeader -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: Language.Futhark.Syntax.ProgHeader
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.Futhark.Syntax.Include ww3 ->
                 Language.Futhark.Syntax.$w$cshowsPrec23 ww1 ww3 w2 } }) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fShowRank :: GHC.Show.Show (Language.Futhark.Syntax.Rank vn)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ vn.
                  @ (Language.Futhark.Syntax.Rank vn)
                  (Language.Futhark.Syntax.$fShowRank_$cshowsPrec @ vn)
                  (Language.Futhark.Syntax.$fShowRank_$cshow @ vn)
                  (Language.Futhark.Syntax.$fShowRank_$cshowList @ vn) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fShowRank1 :: Language.Futhark.Syntax.Rank vn -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ @ vn
                   w :: Language.Futhark.Syntax.Rank vn
                   w1 :: GHC.Base.String ->
                 Language.Futhark.Syntax.$w$cshowsPrec @ vn 0 w w1) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fShowRank_$cshow ::
    Language.Futhark.Syntax.Rank vn -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ vn x :: Language.Futhark.Syntax.Rank vn ->
                 Language.Futhark.Syntax.$fShowRank_$cshowsPrec
                   @ vn
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fShowRank_$cshowList ::
    [Language.Futhark.Syntax.Rank vn] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ @ vn ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.Rank vn)
                   (Language.Futhark.Syntax.$fShowRank1 @ vn)) -}
7a74fb247e0302d6f92110f5fb7a641c
  $fShowRank_$cshowsPrec ::
    GHC.Types.Int -> Language.Futhark.Syntax.Rank vn -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><L,1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ vn
                   w :: GHC.Types.Int
                   w1 :: Language.Futhark.Syntax.Rank vn
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.Futhark.Syntax.$w$cshowsPrec @ vn ww1 w1 w2 }) -}
23c47b362b456c0c51d94a86b9652b66
  $fShowShapeDecl ::
    GHC.Show.Show vn =>
    GHC.Show.Show (Language.Futhark.Syntax.ShapeDecl vn)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(C1(U))),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ vn $dShow :: GHC.Show.Show vn.
                  @ (Language.Futhark.Syntax.ShapeDecl vn)
                  (Language.Futhark.Syntax.$fShowShapeDecl_$cshowsPrec @ vn $dShow)
                  (Language.Futhark.Syntax.$fShowShapeDecl_$cshow @ vn $dShow)
                  (Language.Futhark.Syntax.$fShowShapeDecl_$cshowList @ vn $dShow) -}
23c47b362b456c0c51d94a86b9652b66
  $fShowShapeDecl_$cshow ::
    GHC.Show.Show vn =>
    Language.Futhark.Syntax.ShapeDecl vn -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C1(U))),A,A)><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ vn
                   $dShow :: GHC.Show.Show vn
                   x :: Language.Futhark.Syntax.ShapeDecl vn ->
                 Language.Futhark.Syntax.$fShowShapeDecl_$cshowsPrec
                   @ vn
                   $dShow
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
23c47b362b456c0c51d94a86b9652b66
  $fShowShapeDecl_$cshowList ::
    GHC.Show.Show vn =>
    [Language.Futhark.Syntax.ShapeDecl vn] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C1(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ vn
                   $dShow :: GHC.Show.Show vn
                   eta :: [Language.Futhark.Syntax.ShapeDecl vn]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.ShapeDecl vn)
                   (Language.Futhark.Syntax.$fShowShapeDecl_$cshowsPrec
                      @ vn
                      $dShow
                      Language.Futhark.Syntax.$fFoldableNoInfo4)
                   eta
                   eta1) -}
23c47b362b456c0c51d94a86b9652b66
  $fShowShapeDecl_$cshowsPrec ::
    GHC.Show.Show vn =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.ShapeDecl vn -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(C1(U))),A,A)><S,1*U(U)><L,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ vn
                   w :: GHC.Show.Show vn
                   w1 :: GHC.Types.Int
                   w2 :: Language.Futhark.Syntax.ShapeDecl vn
                   w3 :: GHC.Base.String ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Language.Futhark.Syntax.$w$cshowsPrec24 @ vn w ww1 w2 w3 }) -}
24dc3bc96951607063cffb96c418a313
  $fShowSigDeclBase ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Show.Show (Language.Futhark.Syntax.SigDeclBase f vn)
  DFunId[0]
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A,A),A,A,U(C(C1(U)),A,A))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *)
                      @ vn
                      $dShowable :: Language.Futhark.Syntax.Showable f vn.
                  @ (Language.Futhark.Syntax.SigDeclBase f vn)
                  (Language.Futhark.Syntax.$fShowSigDeclBase_$cshowsPrec
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowSigDeclBase_$cshow
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowSigDeclBase_$cshowList
                     @ f
                     @ vn
                     $dShowable) -}
24dc3bc96951607063cffb96c418a313
  $fShowSigDeclBase_$cshow ::
    Language.Futhark.Syntax.Showable f vn =>
    Language.Futhark.Syntax.SigDeclBase f vn -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,U(U(C(C1(U)),A,A),A,A,U(C(C1(U)),A,A))><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   x :: Language.Futhark.Syntax.SigDeclBase f vn ->
                 Language.Futhark.Syntax.$fShowSigDeclBase_$cshowsPrec
                   @ f
                   @ vn
                   $dShowable
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
24dc3bc96951607063cffb96c418a313
  $fShowSigDeclBase_$cshowList ::
    Language.Futhark.Syntax.Showable f vn =>
    [Language.Futhark.Syntax.SigDeclBase f vn] -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,A,U(C(C1(U)),A,A))><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   eta :: [Language.Futhark.Syntax.SigDeclBase f vn]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.SigDeclBase f vn)
                   (Language.Futhark.Syntax.$fShowSigDeclBase_$cshowsPrec
                      @ f
                      @ vn
                      $dShowable
                      Language.Futhark.Syntax.$fFoldableNoInfo4)
                   eta
                   eta1) -}
24dc3bc96951607063cffb96c418a313
  $fShowSigDeclBase_$cshowsPrec ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.SigDeclBase f vn -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,A,U(C(C1(U)),A,A))><S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   w1 :: GHC.Types.Int
                   w2 :: Language.Futhark.Syntax.SigDeclBase f vn ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Language.Futhark.Syntax.$w$cshowsPrec7 @ f @ vn w ww1 w2 }) -}
6858681131861f07ed3cbf6b3f8a38aa
  $fShowSigDefBase ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Show.Show (Language.Futhark.Syntax.SigDefBase f vn)
  DFunId[0]
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A,A),A,A,U(C(C1(U)),A,A))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *)
                      @ vn
                      $dShowable :: Language.Futhark.Syntax.Showable f vn.
                  @ (Language.Futhark.Syntax.SigDefBase f vn)
                  (Language.Futhark.Syntax.$fShowSigDefBase_$cshowsPrec
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowSigDefBase_$cshow
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowSigDefBase_$cshowList
                     @ f
                     @ vn
                     $dShowable) -}
6858681131861f07ed3cbf6b3f8a38aa
  $fShowSigDefBase_$cshow ::
    Language.Futhark.Syntax.Showable f vn =>
    Language.Futhark.Syntax.SigDefBase f vn -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,U(U(C(C1(U)),A,A),A,A,U(C(C1(U)),A,A))><S,1*U(1*U(U,U,U),1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   x :: Language.Futhark.Syntax.SigDefBase f vn ->
                 Language.Futhark.Syntax.$fShowSigDefBase_$cshowsPrec
                   @ f
                   @ vn
                   $dShowable
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6858681131861f07ed3cbf6b3f8a38aa
  $fShowSigDefBase_$cshowList ::
    Language.Futhark.Syntax.Showable f vn =>
    [Language.Futhark.Syntax.SigDefBase f vn] -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,A,U(C(C1(U)),A,A))><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   eta :: [Language.Futhark.Syntax.SigDefBase f vn]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.SigDefBase f vn)
                   (Language.Futhark.Syntax.$fShowSigDefBase_$cshowsPrec
                      @ f
                      @ vn
                      $dShowable
                      Language.Futhark.Syntax.$fFoldableNoInfo4)
                   eta
                   eta1) -}
6858681131861f07ed3cbf6b3f8a38aa
  $fShowSigDefBase_$cshowsPrec ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.SigDefBase f vn -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(U(C(C1(U)),A,A),A,A,U(C(C1(U)),A,A))><S,1*U(U)><S,1*U(1*U(U,U,U),1*U,A)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   w1 :: GHC.Types.Int
                   w2 :: Language.Futhark.Syntax.SigDefBase f vn
                   w3 :: GHC.Base.String ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.Futhark.Syntax.SigDef ww3 ww4 ww5 ->
                 Language.Futhark.Syntax.$w$cshowsPrec6
                   @ f
                   @ vn
                   w
                   ww1
                   ww3
                   ww4
                   w3 } }) -}
970de88f5513e7faf9ba9d7c216b7e50
  $fShowStreamForm ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Show.Show (Language.Futhark.Syntax.StreamForm f vn)
  DFunId[0]
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *)
                      @ vn
                      $dShowable :: Language.Futhark.Syntax.Showable f vn.
                  @ (Language.Futhark.Syntax.StreamForm f vn)
                  (Language.Futhark.Syntax.$fShowStreamForm_$cshowsPrec
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowStreamForm_$cshow
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowStreamForm_$cshowList
                     @ f
                     @ vn
                     $dShowable) -}
62139ef67169845aee1cf0034e316029
  $fShowStreamForm1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Sequential "#) -}
2756badbe897925cbd9074595b23a36c
  $fShowStreamForm2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RedLike "#) -}
4b80fe8b35eef882e22697800156e254
  $fShowStreamForm3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MapLike "#) -}
970de88f5513e7faf9ba9d7c216b7e50
  $fShowStreamForm_$cshow ::
    Language.Futhark.Syntax.Showable f vn =>
    Language.Futhark.Syntax.StreamForm f vn -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   x :: Language.Futhark.Syntax.StreamForm f vn ->
                 Language.Futhark.Syntax.$fShowStreamForm_$cshowsPrec
                   @ f
                   @ vn
                   $dShowable
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
970de88f5513e7faf9ba9d7c216b7e50
  $fShowStreamForm_$cshowList ::
    Language.Futhark.Syntax.Showable f vn =>
    [Language.Futhark.Syntax.StreamForm f vn] -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   eta :: [Language.Futhark.Syntax.StreamForm f vn]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.StreamForm f vn)
                   (Language.Futhark.Syntax.$fShowStreamForm_$cshowsPrec
                      @ f
                      @ vn
                      $dShowable
                      Language.Futhark.Syntax.$fFoldableNoInfo4)
                   eta
                   eta1) -}
970de88f5513e7faf9ba9d7c216b7e50
  $fShowStreamForm_$cshowsPrec ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.StreamForm f vn -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   w1 :: GHC.Types.Int
                   w2 :: Language.Futhark.Syntax.StreamForm f vn ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Language.Futhark.Syntax.$w$cshowsPrec25 @ f @ vn w ww1 w2 }) -}
f5e74c92dfc57aa431b0945cf61909a2
  $fShowTupleArrayElemTypeBase ::
    (GHC.Show.Show (shape vn), GHC.Show.Show (as vn)) =>
    GHC.Show.Show
      (Language.Futhark.Syntax.TupleArrayElemTypeBase shape as vn)
  DFunId[0]
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (shape :: * -> *)
                      @ (as :: * -> *)
                      @ vn
                      $dShow :: GHC.Show.Show (shape vn)
                      $dShow1 :: GHC.Show.Show (as vn).
                  @ (Language.Futhark.Syntax.TupleArrayElemTypeBase shape as vn)
                  (Language.Futhark.Syntax.$fShowTupleArrayElemTypeBase_$cshowsPrec
                     @ shape
                     @ as
                     @ vn
                     $dShow
                     $dShow1)
                  (Language.Futhark.Syntax.$fShowTupleArrayElemTypeBase_$cshow
                     @ shape
                     @ as
                     @ vn
                     $dShow
                     $dShow1)
                  (Language.Futhark.Syntax.$fShowTupleArrayElemTypeBase_$cshowList
                     @ shape
                     @ as
                     @ vn
                     $dShow
                     $dShow1) -}
b35f667f34e320663ec72781d29f8e2e
  $fShowTupleArrayElemTypeBase1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TupleArrayElem "#) -}
7fcf65ee2aa59d3c78f930631a0fe6af
  $fShowTupleArrayElemTypeBase2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ArrayArrayElem "#) -}
7088abf905e3b993515f37b77c639cb5
  $fShowTupleArrayElemTypeBase3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PrimArrayElem "#) -}
f5e74c92dfc57aa431b0945cf61909a2
  $fShowTupleArrayElemTypeBase_$cshow ::
    (GHC.Show.Show (shape vn), GHC.Show.Show (as vn)) =>
    Language.Futhark.Syntax.TupleArrayElemTypeBase shape as vn
    -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (shape :: * -> *)
                   @ (as :: * -> *)
                   @ vn
                   $dShow :: GHC.Show.Show (shape vn)
                   $dShow1 :: GHC.Show.Show (as vn)
                   x :: Language.Futhark.Syntax.TupleArrayElemTypeBase shape as vn ->
                 Language.Futhark.Syntax.$fShowTupleArrayElemTypeBase_$cshowsPrec
                   @ shape
                   @ as
                   @ vn
                   $dShow
                   $dShow1
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f5e74c92dfc57aa431b0945cf61909a2
  $fShowTupleArrayElemTypeBase_$cshowList ::
    (GHC.Show.Show (shape vn), GHC.Show.Show (as vn)) =>
    [Language.Futhark.Syntax.TupleArrayElemTypeBase shape as vn]
    -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ (shape :: * -> *)
                   @ (as :: * -> *)
                   @ vn
                   $dShow :: GHC.Show.Show (shape vn)
                   $dShow1 :: GHC.Show.Show (as vn)
                   eta :: [Language.Futhark.Syntax.TupleArrayElemTypeBase shape as vn]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.TupleArrayElemTypeBase shape as vn)
                   (Language.Futhark.Syntax.$fShowTupleArrayElemTypeBase_$cshowsPrec
                      @ shape
                      @ as
                      @ vn
                      $dShow
                      $dShow1
                      Language.Futhark.Syntax.$fFoldableNoInfo4)
                   eta
                   eta1) -}
f5e74c92dfc57aa431b0945cf61909a2
  $fShowTupleArrayElemTypeBase_$cshowsPrec ::
    (GHC.Show.Show (shape vn), GHC.Show.Show (as vn)) =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.TupleArrayElemTypeBase shape as vn
    -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ (shape :: * -> *)
                   @ (as :: * -> *)
                   @ vn
                   w :: GHC.Show.Show (shape vn)
                   w1 :: GHC.Show.Show (as vn)
                   w2 :: GHC.Types.Int
                   w3 :: Language.Futhark.Syntax.TupleArrayElemTypeBase shape as vn ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Language.Futhark.Syntax.$w$cshowsPrec2
                   @ shape
                   @ as
                   @ vn
                   w
                   w1
                   ww1
                   w3 }) -}
99bd87deac1e318133c7179dfa4bd510
  $fShowTypeBase ::
    (GHC.Show.Show (shape vn), GHC.Show.Show (as vn)) =>
    GHC.Show.Show (Language.Futhark.Syntax.TypeBase shape as vn)
  DFunId[0]
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (shape :: * -> *)
                      @ (as :: * -> *)
                      @ vn
                      $dShow :: GHC.Show.Show (shape vn)
                      $dShow1 :: GHC.Show.Show (as vn).
                  @ (Language.Futhark.Syntax.TypeBase shape as vn)
                  (Language.Futhark.Syntax.$fShowTypeBase_$cshowsPrec
                     @ shape
                     @ as
                     @ vn
                     $dShow
                     $dShow1)
                  (Language.Futhark.Syntax.$fShowTypeBase_$cshow
                     @ shape
                     @ as
                     @ vn
                     $dShow
                     $dShow1)
                  (Language.Futhark.Syntax.$fShowTypeBase_$cshowList
                     @ shape
                     @ as
                     @ vn
                     $dShow
                     $dShow1) -}
7af53c41ed0ddd1b7dc8580b27988375
  $fShowTypeBase1 ::
    Language.Futhark.Syntax.TypeBase
      Language.Futhark.Syntax.Rank Language.Futhark.Syntax.NoInfo ()
    -> GHC.Show.ShowS
  {- Arity: 2 -}
3d9880463c194a9fe9c5cb4bd60fb489
  $fShowTypeBase2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Tuple "#) -}
aab1299dc1d9f03b4f383fd496e55470
  $fShowTypeBase3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Array "#) -}
9b294d0bd519d566cc204ecca6b0128b
  $fShowTypeBase4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Prim "#) -}
99bd87deac1e318133c7179dfa4bd510
  $fShowTypeBase_$cshow ::
    (GHC.Show.Show (shape vn), GHC.Show.Show (as vn)) =>
    Language.Futhark.Syntax.TypeBase shape as vn -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (shape :: * -> *)
                   @ (as :: * -> *)
                   @ vn
                   $dShow :: GHC.Show.Show (shape vn)
                   $dShow1 :: GHC.Show.Show (as vn)
                   x :: Language.Futhark.Syntax.TypeBase shape as vn ->
                 Language.Futhark.Syntax.$fShowTypeBase_$cshowsPrec
                   @ shape
                   @ as
                   @ vn
                   $dShow
                   $dShow1
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
99bd87deac1e318133c7179dfa4bd510
  $fShowTypeBase_$cshowList ::
    (GHC.Show.Show (shape vn), GHC.Show.Show (as vn)) =>
    [Language.Futhark.Syntax.TypeBase shape as vn] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ (shape :: * -> *)
                   @ (as :: * -> *)
                   @ vn
                   $dShow :: GHC.Show.Show (shape vn)
                   $dShow1 :: GHC.Show.Show (as vn)
                   eta :: [Language.Futhark.Syntax.TypeBase shape as vn]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.TypeBase shape as vn)
                   (Language.Futhark.Syntax.$fShowTypeBase_$cshowsPrec
                      @ shape
                      @ as
                      @ vn
                      $dShow
                      $dShow1
                      Language.Futhark.Syntax.$fFoldableNoInfo4)
                   eta
                   eta1) -}
99bd87deac1e318133c7179dfa4bd510
  $fShowTypeBase_$cshowsPrec ::
    (GHC.Show.Show (shape vn), GHC.Show.Show (as vn)) =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.TypeBase shape as vn -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ (shape :: * -> *)
                   @ (as :: * -> *)
                   @ vn
                   w :: GHC.Show.Show (shape vn)
                   w1 :: GHC.Show.Show (as vn)
                   w2 :: GHC.Types.Int
                   w3 :: Language.Futhark.Syntax.TypeBase shape as vn ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Language.Futhark.Syntax.$w$cshowsPrec26
                   @ shape
                   @ as
                   @ vn
                   w
                   w1
                   ww1
                   w3 }) -}
2ed3ebcf91b3218763d1480f708a9cc9
  $fShowTypeDeclBase ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Show.Show (Language.Futhark.Syntax.TypeDeclBase f vn)
  DFunId[0]
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A,A),A,A,U(C(C1(U)),A,A))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *)
                      @ vn
                      $dShowable :: Language.Futhark.Syntax.Showable f vn.
                  @ (Language.Futhark.Syntax.TypeDeclBase f vn)
                  (Language.Futhark.Syntax.$fShowTypeDeclBase_$cshowsPrec
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowTypeDeclBase_$cshow
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowTypeDeclBase_$cshowList
                     @ f
                     @ vn
                     $dShowable) -}
2ed3ebcf91b3218763d1480f708a9cc9
  $fShowTypeDeclBase_$cshow ::
    Language.Futhark.Syntax.Showable f vn =>
    Language.Futhark.Syntax.TypeDeclBase f vn -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,U(U(C(C1(U)),A,A),A,A,U(C(C1(U)),A,A))><S,1*U(1*U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   x :: Language.Futhark.Syntax.TypeDeclBase f vn ->
                 Language.Futhark.Syntax.$fShowTypeDeclBase_$cshowsPrec
                   @ f
                   @ vn
                   $dShowable
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2ed3ebcf91b3218763d1480f708a9cc9
  $fShowTypeDeclBase_$cshowList ::
    Language.Futhark.Syntax.Showable f vn =>
    [Language.Futhark.Syntax.TypeDeclBase f vn] -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,A,U(C(C1(U)),A,A))><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   eta :: [Language.Futhark.Syntax.TypeDeclBase f vn]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.TypeDeclBase f vn)
                   (Language.Futhark.Syntax.$fShowTypeDeclBase_$cshowsPrec
                      @ f
                      @ vn
                      $dShowable
                      Language.Futhark.Syntax.$fFoldableNoInfo4)
                   eta
                   eta1) -}
2ed3ebcf91b3218763d1480f708a9cc9
  $fShowTypeDeclBase_$cshowsPrec ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.TypeDeclBase f vn -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(1*U(C(C1(U)),A,A),A,A,1*U(1*C1(C1(U)),A,A))><S,1*U(U)><S,1*U(1*U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   w1 :: GHC.Types.Int
                   w2 :: Language.Futhark.Syntax.TypeDeclBase f vn ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.Futhark.Syntax.TypeDecl ww3 ww4 ->
                 Language.Futhark.Syntax.$w$cshowsPrec10
                   @ f
                   @ vn
                   w
                   ww1
                   ww3
                   ww4 } }) -}
2da1e54d830a3cc0c1b5c70a77ffb606
  $fShowTypeDefBase ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Show.Show (Language.Futhark.Syntax.TypeDefBase f vn)
  DFunId[0]
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A,A),A,A,U(C(C1(U)),A,A))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *)
                      @ vn
                      $dShowable :: Language.Futhark.Syntax.Showable f vn.
                  @ (Language.Futhark.Syntax.TypeDefBase f vn)
                  (Language.Futhark.Syntax.$fShowTypeDefBase_$cshowsPrec
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowTypeDefBase_$cshow
                     @ f
                     @ vn
                     $dShowable)
                  (Language.Futhark.Syntax.$fShowTypeDefBase_$cshowList
                     @ f
                     @ vn
                     $dShowable) -}
2da1e54d830a3cc0c1b5c70a77ffb606
  $fShowTypeDefBase_$cshow ::
    Language.Futhark.Syntax.Showable f vn =>
    Language.Futhark.Syntax.TypeDefBase f vn -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,U(U(C(C1(U)),A,A),A,A,U(C(C1(U)),A,A))><S,1*U(U(U,U,U),1*U(1*U,U),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   x :: Language.Futhark.Syntax.TypeDefBase f vn ->
                 Language.Futhark.Syntax.$fShowTypeDefBase_$cshowsPrec
                   @ f
                   @ vn
                   $dShowable
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2da1e54d830a3cc0c1b5c70a77ffb606
  $fShowTypeDefBase_$cshowList ::
    Language.Futhark.Syntax.Showable f vn =>
    [Language.Futhark.Syntax.TypeDefBase f vn] -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,A,U(C(C1(U)),A,A))><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   $dShowable :: Language.Futhark.Syntax.Showable f vn
                   eta :: [Language.Futhark.Syntax.TypeDefBase f vn]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.TypeDefBase f vn)
                   (Language.Futhark.Syntax.$fShowTypeDefBase_$cshowsPrec
                      @ f
                      @ vn
                      $dShowable
                      Language.Futhark.Syntax.$fFoldableNoInfo4)
                   eta
                   eta1) -}
2da1e54d830a3cc0c1b5c70a77ffb606
  $fShowTypeDefBase_$cshowsPrec ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.TypeDefBase f vn -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,A,U(C(C1(U)),A,A))><S,1*U(U)><S,1*U(U(U,U,U),1*U(1*U,U),A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   w1 :: GHC.Types.Int
                   w2 :: Language.Futhark.Syntax.TypeDefBase f vn ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.Futhark.Syntax.TypeDef ww3 ww4 ww5 ->
                 Language.Futhark.Syntax.$w$cshowsPrec9
                   @ f
                   @ vn
                   w
                   ww1
                   ww3
                   ww4 } }) -}
e22888e07cdc5159294b6b72f8ca9208
  $fShowUnOp :: GHC.Show.Show Language.Futhark.Syntax.UnOp
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.UnOp
                  Language.Futhark.Syntax.$fShowUnOp_$cshowsPrec
                  Language.Futhark.Syntax.$fShowUnOp_$cshow
                  Language.Futhark.Syntax.$fShowUnOp_$cshowList -}
e22888e07cdc5159294b6b72f8ca9208
  $fShowUnOp1 :: Language.Futhark.Syntax.UnOp -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Language.Futhark.Syntax.$fShowUnOp_$cshowsPrec
                   Language.Futhark.Syntax.$fFoldableNoInfo4) -}
57e25bd43b274f870318c3136c033873
  $fShowUnOp2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ToUnsigned "#) -}
f97d329e528e11ef4fe394005c3b7591
  $fShowUnOp3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ToSigned "#) -}
fe282cfdbc6004255f1d08a29694ba72
  $fShowUnOp4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ToFloat "#) -}
e5db9e6d20a1a373a695e565c8f8b56c
  $fShowUnOp5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Signum"#) -}
0525797b27e3908081fb1989729c7740
  $fShowUnOp6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Abs"#) -}
ee26682f3814d3f76c3fcfe58ae1b16f
  $fShowUnOp7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Complement"#) -}
f422008e3f1f7f696e7255a4016cd00c
  $fShowUnOp8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Negate"#) -}
4fe50d55ee52b83f641ae273da846eeb
  $fShowUnOp9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Not"#) -}
e22888e07cdc5159294b6b72f8ca9208
  $fShowUnOp_$cshow ::
    Language.Futhark.Syntax.UnOp -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Language.Futhark.Syntax.UnOp ->
                 Language.Futhark.Syntax.$fShowUnOp_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e22888e07cdc5159294b6b72f8ca9208
  $fShowUnOp_$cshowList ::
    [Language.Futhark.Syntax.UnOp] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Language.Futhark.Syntax.UnOp
                   Language.Futhark.Syntax.$fShowUnOp1) -}
e22888e07cdc5159294b6b72f8ca9208
  $fShowUnOp_$cshowsPrec ::
    GHC.Types.Int -> Language.Futhark.Syntax.UnOp -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: Language.Futhark.Syntax.UnOp
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   Language.Futhark.Syntax.Not
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.Futhark.Syntax.$fShowUnOp9
                        eta
                   Language.Futhark.Syntax.Negate
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.Futhark.Syntax.$fShowUnOp8
                        eta
                   Language.Futhark.Syntax.Complement
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.Futhark.Syntax.$fShowUnOp7
                        eta
                   Language.Futhark.Syntax.Abs
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.Futhark.Syntax.$fShowUnOp6
                        eta
                   Language.Futhark.Syntax.Signum
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.Futhark.Syntax.$fShowUnOp5
                        eta
                   Language.Futhark.Syntax.ToFloat b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Language.Futhark.Syntax.$fShowUnOp4
                            (case b1 of wild2 {
                               Futhark.Representation.Primitive.Float32
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Futhark.Representation.Primitive.$fShowFloatType3
                                    x1
                               Futhark.Representation.Primitive.Float64
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Futhark.Representation.Primitive.$fShowFloatType2
                                    x1 })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } }
                   Language.Futhark.Syntax.ToSigned b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Syntax.$fShowUnOp3
                             (Futhark.Representation.Primitive.$w$cshowsPrec3 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowUnOp3
                                (Futhark.Representation.Primitive.$w$cshowsPrec3
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } }
                   Language.Futhark.Syntax.ToUnsigned b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Syntax.$fShowUnOp2
                             (Futhark.Representation.Primitive.$w$cshowsPrec3 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowUnOp2
                                (Futhark.Representation.Primitive.$w$cshowsPrec3
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
5e7052041c39992b8ea65ca85f152e71
  $fShowUserType ::
    GHC.Show.Show vn =>
    GHC.Show.Show (Language.Futhark.Syntax.UserType vn)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ vn $dShow :: GHC.Show.Show vn.
                  @ (Language.Futhark.Syntax.UserType vn)
                  (Language.Futhark.Syntax.$fShowUserType_$cshowsPrec @ vn $dShow)
                  (Language.Futhark.Syntax.$fShowUserType_$cshow @ vn $dShow)
                  (Language.Futhark.Syntax.$fShowUserType_$cshowList @ vn $dShow) -}
5e7052041c39992b8ea65ca85f152e71
  $fShowUserType_$cshow ::
    GHC.Show.Show vn =>
    Language.Futhark.Syntax.UserType vn -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ vn
                   $dShow :: GHC.Show.Show vn
                   x :: Language.Futhark.Syntax.UserType vn ->
                 Language.Futhark.Syntax.$fShowUserType_$cshowsPrec
                   @ vn
                   $dShow
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5e7052041c39992b8ea65ca85f152e71
  $fShowUserType_$cshowList ::
    GHC.Show.Show vn =>
    [Language.Futhark.Syntax.UserType vn] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ vn
                   $dShow :: GHC.Show.Show vn
                   eta :: [Language.Futhark.Syntax.UserType vn]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Language.Futhark.Syntax.UserType vn)
                   (Language.Futhark.Syntax.$fShowUserType_$cshowsPrec
                      @ vn
                      $dShow
                      Language.Futhark.Syntax.$fFoldableNoInfo4)
                   eta
                   eta1) -}
5e7052041c39992b8ea65ca85f152e71
  $fShowUserType_$cshowsPrec ::
    GHC.Show.Show vn =>
    GHC.Types.Int
    -> Language.Futhark.Syntax.UserType vn -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ vn
                   w :: GHC.Show.Show vn
                   w1 :: GHC.Types.Int
                   w2 :: Language.Futhark.Syntax.UserType vn ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Language.Futhark.Syntax.$w$cshowsPrec11 @ vn w ww1 w2 }) -}
f4ef904aac52050dcf1785f30dabc683
  $fShowValue :: GHC.Show.Show Language.Futhark.Syntax.Value
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.Value
                  Language.Futhark.Syntax.$fShowValue_$cshowsPrec
                  Language.Futhark.Syntax.$fShowValue_$cshow
                  Language.Futhark.Syntax.$fShowValue_$cshowList -}
f4ef904aac52050dcf1785f30dabc683
  $fShowValue1 :: Language.Futhark.Syntax.Value -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Language.Futhark.Syntax.Value ->
                 Language.Futhark.Syntax.$w$cshowsPrec27 0 w) -}
f4ef904aac52050dcf1785f30dabc683
  $fShowValue_$cshow ::
    Language.Futhark.Syntax.Value -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Language.Futhark.Syntax.Value ->
                 Language.Futhark.Syntax.$fShowValue_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f4ef904aac52050dcf1785f30dabc683
  $fShowValue_$cshowList ::
    [Language.Futhark.Syntax.Value] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Language.Futhark.Syntax.Value
                   Language.Futhark.Syntax.$fShowValue1) -}
f4ef904aac52050dcf1785f30dabc683
  $fShowValue_$cshowsPrec ::
    GHC.Types.Int -> Language.Futhark.Syntax.Value -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Language.Futhark.Syntax.Value ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.Futhark.Syntax.$w$cshowsPrec27 ww1 w1 }) -}
f8e3f59b8a464a8a0941f067d4d83b6d
  $fShowableInfovn ::
    (GHC.Show.Show (Language.Futhark.Syntax.Info vn),
     GHC.Show.Show
       (Language.Futhark.Syntax.Info
          (Language.Futhark.Syntax.CompTypeBase vn)),
     GHC.Show.Show
       (Language.Futhark.Syntax.Info
          (Language.Futhark.Syntax.StructTypeBase vn)),
     GHC.Show.Show vn) =>
    Language.Futhark.Syntax.Showable Language.Futhark.Syntax.Info vn
  DFunId[3]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><L,U>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ vn
                      $dShow :: GHC.Show.Show (Language.Futhark.Syntax.Info vn)
                      $dShow1 :: GHC.Show.Show
                                   (Language.Futhark.Syntax.Info
                                      (Language.Futhark.Syntax.CompTypeBase vn))
                      $dShow2 :: GHC.Show.Show
                                   (Language.Futhark.Syntax.Info
                                      (Language.Futhark.Syntax.StructTypeBase vn))
                      $dShow3 :: GHC.Show.Show vn.
                  @ Language.Futhark.Syntax.Info
                  @ vn
                  $dShow3
                  $dShow
                  $dShow1
                  $dShow2 -}
f8e3f59b8a464a8a0941f067d4d83b6d
  $fShowableNoInfovn ::
    (GHC.Show.Show (Language.Futhark.Syntax.NoInfo vn),
     GHC.Show.Show
       (Language.Futhark.Syntax.NoInfo
          (Language.Futhark.Syntax.CompTypeBase vn)),
     GHC.Show.Show
       (Language.Futhark.Syntax.NoInfo
          (Language.Futhark.Syntax.StructTypeBase vn)),
     GHC.Show.Show vn) =>
    Language.Futhark.Syntax.Showable Language.Futhark.Syntax.NoInfo vn
  DFunId[3]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><L,U>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ vn
                      $dShow :: GHC.Show.Show (Language.Futhark.Syntax.NoInfo vn)
                      $dShow1 :: GHC.Show.Show
                                   (Language.Futhark.Syntax.NoInfo
                                      (Language.Futhark.Syntax.CompTypeBase vn))
                      $dShow2 :: GHC.Show.Show
                                   (Language.Futhark.Syntax.NoInfo
                                      (Language.Futhark.Syntax.StructTypeBase vn))
                      $dShow3 :: GHC.Show.Show vn.
                  @ Language.Futhark.Syntax.NoInfo
                  @ vn
                  $dShow3
                  $dShow
                  $dShow1
                  $dShow2 -}
36b022f74c11b45b268c679b91cb8a0a
  $fTraversableInfo ::
    Data.Traversable.Traversable Language.Futhark.Syntax.Info
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.Info
                  Language.Futhark.Syntax.$fFunctorInfo
                  Language.Futhark.Syntax.$fFoldableInfo
                  Language.Futhark.Syntax.$fTraversableInfo_$ctraverse
                  Language.Futhark.Syntax.$fTraversableInfo_$csequenceA
                  Language.Futhark.Syntax.$fTraversableInfo_$cmapM
                  Language.Futhark.Syntax.$fTraversableInfo_$csequence -}
f004e7734dcb1defd414c243fa7db084
  $fTraversableInfo1 :: b -> b
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True) (\ @ b tpl :: b -> tpl) -}
36b022f74c11b45b268c679b91cb8a0a
  $fTraversableInfo_$cmapM ::
    GHC.Base.Monad m =>
    (a -> m b)
    -> Language.Futhark.Syntax.Info a
    -> m (Language.Futhark.Syntax.Info b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLL)LLLL),1*U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A),A,A,A,A)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a5
                   @ (m :: * -> *)
                   @ b
                   $dMonad :: GHC.Base.Monad m
                   eta :: a5 -> m b
                   eta1 :: Language.Futhark.Syntax.Info a5 ->
                 GHC.Base.fmap
                   @ m
                   (GHC.Base.$p1Applicative @ m (GHC.Base.$p1Monad @ m $dMonad))
                   @ b
                   @ (Language.Futhark.Syntax.Info b)
                   (Language.Futhark.Syntax.$fTraversableInfo1 @ b)
                     `cast`
                   (<b>_R ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <b>_R))
                   (eta eta1 `cast` (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R))) -}
36b022f74c11b45b268c679b91cb8a0a
  $fTraversableInfo_$csequence ::
    GHC.Base.Monad m =>
    Language.Futhark.Syntax.Info (m a)
    -> m (Language.Futhark.Syntax.Info a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLL)LLLL),1*U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A),A,A,A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (m :: * -> *)
                   @ a5
                   $dMonad :: GHC.Base.Monad m
                   eta :: Language.Futhark.Syntax.Info (m a5) ->
                 GHC.Base.fmap
                   @ m
                   (GHC.Base.$p1Applicative @ m (GHC.Base.$p1Monad @ m $dMonad))
                   @ a5
                   @ (Language.Futhark.Syntax.Info a5)
                   (Language.Futhark.Syntax.$fTraversableInfo1 @ a5)
                     `cast`
                   (<a5>_R ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R))
                   eta `cast` (Language.Futhark.Syntax.NTCo:Info[0] <m a5>_R)) -}
36b022f74c11b45b268c679b91cb8a0a
  $fTraversableInfo_$csequenceA ::
    GHC.Base.Applicative f =>
    Language.Futhark.Syntax.Info (f a)
    -> f (Language.Futhark.Syntax.Info a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLL),1*U(1*U(1*C1(C1(U)),A),A,A,A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (f :: * -> *)
                   @ a5
                   $dApplicative :: GHC.Base.Applicative f
                   eta :: Language.Futhark.Syntax.Info (f a5) ->
                 GHC.Base.fmap
                   @ f
                   (GHC.Base.$p1Applicative @ f $dApplicative)
                   @ a5
                   @ (Language.Futhark.Syntax.Info a5)
                   (Language.Futhark.Syntax.$fTraversableInfo1 @ a5)
                     `cast`
                   (<a5>_R ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R))
                   eta `cast` (Language.Futhark.Syntax.NTCo:Info[0] <f a5>_R)) -}
36b022f74c11b45b268c679b91cb8a0a
  $fTraversableInfo_$ctraverse ::
    GHC.Base.Applicative f =>
    (a -> f b)
    -> Language.Futhark.Syntax.Info a
    -> f (Language.Futhark.Syntax.Info b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLL),1*U(1*U(1*C1(C1(U)),A),A,A,A,A)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a5
                   @ (f :: * -> *)
                   @ b
                   $dApplicative :: GHC.Base.Applicative f
                   eta :: a5 -> f b
                   eta1 :: Language.Futhark.Syntax.Info a5 ->
                 GHC.Base.fmap
                   @ f
                   (GHC.Base.$p1Applicative @ f $dApplicative)
                   @ b
                   @ (Language.Futhark.Syntax.Info b)
                   (Language.Futhark.Syntax.$fTraversableInfo1 @ b)
                     `cast`
                   (<b>_R ->_R Sym (Language.Futhark.Syntax.NTCo:Info[0] <b>_R))
                   (eta eta1 `cast` (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R))) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fTraversableNoInfo ::
    Data.Traversable.Traversable Language.Futhark.Syntax.NoInfo
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Futhark.Syntax.NoInfo
                  Language.Futhark.Syntax.$fFunctorNoInfo
                  Language.Futhark.Syntax.$fFoldableNoInfo
                  Language.Futhark.Syntax.$fTraversableNoInfo_$ctraverse
                  Language.Futhark.Syntax.$fTraversableNoInfo_$csequenceA
                  Language.Futhark.Syntax.$fTraversableNoInfo_$cmapM
                  Language.Futhark.Syntax.$fTraversableNoInfo_$csequence -}
13904bef35c7220bfbb9b2885b4fa96a
  $fTraversableNoInfo_$cmapM ::
    GHC.Base.Monad m =>
    (a -> m b)
    -> Language.Futhark.Syntax.NoInfo a
    -> m (Language.Futhark.Syntax.NoInfo b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LC(S)LLL)LLLL),1*U(1*U(A,1*C1(U),A,A,A),A,A,A,A)><L,A><S,1*H>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a5
                   @ (m :: * -> *)
                   @ b
                   $dMonad :: GHC.Base.Monad m
                   eta :: a5 -> m b
                   eta1 :: Language.Futhark.Syntax.NoInfo a5 ->
                 case eta1 of wild { Language.Futhark.Syntax.NoInfo ->
                 GHC.Base.pure
                   @ m
                   (GHC.Base.$p1Monad @ m $dMonad)
                   @ (Language.Futhark.Syntax.NoInfo b)
                   (Language.Futhark.Syntax.NoInfo @ b) }) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fTraversableNoInfo_$csequence ::
    GHC.Base.Monad m =>
    Language.Futhark.Syntax.NoInfo (m a)
    -> m (Language.Futhark.Syntax.NoInfo a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LC(S)LLL)LLLL),1*U(1*U(A,1*C1(U),A,A,A),A,A,A,A)><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (m :: * -> *)
                   @ a5
                   $dMonad :: GHC.Base.Monad m
                   eta :: Language.Futhark.Syntax.NoInfo (m a5) ->
                 case eta of wild { Language.Futhark.Syntax.NoInfo ->
                 GHC.Base.pure
                   @ m
                   (GHC.Base.$p1Monad @ m $dMonad)
                   @ (Language.Futhark.Syntax.NoInfo a5)
                   (Language.Futhark.Syntax.NoInfo @ a5) }) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fTraversableNoInfo_$csequenceA ::
    GHC.Base.Applicative f =>
    Language.Futhark.Syntax.NoInfo (f a)
    -> f (Language.Futhark.Syntax.NoInfo a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LC(S)LLL),1*U(A,1*C1(U),A,A,A)><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (f :: * -> *)
                   @ a5
                   $dApplicative :: GHC.Base.Applicative f
                   ds :: Language.Futhark.Syntax.NoInfo (f a5) ->
                 case ds of wild { Language.Futhark.Syntax.NoInfo ->
                 GHC.Base.pure
                   @ f
                   $dApplicative
                   @ (Language.Futhark.Syntax.NoInfo a5)
                   (Language.Futhark.Syntax.NoInfo @ a5) }) -}
13904bef35c7220bfbb9b2885b4fa96a
  $fTraversableNoInfo_$ctraverse ::
    GHC.Base.Applicative f =>
    (a -> f b)
    -> Language.Futhark.Syntax.NoInfo a
    -> f (Language.Futhark.Syntax.NoInfo b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)LLL),1*U(A,1*C1(U),A,A,A)><L,A><S,1*H>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a5
                   @ (f :: * -> *)
                   @ b
                   $dApplicative :: GHC.Base.Applicative f
                   ds :: a5 -> f b
                   ds1 :: Language.Futhark.Syntax.NoInfo a5 ->
                 case ds1 of wild { Language.Futhark.Syntax.NoInfo ->
                 GHC.Base.pure
                   @ f
                   $dApplicative
                   @ (Language.Futhark.Syntax.NoInfo b)
                   (Language.Futhark.Syntax.NoInfo @ b) }) -}
1e77a56c44dbb158500633823a0c068b
  $w$c< ::
    GHC.Classes.Ord vn =>
    Language.Futhark.Syntax.DimDecl vn
    -> Language.Futhark.Syntax.DimDecl vn -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ vn
                   w :: GHC.Classes.Ord vn
                   w1 :: Language.Futhark.Syntax.DimDecl vn
                   w2 :: Language.Futhark.Syntax.DimDecl vn ->
                 case w1 of wild {
                   Language.Futhark.Syntax.NamedDim a5
                   -> case w2 of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Futhark.Syntax.NamedDim b1 -> GHC.Classes.< @ vn w a5 b1 }
                   Language.Futhark.Syntax.ConstDim a5
                   -> case w2 of wild1 {
                        Language.Futhark.Syntax.NamedDim ds -> GHC.Types.False
                        Language.Futhark.Syntax.ConstDim b1 -> GHC.Classes.ltInt a5 b1
                        Language.Futhark.Syntax.AnyDim -> GHC.Types.True }
                   Language.Futhark.Syntax.AnyDim
                   -> case w2 of wild1 { DEFAULT -> GHC.Types.False } }) -}
23c47b362b456c0c51d94a86b9652b66
  $w$c<1 ::
    GHC.Classes.Ord vn =>
    Language.Futhark.Syntax.ShapeDecl vn
    -> Language.Futhark.Syntax.ShapeDecl vn -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(1*U,C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),A,A)>,
     Inline: [0],
     Unfolding: (\ @ vn w :: GHC.Classes.Ord vn ->
                 let {
                   $dEq :: GHC.Classes.Eq vn = GHC.Classes.$p1Ord @ vn w
                 } in
                 let {
                   $dEq1 :: GHC.Classes.Eq (Language.Futhark.Syntax.DimDecl vn)
                   = Language.Futhark.Syntax.$fEqDimDecl @ vn $dEq
                 } in
                 let {
                   $dOrd :: GHC.Classes.Ord (Language.Futhark.Syntax.DimDecl vn)
                   = Language.Futhark.Syntax.$fOrdDimDecl @ vn $dEq1 w
                 } in
                 (\ x :: [Language.Futhark.Syntax.DimDecl vn]
                    y :: [Language.Futhark.Syntax.DimDecl vn] ->
                  case GHC.Classes.$w$ccompare14
                         @ (Language.Futhark.Syntax.DimDecl vn)
                         $dOrd
                         x
                         y of wild {
                    DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True })
                   `cast`
                 (Sym (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R)
                  ->_R Sym (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R)
                  ->_R <GHC.Types.Bool>_R)) -}
1e77a56c44dbb158500633823a0c068b
  $w$c<= ::
    GHC.Classes.Ord vn =>
    Language.Futhark.Syntax.DimDecl vn
    -> Language.Futhark.Syntax.DimDecl vn -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,1*C1(C1(U)),A,A,A,A)><S,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ vn
                   w :: GHC.Classes.Ord vn
                   w1 :: Language.Futhark.Syntax.DimDecl vn
                   w2 :: Language.Futhark.Syntax.DimDecl vn ->
                 case w1 of wild {
                   Language.Futhark.Syntax.NamedDim a5
                   -> case w2 of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Futhark.Syntax.NamedDim b1
                        -> GHC.Classes.<= @ vn w a5 b1 }
                   Language.Futhark.Syntax.ConstDim a5
                   -> case w2 of wild1 {
                        Language.Futhark.Syntax.NamedDim ds -> GHC.Types.False
                        Language.Futhark.Syntax.ConstDim b1 -> GHC.Classes.leInt a5 b1
                        Language.Futhark.Syntax.AnyDim -> GHC.Types.True }
                   Language.Futhark.Syntax.AnyDim
                   -> case w2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.AnyDim -> GHC.Types.True } }) -}
23c47b362b456c0c51d94a86b9652b66
  $w$c<=1 ::
    GHC.Classes.Ord vn =>
    Language.Futhark.Syntax.ShapeDecl vn
    -> Language.Futhark.Syntax.ShapeDecl vn -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(1*U,C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),A,A)>,
     Inline: [0],
     Unfolding: (\ @ vn w :: GHC.Classes.Ord vn ->
                 let {
                   $dEq :: GHC.Classes.Eq vn = GHC.Classes.$p1Ord @ vn w
                 } in
                 let {
                   $dEq1 :: GHC.Classes.Eq (Language.Futhark.Syntax.DimDecl vn)
                   = Language.Futhark.Syntax.$fEqDimDecl @ vn $dEq
                 } in
                 let {
                   $dOrd :: GHC.Classes.Ord (Language.Futhark.Syntax.DimDecl vn)
                   = Language.Futhark.Syntax.$fOrdDimDecl @ vn $dEq1 w
                 } in
                 (\ x :: [Language.Futhark.Syntax.DimDecl vn]
                    y :: [Language.Futhark.Syntax.DimDecl vn] ->
                  case GHC.Classes.$w$ccompare14
                         @ (Language.Futhark.Syntax.DimDecl vn)
                         $dOrd
                         x
                         y of wild {
                    DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False })
                   `cast`
                 (Sym (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R)
                  ->_R Sym (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R)
                  ->_R <GHC.Types.Bool>_R)) -}
1e77a56c44dbb158500633823a0c068b
  $w$c> ::
    GHC.Classes.Ord vn =>
    Language.Futhark.Syntax.DimDecl vn
    -> Language.Futhark.Syntax.DimDecl vn -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,1*C1(C1(U)),A,A,A)><S,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ vn
                   w :: GHC.Classes.Ord vn
                   w1 :: Language.Futhark.Syntax.DimDecl vn
                   w2 :: Language.Futhark.Syntax.DimDecl vn ->
                 case w1 of wild {
                   Language.Futhark.Syntax.NamedDim a5
                   -> case w2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.NamedDim b1 -> GHC.Classes.> @ vn w a5 b1 }
                   Language.Futhark.Syntax.ConstDim a5
                   -> case w2 of wild1 {
                        Language.Futhark.Syntax.NamedDim ds -> GHC.Types.True
                        Language.Futhark.Syntax.ConstDim b1 -> GHC.Classes.gtInt a5 b1
                        Language.Futhark.Syntax.AnyDim -> GHC.Types.False }
                   Language.Futhark.Syntax.AnyDim
                   -> case w2 of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Futhark.Syntax.AnyDim -> GHC.Types.False } }) -}
23c47b362b456c0c51d94a86b9652b66
  $w$c>1 ::
    GHC.Classes.Ord vn =>
    Language.Futhark.Syntax.ShapeDecl vn
    -> Language.Futhark.Syntax.ShapeDecl vn -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(1*U,C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),A,A)>,
     Inline: [0],
     Unfolding: (\ @ vn w :: GHC.Classes.Ord vn ->
                 let {
                   $dEq :: GHC.Classes.Eq vn = GHC.Classes.$p1Ord @ vn w
                 } in
                 let {
                   $dEq1 :: GHC.Classes.Eq (Language.Futhark.Syntax.DimDecl vn)
                   = Language.Futhark.Syntax.$fEqDimDecl @ vn $dEq
                 } in
                 let {
                   $dOrd :: GHC.Classes.Ord (Language.Futhark.Syntax.DimDecl vn)
                   = Language.Futhark.Syntax.$fOrdDimDecl @ vn $dEq1 w
                 } in
                 (\ x :: [Language.Futhark.Syntax.DimDecl vn]
                    y :: [Language.Futhark.Syntax.DimDecl vn] ->
                  case GHC.Classes.$w$ccompare14
                         @ (Language.Futhark.Syntax.DimDecl vn)
                         $dOrd
                         x
                         y of wild {
                    DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True })
                   `cast`
                 (Sym (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R)
                  ->_R Sym (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R)
                  ->_R <GHC.Types.Bool>_R)) -}
1e77a56c44dbb158500633823a0c068b
  $w$c>= ::
    GHC.Classes.Ord vn =>
    Language.Futhark.Syntax.DimDecl vn
    -> Language.Futhark.Syntax.DimDecl vn -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,1*C1(C1(U)),A,A)><S,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ vn
                   w :: GHC.Classes.Ord vn
                   w1 :: Language.Futhark.Syntax.DimDecl vn
                   w2 :: Language.Futhark.Syntax.DimDecl vn ->
                 case w1 of wild {
                   Language.Futhark.Syntax.NamedDim a5
                   -> case w2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Futhark.Syntax.NamedDim b1
                        -> GHC.Classes.>= @ vn w a5 b1 }
                   Language.Futhark.Syntax.ConstDim a5
                   -> case w2 of wild1 {
                        Language.Futhark.Syntax.NamedDim ds -> GHC.Types.True
                        Language.Futhark.Syntax.ConstDim b1 -> GHC.Classes.geInt a5 b1
                        Language.Futhark.Syntax.AnyDim -> GHC.Types.False }
                   Language.Futhark.Syntax.AnyDim
                   -> case w2 of wild1 { DEFAULT -> GHC.Types.True } }) -}
23c47b362b456c0c51d94a86b9652b66
  $w$c>=1 ::
    GHC.Classes.Ord vn =>
    Language.Futhark.Syntax.ShapeDecl vn
    -> Language.Futhark.Syntax.ShapeDecl vn -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(1*U,C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),A,A)>,
     Inline: [0],
     Unfolding: (\ @ vn w :: GHC.Classes.Ord vn ->
                 let {
                   $dEq :: GHC.Classes.Eq vn = GHC.Classes.$p1Ord @ vn w
                 } in
                 let {
                   $dEq1 :: GHC.Classes.Eq (Language.Futhark.Syntax.DimDecl vn)
                   = Language.Futhark.Syntax.$fEqDimDecl @ vn $dEq
                 } in
                 let {
                   $dOrd :: GHC.Classes.Ord (Language.Futhark.Syntax.DimDecl vn)
                   = Language.Futhark.Syntax.$fOrdDimDecl @ vn $dEq1 w
                 } in
                 (\ x :: [Language.Futhark.Syntax.DimDecl vn]
                    y :: [Language.Futhark.Syntax.DimDecl vn] ->
                  case GHC.Classes.$w$ccompare14
                         @ (Language.Futhark.Syntax.DimDecl vn)
                         $dOrd
                         x
                         y of wild {
                    DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False })
                   `cast`
                 (Sym (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R)
                  ->_R Sym (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R)
                  ->_R <GHC.Types.Bool>_R)) -}
1e77a56c44dbb158500633823a0c068b
  $w$ccompare ::
    GHC.Classes.Ord vn =>
    Language.Futhark.Syntax.DimDecl vn
    -> Language.Futhark.Syntax.DimDecl vn -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ vn
                   w :: GHC.Classes.Ord vn
                   w1 :: Language.Futhark.Syntax.DimDecl vn
                   w2 :: Language.Futhark.Syntax.DimDecl vn ->
                 case w1 of wild {
                   Language.Futhark.Syntax.NamedDim a5
                   -> case w2 of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Language.Futhark.Syntax.NamedDim b1
                        -> GHC.Classes.compare @ vn w a5 b1 }
                   Language.Futhark.Syntax.ConstDim a5
                   -> case w2 of wild1 {
                        Language.Futhark.Syntax.NamedDim ds -> GHC.Types.GT
                        Language.Futhark.Syntax.ConstDim b1 -> GHC.Classes.compareInt a5 b1
                        Language.Futhark.Syntax.AnyDim -> GHC.Types.LT }
                   Language.Futhark.Syntax.AnyDim
                   -> case w2 of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.Futhark.Syntax.AnyDim -> GHC.Types.EQ } }) -}
23c47b362b456c0c51d94a86b9652b66
  $w$ccompare1 ::
    GHC.Classes.Ord vn =>
    Language.Futhark.Syntax.ShapeDecl vn
    -> Language.Futhark.Syntax.ShapeDecl vn -> GHC.Types.Ordering
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(1*U,C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),A,A)>,
     Inline: [0],
     Unfolding: (\ @ vn w :: GHC.Classes.Ord vn ->
                 let {
                   $dEq :: GHC.Classes.Eq vn = GHC.Classes.$p1Ord @ vn w
                 } in
                 let {
                   $dEq1 :: GHC.Classes.Eq (Language.Futhark.Syntax.DimDecl vn)
                   = Language.Futhark.Syntax.$fEqDimDecl @ vn $dEq
                 } in
                 let {
                   w1 :: GHC.Classes.Ord (Language.Futhark.Syntax.DimDecl vn)
                   = Language.Futhark.Syntax.$fOrdDimDecl @ vn $dEq1 w
                 } in
                 (\ w2 :: [Language.Futhark.Syntax.DimDecl vn]
                    w3 :: [Language.Futhark.Syntax.DimDecl vn] ->
                  GHC.Classes.$w$ccompare14
                    @ (Language.Futhark.Syntax.DimDecl vn)
                    w1
                    w2
                    w3)
                   `cast`
                 (Sym (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R)
                  ->_R Sym (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R)
                  ->_R <GHC.Types.Ordering>_R)) -}
13904bef35c7220bfbb9b2885b4fa96a
  $w$cfoldl1 :: Language.Futhark.Syntax.NoInfo a -> a
  {- Arity: 1, Strictness: <B,1*H>b, Inline: [0] -}
13904bef35c7220bfbb9b2885b4fa96a
  $w$cfoldr1 :: Language.Futhark.Syntax.NoInfo a -> a
  {- Arity: 1, Strictness: <B,1*H>b, Inline: [0] -}
1e77a56c44dbb158500633823a0c068b
  $w$cmax ::
    GHC.Classes.Ord vn =>
    Language.Futhark.Syntax.DimDecl vn
    -> Language.Futhark.Syntax.DimDecl vn
    -> Language.Futhark.Syntax.DimDecl vn
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,1*C1(C1(U)),A,A,A,A)><S,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ vn
                   w :: GHC.Classes.Ord vn
                   w1 :: Language.Futhark.Syntax.DimDecl vn
                   w2 :: Language.Futhark.Syntax.DimDecl vn ->
                 case w1 of wild {
                   Language.Futhark.Syntax.NamedDim a5
                   -> case w2 of wild1 {
                        DEFAULT -> wild1
                        Language.Futhark.Syntax.NamedDim b1
                        -> case GHC.Classes.<= @ vn w a5 b1 of wild2 {
                             GHC.Types.False -> wild GHC.Types.True -> wild1 } }
                   Language.Futhark.Syntax.ConstDim a5
                   -> case w2 of wild1 {
                        Language.Futhark.Syntax.NamedDim ds -> wild
                        Language.Futhark.Syntax.ConstDim b1
                        -> case a5 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# x y) of wild4 {
                             GHC.Types.False -> wild GHC.Types.True -> wild1 } } }
                        Language.Futhark.Syntax.AnyDim
                        -> Language.Futhark.Syntax.AnyDim @ vn }
                   Language.Futhark.Syntax.AnyDim
                   -> case w2 of wild1 { DEFAULT ->
                      Language.Futhark.Syntax.AnyDim @ vn } }) -}
23c47b362b456c0c51d94a86b9652b66
  $w$cmax1 ::
    GHC.Classes.Ord vn =>
    Language.Futhark.Syntax.ShapeDecl vn
    -> Language.Futhark.Syntax.ShapeDecl vn
    -> Language.Futhark.Syntax.ShapeDecl vn
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(1*U,C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),A,A)>,
     Inline: [0],
     Unfolding: (\ @ vn w :: GHC.Classes.Ord vn ->
                 let {
                   $dEq :: GHC.Classes.Eq vn = GHC.Classes.$p1Ord @ vn w
                 } in
                 let {
                   $dEq1 :: GHC.Classes.Eq (Language.Futhark.Syntax.DimDecl vn)
                   = Language.Futhark.Syntax.$fEqDimDecl @ vn $dEq
                 } in
                 let {
                   $dOrd :: GHC.Classes.Ord (Language.Futhark.Syntax.DimDecl vn)
                   = Language.Futhark.Syntax.$fOrdDimDecl @ vn $dEq1 w
                 } in
                 (\ x :: [Language.Futhark.Syntax.DimDecl vn]
                    y :: [Language.Futhark.Syntax.DimDecl vn] ->
                  case GHC.Classes.$w$ccompare14
                         @ (Language.Futhark.Syntax.DimDecl vn)
                         $dOrd
                         x
                         y of wild {
                    DEFAULT -> y GHC.Types.GT -> x })
                   `cast`
                 (Sym (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R)
                  ->_R Sym (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R)
                  ->_R Sym (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R))) -}
13904bef35c7220bfbb9b2885b4fa96a
  $w$cmaximum :: Language.Futhark.Syntax.NoInfo a -> a
  {- Arity: 1, Strictness: <B,1*H>b, Inline: [0] -}
1e77a56c44dbb158500633823a0c068b
  $w$cmin ::
    GHC.Classes.Ord vn =>
    Language.Futhark.Syntax.DimDecl vn
    -> Language.Futhark.Syntax.DimDecl vn
    -> Language.Futhark.Syntax.DimDecl vn
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,1*C1(C1(U)),A,A,A,A)><S,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ vn
                   w :: GHC.Classes.Ord vn
                   w1 :: Language.Futhark.Syntax.DimDecl vn
                   w2 :: Language.Futhark.Syntax.DimDecl vn ->
                 case w1 of wild {
                   Language.Futhark.Syntax.NamedDim a5
                   -> case w2 of wild1 {
                        DEFAULT -> wild
                        Language.Futhark.Syntax.NamedDim b1
                        -> case GHC.Classes.<= @ vn w a5 b1 of wild2 {
                             GHC.Types.False -> wild1 GHC.Types.True -> wild } }
                   Language.Futhark.Syntax.ConstDim a5
                   -> case w2 of wild1 {
                        Language.Futhark.Syntax.NamedDim ds -> wild1
                        Language.Futhark.Syntax.ConstDim b1
                        -> case a5 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# x y) of wild4 {
                             GHC.Types.False -> wild1 GHC.Types.True -> wild } } }
                        Language.Futhark.Syntax.AnyDim -> wild }
                   Language.Futhark.Syntax.AnyDim -> w2 }) -}
23c47b362b456c0c51d94a86b9652b66
  $w$cmin1 ::
    GHC.Classes.Ord vn =>
    Language.Futhark.Syntax.ShapeDecl vn
    -> Language.Futhark.Syntax.ShapeDecl vn
    -> Language.Futhark.Syntax.ShapeDecl vn
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(1*U,C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),A,A)>,
     Inline: [0],
     Unfolding: (\ @ vn w :: GHC.Classes.Ord vn ->
                 let {
                   $dEq :: GHC.Classes.Eq vn = GHC.Classes.$p1Ord @ vn w
                 } in
                 let {
                   $dEq1 :: GHC.Classes.Eq (Language.Futhark.Syntax.DimDecl vn)
                   = Language.Futhark.Syntax.$fEqDimDecl @ vn $dEq
                 } in
                 let {
                   $dOrd :: GHC.Classes.Ord (Language.Futhark.Syntax.DimDecl vn)
                   = Language.Futhark.Syntax.$fOrdDimDecl @ vn $dEq1 w
                 } in
                 (\ x :: [Language.Futhark.Syntax.DimDecl vn]
                    y :: [Language.Futhark.Syntax.DimDecl vn] ->
                  case GHC.Classes.$w$ccompare14
                         @ (Language.Futhark.Syntax.DimDecl vn)
                         $dOrd
                         x
                         y of wild {
                    DEFAULT -> x GHC.Types.GT -> y })
                   `cast`
                 (Sym (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R)
                  ->_R Sym (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R)
                  ->_R Sym (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R))) -}
13904bef35c7220bfbb9b2885b4fa96a
  $w$cminimum :: Language.Futhark.Syntax.NoInfo a -> a
  {- Arity: 1, Strictness: <B,1*H>b, Inline: [0] -}
7a74fb247e0302d6f92110f5fb7a641c
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Language.Futhark.Syntax.Rank vn
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U(U)><L,U>, Inline: [0],
     Unfolding: (\ @ vn
                   ww :: GHC.Prim.Int#
                   w :: Language.Futhark.Syntax.Rank vn
                   w1 :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.Futhark.Syntax.$fShowArrayTypeBase5
                        (case w `cast`
                              (Language.Futhark.Syntax.NTCo:Rank[0]
                                   <vn>_P) of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt 11 ww3 w1 of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.Futhark.Syntax.$fShowArrayTypeBase5
                           (case w `cast`
                                 (Language.Futhark.Syntax.NTCo:Rank[0]
                                      <vn>_P) of ww2 { GHC.Types.I# ww3 ->
                            case GHC.Show.$wshowSignedInt
                                   11
                                   ww3
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.shows8
                                      w1) of ww4 { (#,#) ww5 ww6 ->
                            GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) }) -}
f5e74c92dfc57aa431b0945cf61909a2
  $w$cshowsPrec1 ::
    (GHC.Show.Show (shape vn), GHC.Show.Show (as vn)) =>
    GHC.Prim.Int#
    -> Language.Futhark.Syntax.ArrayTypeBase shape as vn
    -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ (shape :: * -> *)
                   @ (as :: * -> *)
                   @ vn
                   w :: GHC.Show.Show (shape vn)
                   w1 :: GHC.Show.Show (as vn)
                   ww :: GHC.Prim.Int#
                   w2 :: Language.Futhark.Syntax.ArrayTypeBase shape as vn ->
                 case w2 of wild {
                   Language.Futhark.Syntax.PrimArray b1 b2 b3 b4
                   -> let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec
                            @ (shape vn)
                            w
                            Language.Futhark.Syntax.$fShowArrayTypeBase6
                            b2
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec
                            @ (as vn)
                            w1
                            Language.Futhark.Syntax.$fShowArrayTypeBase6
                            b4
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Language.Futhark.Syntax.$fShowArrayTypeBase3
                            (Language.Futhark.Syntax.$fShowArrayTypeBase_$cshowsPrec1
                               Language.Futhark.Syntax.$fShowArrayTypeBase6
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (f (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showSpace1
                                        (case b3 of wild1 {
                                           Language.Futhark.Core.Nonunique
                                           -> GHC.Base.++
                                                @ GHC.Types.Char
                                                Language.Futhark.Core.$fShowUniqueness3
                                                (GHC.Types.:
                                                   @ GHC.Types.Char
                                                   GHC.Show.showSpace1
                                                   (g x))
                                           Language.Futhark.Core.Unique
                                           -> GHC.Base.++
                                                @ GHC.Types.Char
                                                Language.Futhark.Core.$fShowUniqueness2
                                                (GHC.Types.:
                                                   @ GHC.Types.Char
                                                   GHC.Show.showSpace1
                                                   (g x)) })))))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }
                   Language.Futhark.Syntax.TupleArray b1 b2 b3
                   -> let {
                        a5 :: Language.Futhark.Syntax.TupleArrayElemTypeBase shape as vn
                              -> GHC.Show.ShowS
                          {- Arity: 1 -}
                        = \ w3 :: Language.Futhark.Syntax.TupleArrayElemTypeBase
                                    shape as vn ->
                          Language.Futhark.Syntax.$w$cshowsPrec2 @ shape @ as @ vn w w1 0 w3
                      } in
                      let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec
                            @ (shape vn)
                            w
                            Language.Futhark.Syntax.$fShowArrayTypeBase6
                            b2
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Language.Futhark.Syntax.$fShowArrayTypeBase1
                            (GHC.Show.showList__
                               @ (Language.Futhark.Syntax.TupleArrayElemTypeBase shape as vn)
                               a5
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (f (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showSpace1
                                        (case b3 of wild1 {
                                           Language.Futhark.Core.Nonunique
                                           -> GHC.Base.++
                                                @ GHC.Types.Char
                                                Language.Futhark.Core.$fShowUniqueness3
                                                x
                                           Language.Futhark.Core.Unique
                                           -> GHC.Base.++
                                                @ GHC.Types.Char
                                                Language.Futhark.Core.$fShowUniqueness2
                                                x })))))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) } }) -}
3b9b30f4b223cb2d1ecdc894e80c7af4
  $w$cshowsPrec10 ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Prim.Int#
    -> Language.Futhark.Syntax.UserType vn
    -> f (Language.Futhark.Syntax.StructTypeBase vn)
    -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(1*U(C(C1(U)),A,A),A,A,1*U(1*C1(C1(U)),A,A))><L,U><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   ww :: GHC.Prim.Int#
                   ww1 :: Language.Futhark.Syntax.UserType vn
                   ww2 :: f (Language.Futhark.Syntax.StructTypeBase vn) ->
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = Language.Futhark.Syntax.$w$cshowsPrec11
                       @ vn
                       (Language.Futhark.Syntax.$p1Showable @ f @ vn w)
                       0
                       ww1
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ (f (Language.Futhark.Syntax.StructTypeBase vn))
                       (Language.Futhark.Syntax.$p4Showable @ f @ vn w)
                       Language.Futhark.Syntax.$fFoldableNoInfo4
                       ww2
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Language.Futhark.Syntax.$fShowDecBase17
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Language.Futhark.Syntax.$fShowDecBase16
                          (f1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowDecBase6
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Language.Futhark.Syntax.$fShowDecBase15
                                   (f2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Language.Futhark.Syntax.$fShowDecBase3
                                         x))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
5e7052041c39992b8ea65ca85f152e71
  $w$cshowsPrec11 ::
    GHC.Show.Show vn =>
    GHC.Prim.Int#
    -> Language.Futhark.Syntax.UserType vn -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><L,U><S,1*U>,
     Inline: [0] -}
4f861aa74b4d6d03ee24bf9f44f25bc5
  $w$cshowsPrec12 ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Prim.Int#
    -> GHC.Types.Bool
    -> Language.Futhark.Syntax.FunName
    -> Language.Futhark.Syntax.TypeDeclBase f vn
    -> [Language.Futhark.Syntax.ParamBase f vn]
    -> Language.Futhark.Syntax.ExpBase f vn
    -> GHC.Show.ShowS
  {- Arity: 7,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><L,U><L,U><L,U(U(U,U,U),U(U,U(U,U,U)))><L,1*U(1*U,U)><L,U><L,1*U>,
     Inline: [0] -}
970de88f5513e7faf9ba9d7c216b7e50
  $w$cshowsPrec13 ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Prim.Int#
    -> Language.Futhark.Syntax.ExpBase f vn -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><L,U><S,1*U>,
     Inline: [0] -}
b8bf6114f13ea2c44f2c7683a152e284
  $w$cshowsPrec14 ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Prim.Int#
    -> vn
    -> f (Language.Futhark.Syntax.CompTypeBase vn)
    -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(1*U(1*C1(C1(U)),A,A),A,1*U(1*C1(C1(U)),A,A),A)><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   ww :: GHC.Prim.Int#
                   ww1 :: vn
                   ww2 :: f (Language.Futhark.Syntax.CompTypeBase vn) ->
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ vn
                       (Language.Futhark.Syntax.$p1Showable @ f @ vn w)
                       Language.Futhark.Syntax.$fFoldableNoInfo4
                       ww1
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ (f (Language.Futhark.Syntax.CompTypeBase vn))
                       (Language.Futhark.Syntax.$p3Showable @ f @ vn w)
                       Language.Futhark.Syntax.$fFoldableNoInfo4
                       ww2
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Language.Futhark.Syntax.$fShowIdentBase4
                       (f1
                          (GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Syntax.$fShowDecBase6
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowIdentBase3
                                (f2
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      Language.Futhark.Syntax.$fShowDecBase6
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Language.Futhark.Syntax.$fShowIdentBase2
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            Data.Loc.$fShowSrcLoc1
                                            (GHC.Base.++
                                               @ GHC.Types.Char
                                               Language.Futhark.Syntax.$fShowDecBase3
                                               x))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> \ x :: GHC.Base.String ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Language.Futhark.Syntax.$fShowIdentBase1
                        (g x)
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.Futhark.Syntax.$fShowIdentBase1
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) }) -}
36b022f74c11b45b268c679b91cb8a0a
  $w$cshowsPrec15 ::
    GHC.Show.Show a =>
    GHC.Prim.Int# -> Language.Futhark.Syntax.Info a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a5
                   w :: GHC.Show.Show a5
                   ww :: GHC.Prim.Int#
                   w1 :: Language.Futhark.Syntax.Info a5 ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ a5
                       w
                       Language.Futhark.Syntax.$fFoldableNoInfo4
                       w1 `cast` (Language.Futhark.Syntax.NTCo:Info[0] <a5>_R)
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Language.Futhark.Syntax.$fShowInfo2
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Language.Futhark.Syntax.$fShowInfo1
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowDecBase3
                                x)))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
970de88f5513e7faf9ba9d7c216b7e50
  $w$cshowsPrec16 ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Prim.Int#
    -> Language.Futhark.Syntax.LambdaBase f vn -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><L,U><S,1*U>,
     Inline: [0] -}
970de88f5513e7faf9ba9d7c216b7e50
  $w$cshowsPrec17 ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Prim.Int#
    -> Language.Futhark.Syntax.LoopFormBase f vn -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   ww :: GHC.Prim.Int#
                   w1 :: Language.Futhark.Syntax.LoopFormBase f vn ->
                 case w1 of wild {
                   Language.Futhark.Syntax.For b1 b2 b3 b4
                   -> let {
                        f1 :: GHC.Base.String -> GHC.Base.String
                        = Language.Futhark.Syntax.$w$cshowsPrec13 @ f @ vn w 11 b2
                      } in
                      let {
                        f2 :: GHC.Base.String -> GHC.Base.String
                        = case b3 of ww1 { Language.Futhark.Syntax.Ident ww2 ww3 ww4 ->
                          Language.Futhark.Syntax.$w$cshowsPrec14 @ f @ vn w 11 ww2 ww3 }
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Language.Futhark.Syntax.$w$cshowsPrec13 @ f @ vn w 11 b4
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Language.Futhark.Syntax.$fShowLoopFormBase2
                            (let {
                               a5 :: GHC.Base.String
                               = f1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (f2 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x))))
                             } in
                             case b1 of wild1 {
                               Language.Futhark.Syntax.FromUpTo
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Language.Futhark.Syntax.$fShowForLoopDirection3
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 a5)
                               Language.Futhark.Syntax.FromDownTo
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Language.Futhark.Syntax.$fShowForLoopDirection2
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 a5) })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }
                   Language.Futhark.Syntax.While b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Language.Futhark.Syntax.$w$cshowsPrec13 @ f @ vn w 11 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> \ x :: GHC.Base.String ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Syntax.$fShowLoopFormBase1
                             (g x)
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowLoopFormBase1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) } }) -}
35985b55fa814dfc229a87117a3676c3
  $w$cshowsPrec18 ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Prim.Int#
    -> vn
    -> Language.Futhark.Syntax.TypeDeclBase f vn
    -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(U(C(C1(U)),A,A),A,A,U(C(C1(U)),A,A))><L,U><L,U><L,1*U(1*U,U)>,
     Inline: [0],
     Unfolding: (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   ww :: GHC.Prim.Int#
                   ww1 :: vn
                   ww2 :: Language.Futhark.Syntax.TypeDeclBase f vn ->
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ vn
                       (Language.Futhark.Syntax.$p1Showable @ f @ vn w)
                       Language.Futhark.Syntax.$fFoldableNoInfo4
                       ww1
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { Language.Futhark.Syntax.TypeDecl ww4 ww5 ->
                     Language.Futhark.Syntax.$w$cshowsPrec10 @ f @ vn w 0 ww4 ww5 }
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Language.Futhark.Syntax.$fShowParamBase4
                       (f1
                          (GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Syntax.$fShowDecBase6
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowParamBase3
                                (f2
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      Language.Futhark.Syntax.$fShowDecBase6
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Language.Futhark.Syntax.$fShowParamBase2
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            Data.Loc.$fShowSrcLoc1
                                            (GHC.Base.++
                                               @ GHC.Types.Char
                                               Language.Futhark.Syntax.$fShowDecBase3
                                               x))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> \ x :: GHC.Base.String ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Language.Futhark.Syntax.$fShowParamBase1
                        (g x)
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.Futhark.Syntax.$fShowParamBase1
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) }) -}
a287655e57bb05ee92e568d795ff4dac
  $w$cshowsPrec19 ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Prim.Int#
    -> Language.Futhark.Syntax.PatternBase f vn -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(C(C1(U)),A,A),A)><L,U><S,1*U>,
     Inline: [0] -}
f5e74c92dfc57aa431b0945cf61909a2
  $w$cshowsPrec2 ::
    (GHC.Show.Show (shape vn), GHC.Show.Show (as vn)) =>
    GHC.Prim.Int#
    -> Language.Futhark.Syntax.TupleArrayElemTypeBase shape as vn
    -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U><S,1*U>,
     Inline: [0] -}
400b85f01ad530ac1a7fa288900f4e88
  $w$cshowsPrec20 ::
    GHC.Prim.Int#
    -> Language.Futhark.Syntax.PrimValue -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
b90844b3746b499a598e467b6d8d493e
  $w$cshowsPrec21 ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Prim.Int#
    -> [Language.Futhark.Syntax.DecBase f vn]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><L,U><L,1*U><L,U>,
     Inline: [0] -}
d60c0a35305de187c95ac3d8ade7f0b3
  $w$cshowsPrec22 ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Prim.Int#
    -> [Language.Futhark.Syntax.ProgHeader]
    -> [Language.Futhark.Syntax.DecBase f vn]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><L,U><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
f9d6180f24b3aca5998ce2dc5ebed221
  $w$cshowsPrec23 ::
    GHC.Prim.Int#
    -> [GHC.Base.String] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: [GHC.Base.String]
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.Futhark.Syntax.$fShowProgHeader2
                        (GHC.Show.showList__
                           @ [GHC.Types.Char]
                           GHC.Show.shows_$cshowList
                           ww1
                           w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.Futhark.Syntax.$fShowProgHeader2
                           (GHC.Show.showList__
                              @ [GHC.Types.Char]
                              GHC.Show.shows_$cshowList
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))) }) -}
23c47b362b456c0c51d94a86b9652b66
  $w$cshowsPrec24 ::
    GHC.Show.Show vn =>
    GHC.Prim.Int#
    -> Language.Futhark.Syntax.ShapeDecl vn
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U(C(C1(C1(U))),A,A)><L,U><L,1*U><L,U>,
     Inline: [0] -}
970de88f5513e7faf9ba9d7c216b7e50
  $w$cshowsPrec25 ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Prim.Int#
    -> Language.Futhark.Syntax.StreamForm f vn -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   ww :: GHC.Prim.Int#
                   w1 :: Language.Futhark.Syntax.StreamForm f vn ->
                 case w1 of wild {
                   Language.Futhark.Syntax.MapLike b1
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Language.Futhark.Syntax.$fShowStreamForm3
                            (case b1 of wild1 {
                               Language.Futhark.Core.InOrder
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Language.Futhark.Core.$fShowStreamOrd3
                                    x
                               Language.Futhark.Core.Disorder
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Language.Futhark.Core.$fShowStreamOrd2
                                    x })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }
                   Language.Futhark.Syntax.RedLike b1 b2 b3 b4
                   -> let {
                        f1 :: GHC.Base.String -> GHC.Base.String
                        = Language.Futhark.Syntax.$w$cshowsPrec16 @ f @ vn w 11 b3
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Language.Futhark.Syntax.$w$cshowsPrec13 @ f @ vn w 11 b4
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Language.Futhark.Syntax.$fShowStreamForm2
                            (let {
                               a5 :: GHC.Base.String
                               = case b2 of wild1 {
                                   Language.Futhark.Core.Noncommutative
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        Language.Futhark.Core.$fShowCommutativity3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.showSpace1
                                           (f1
                                              (GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.showSpace1
                                                 (g x))))
                                   Language.Futhark.Core.Commutative
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        Language.Futhark.Core.$fShowCommutativity2
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.showSpace1
                                           (f1
                                              (GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.showSpace1
                                                 (g x)))) }
                             } in
                             case b1 of wild1 {
                               Language.Futhark.Core.InOrder
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Language.Futhark.Core.$fShowStreamOrd3
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 a5)
                               Language.Futhark.Core.Disorder
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Language.Futhark.Core.$fShowStreamOrd2
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 a5) })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }
                   Language.Futhark.Syntax.Sequential b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Language.Futhark.Syntax.$w$cshowsPrec13 @ f @ vn w 11 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> \ x :: GHC.Base.String ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Syntax.$fShowStreamForm1
                             (g x)
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowStreamForm1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) } }) -}
99bd87deac1e318133c7179dfa4bd510
  $w$cshowsPrec26 ::
    (GHC.Show.Show (shape vn), GHC.Show.Show (as vn)) =>
    GHC.Prim.Int#
    -> Language.Futhark.Syntax.TypeBase shape as vn -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U><S,1*U>,
     Inline: [0] -}
f4ef904aac52050dcf1785f30dabc683
  $w$cshowsPrec27 ::
    GHC.Prim.Int# -> Language.Futhark.Syntax.Value -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
d07c5b7b353387a89237c9062561c998
  $w$cshowsPrec3 ::
    Language.Futhark.Syntax.BinOp -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
0fa33a778e20c3a3e6c1bcf68b69cf89
  $w$cshowsPrec4 ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Prim.Int#
    -> Language.Futhark.Syntax.DecBase f vn -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   ww :: GHC.Prim.Int#
                   w1 :: Language.Futhark.Syntax.DecBase f vn ->
                 case w1 of wild {
                   Language.Futhark.Syntax.FunOrTypeDec b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Language.Futhark.Syntax.$w$cshowsPrec8 @ f @ vn w 11 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> \ x :: GHC.Base.String ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Syntax.$fShowDecBase9
                             (g x)
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowDecBase9
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) }
                   Language.Futhark.Syntax.SigDec b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> \ x :: GHC.Base.String ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Syntax.$fShowDecBase8
                             (case b1 of ww1 { Language.Futhark.Syntax.SigDef ww2 ww3 ww4 ->
                              Language.Futhark.Syntax.$w$cshowsPrec6 @ f @ vn w 11 ww2 ww3 x })
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowDecBase8
                                (case b1 of ww1 { Language.Futhark.Syntax.SigDef ww2 ww3 ww4 ->
                                 Language.Futhark.Syntax.$w$cshowsPrec6
                                   @ f
                                   @ vn
                                   w
                                   11
                                   ww2
                                   ww3
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x) })) }
                   Language.Futhark.Syntax.ModDec b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> \ x :: GHC.Base.String ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Syntax.$fShowDecBase1
                             (case b1 of ww1 { Language.Futhark.Syntax.ModDef ww2 ww3 ww4 ->
                              Language.Futhark.Syntax.$w$cshowsPrec5 @ f @ vn w 11 ww2 ww3 x })
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowDecBase1
                                (case b1 of ww1 { Language.Futhark.Syntax.ModDef ww2 ww3 ww4 ->
                                 Language.Futhark.Syntax.$w$cshowsPrec5
                                   @ f
                                   @ vn
                                   w
                                   11
                                   ww2
                                   ww3
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x) })) } }) -}
0fa33a778e20c3a3e6c1bcf68b69cf89
  $w$cshowsPrec5 ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Prim.Int#
    -> Language.Futhark.Core.Name
    -> [Language.Futhark.Syntax.DecBase f vn]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><L,U><L,1*U(U,U,U)><L,1*U><L,U>,
     Inline: [0] -}
edae2cc24d9ac14d398825577f6066c7
  $w$cshowsPrec6 ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Prim.Int#
    -> Language.Futhark.Core.Name
    -> [Language.Futhark.Syntax.SigDeclBase f vn]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5,
     Strictness: <L,U(U(C(C1(U)),A,A),A,A,U(C(C1(U)),A,A))><L,U><L,1*U(U,U,U)><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   ww :: GHC.Prim.Int#
                   ww1 :: Language.Futhark.Core.Name
                   ww2 :: [Language.Futhark.Syntax.SigDeclBase f vn]
                   w1 :: GHC.Base.String ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Language.Futhark.Syntax.$fShowDecBase7
                       (Language.Futhark.Core.$w$cshowsPrec1
                          0
                          ww1
                          (GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Syntax.$fShowDecBase6
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowDecBase5
                                (let {
                                   s :: GHC.Base.String
                                   = GHC.Base.++
                                       @ GHC.Types.Char
                                       Language.Futhark.Syntax.$fShowDecBase6
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          Language.Futhark.Syntax.$fShowDecBase4
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             Data.Loc.$fShowSrcLoc1
                                             (GHC.Base.++
                                                @ GHC.Types.Char
                                                Language.Futhark.Syntax.$fShowDecBase3
                                                x)))
                                 } in
                                 case ww2 of wild {
                                   [] -> GHC.CString.unpackAppendCString# "[]"# s
                                   : x1 xs
                                   -> GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showList__3
                                        (Language.Futhark.Syntax.$w$cshowsPrec7
                                           @ f
                                           @ vn
                                           w
                                           0
                                           x1
                                           (let {
                                              lvl132 :: [GHC.Types.Char]
                                              = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s
                                            } in
                                            letrec {
                                              showl :: [Language.Futhark.Syntax.SigDeclBase f vn]
                                                       -> [GHC.Types.Char]
                                                {- Arity: 1, Strictness: <S,1*U> -}
                                              = \ ds2 :: [Language.Futhark.Syntax.SigDeclBase
                                                            f vn] ->
                                                case ds2 of wild1 {
                                                  [] -> lvl132
                                                  : y ys
                                                  -> GHC.Types.:
                                                       @ GHC.Types.Char
                                                       GHC.Show.showList__1
                                                       (Language.Futhark.Syntax.$w$cshowsPrec7
                                                          @ f
                                                          @ vn
                                                          w
                                                          0
                                                          y
                                                          (showl ys)) }
                                            } in
                                            showl xs)) }))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.Futhark.Syntax.$fShowDecBase2
                        (g w1)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.Futhark.Syntax.$fShowDecBase2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1))) }) -}
24dc3bc96951607063cffb96c418a313
  $w$cshowsPrec7 ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Prim.Int#
    -> Language.Futhark.Syntax.SigDeclBase f vn -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,A,U(C(C1(U)),A,A))><L,U><S,1*U>,
     Inline: [0] -}
d421b41fdf8c94dbd148dd9f652f8857
  $w$cshowsPrec8 ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Prim.Int#
    -> Language.Futhark.Syntax.FunOrTypeDecBase f vn -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A,A),A,U(U,U,U),U(C(C1(U)),A,A))><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   ww :: GHC.Prim.Int#
                   w1 :: Language.Futhark.Syntax.FunOrTypeDecBase f vn ->
                 case w1 of wild {
                   Language.Futhark.Syntax.FunDec b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww1 { Language.Futhark.Syntax.FunDef ww2 ww3 ww4 ww5 ww6 ww7 ->
                          Language.Futhark.Syntax.$w$cshowsPrec12
                            @ f
                            @ vn
                            w
                            11
                            ww2
                            ww3
                            ww4
                            ww5
                            ww6 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> \ x :: GHC.Base.String ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Syntax.$fShowDecBase18
                             (g x)
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowDecBase18
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) }
                   Language.Futhark.Syntax.TypeDec b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww1 { Language.Futhark.Syntax.TypeDef ww2 ww3 ww4 ->
                          Language.Futhark.Syntax.$w$cshowsPrec9 @ f @ vn w 11 ww2 ww3 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> \ x :: GHC.Base.String ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Syntax.$fShowDecBase10
                             (g x)
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowDecBase10
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) } }) -}
f7110aa0314f623e44da86a5ab7d79c8
  $w$cshowsPrec9 ::
    Language.Futhark.Syntax.Showable f vn =>
    GHC.Prim.Int#
    -> Language.Futhark.Core.Name
    -> Language.Futhark.Syntax.TypeDeclBase f vn
    -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(U(C(C1(U)),A,A),A,A,U(C(C1(U)),A,A))><L,U><L,U(U,U,U)><L,1*U(1*U,U)>,
     Inline: [0],
     Unfolding: (\ @ (f :: * -> *)
                   @ vn
                   w :: Language.Futhark.Syntax.Showable f vn
                   ww :: GHC.Prim.Int#
                   ww1 :: Language.Futhark.Core.Name
                   ww2 :: Language.Futhark.Syntax.TypeDeclBase f vn ->
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { Language.Futhark.Syntax.TypeDecl ww4 ww5 ->
                     Language.Futhark.Syntax.$w$cshowsPrec10 @ f @ vn w 0 ww4 ww5 }
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Language.Futhark.Syntax.$fShowDecBase14
                       (Language.Futhark.Core.$w$cshowsPrec1
                          0
                          ww1
                          (GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Syntax.$fShowDecBase6
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowDecBase13
                                (f1
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      Language.Futhark.Syntax.$fShowDecBase6
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Language.Futhark.Syntax.$fShowDecBase12
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            Data.Loc.$fShowSrcLoc1
                                            (GHC.Base.++
                                               @ GHC.Types.Char
                                               Language.Futhark.Syntax.$fShowDecBase3
                                               x))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> \ x :: GHC.Base.String ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Language.Futhark.Syntax.$fShowDecBase11
                        (g x)
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.Futhark.Syntax.$fShowDecBase11
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) }) -}
8bfabe6eb7eaa4d96d912ade4f6a3e47
  $w$cstripDims ::
    GHC.Prim.Int#
    -> Language.Futhark.Syntax.ShapeDecl vn
    -> GHC.Base.Maybe (Language.Futhark.Syntax.ShapeDecl vn)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>, Inline: [0],
     Unfolding: (\ @ vn
                   ww :: GHC.Prim.Int#
                   w :: Language.Futhark.Syntax.ShapeDecl vn ->
                 case GHC.List.$wlenAcc
                        @ (Language.Futhark.Syntax.DimDecl vn)
                        w `cast` (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R)
                        0 of ww2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> GHC.Base.Nothing @ (Language.Futhark.Syntax.ShapeDecl vn)
                   GHC.Types.True
                   -> GHC.Base.Just
                        @ (Language.Futhark.Syntax.ShapeDecl vn)
                        (case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.<=# ww 0) of wild1 {
                           GHC.Types.False
                           -> (Language.Futhark.Syntax.$wunsafeDrop
                                 @ (Language.Futhark.Syntax.DimDecl vn)
                                 ww
                                 w `cast` (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R))
                                `cast`
                              (Sym (Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R))
                           GHC.Types.True -> w }) } }) -}
d07c5b7b353387a89237c9062561c998
  $w$ctoEnum :: GHC.Prim.Int# -> Language.Futhark.Syntax.BinOp
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> Language.Futhark.Syntax.$fEnumBinOp1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 21) of wild1 {
                        GHC.Types.False -> Language.Futhark.Syntax.$fEnumBinOp1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ Language.Futhark.Syntax.BinOp ww } }) -}
ede388e915e3e014506f3c00b3261aeb
  $w$s$cshowsPrec ::
    GHC.Prim.Int#
    -> Language.Futhark.Syntax.ArrayTypeBase
         Language.Futhark.Syntax.Rank Language.Futhark.Syntax.NoInfo ()
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   w :: Language.Futhark.Syntax.ArrayTypeBase
                          Language.Futhark.Syntax.Rank Language.Futhark.Syntax.NoInfo ()
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   Language.Futhark.Syntax.PrimArray b1 b2 b3 b4
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x :: GHC.Base.String[OneShot] ->
                          Language.Futhark.Syntax.$fShowArrayTypeBase_$cshowsPrec1
                            Language.Futhark.Syntax.$fShowArrayTypeBase6
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (Language.Futhark.Syntax.$w$cshowsPrec
                                  @ ()
                                  11
                                  b2
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.showSpace1
                                     (case b3 of wild1 {
                                        Language.Futhark.Core.Nonunique
                                        -> GHC.Base.++
                                             @ GHC.Types.Char
                                             Language.Futhark.Core.$fShowUniqueness3
                                             (GHC.Types.:
                                                @ GHC.Types.Char
                                                GHC.Show.showSpace1
                                                (case b4 of wild2 { Language.Futhark.Syntax.NoInfo ->
                                                 GHC.Base.++
                                                   @ GHC.Types.Char
                                                   Language.Futhark.Syntax.$fShowArrayTypeBase4
                                                   x }))
                                        Language.Futhark.Core.Unique
                                        -> GHC.Base.++
                                             @ GHC.Types.Char
                                             Language.Futhark.Core.$fShowUniqueness2
                                             (GHC.Types.:
                                                @ GHC.Types.Char
                                                GHC.Show.showSpace1
                                                (case b4 of wild2 { Language.Futhark.Syntax.NoInfo ->
                                                 GHC.Base.++
                                                   @ GHC.Types.Char
                                                   Language.Futhark.Syntax.$fShowArrayTypeBase4
                                                   x })) }))))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Syntax.$fShowArrayTypeBase3
                             (g w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowArrayTypeBase3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1))) }
                   Language.Futhark.Syntax.TupleArray b1 b2 b3
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x :: GHC.Base.String[OneShot] ->
                          GHC.Show.showList__
                            @ (Language.Futhark.Syntax.TupleArrayElemTypeBase
                                 Language.Futhark.Syntax.Rank Language.Futhark.Syntax.NoInfo ())
                            Language.Futhark.Syntax.$fShowArrayTypeBase2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (Language.Futhark.Syntax.$w$cshowsPrec
                                  @ ()
                                  11
                                  b2
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.showSpace1
                                     (case b3 of wild1 {
                                        Language.Futhark.Core.Nonunique
                                        -> GHC.Base.++
                                             @ GHC.Types.Char
                                             Language.Futhark.Core.$fShowUniqueness3
                                             x
                                        Language.Futhark.Core.Unique
                                        -> GHC.Base.++
                                             @ GHC.Types.Char
                                             Language.Futhark.Core.$fShowUniqueness2
                                             x }))))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Syntax.$fShowArrayTypeBase1
                             (g w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowArrayTypeBase1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1))) } }) -}
32cc5f331a01ed076f76edf7c23fe189
  $w$s$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Language.Futhark.Syntax.TupleArrayElemTypeBase
         Language.Futhark.Syntax.Rank Language.Futhark.Syntax.NoInfo ()
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   w :: Language.Futhark.Syntax.TupleArrayElemTypeBase
                          Language.Futhark.Syntax.Rank Language.Futhark.Syntax.NoInfo ()
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   Language.Futhark.Syntax.PrimArrayElem b1 b2 b3
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Language.Futhark.Syntax.$fShowTupleArrayElemTypeBase3
                            (Language.Futhark.Syntax.$fShowArrayTypeBase_$cshowsPrec1
                               Language.Futhark.Syntax.$fShowArrayTypeBase6
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case b2 of wild1 { Language.Futhark.Syntax.NoInfo ->
                                   GHC.Base.++
                                     @ GHC.Types.Char
                                     Language.Futhark.Syntax.$fShowArrayTypeBase4
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showSpace1
                                        (case b3 of wild2 {
                                           Language.Futhark.Core.Nonunique
                                           -> GHC.Base.++
                                                @ GHC.Types.Char
                                                Language.Futhark.Core.$fShowUniqueness3
                                                x
                                           Language.Futhark.Core.Unique
                                           -> GHC.Base.++
                                                @ GHC.Types.Char
                                                Language.Futhark.Core.$fShowUniqueness2
                                                x })) })))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False -> p w1
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1)) }
                   Language.Futhark.Syntax.ArrayArrayElem b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Syntax.$fShowTupleArrayElemTypeBase2
                             (Language.Futhark.Syntax.$w$s$cshowsPrec 11 b1 w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowTupleArrayElemTypeBase2
                                (Language.Futhark.Syntax.$w$s$cshowsPrec
                                   11
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1))) }
                   Language.Futhark.Syntax.TupleArrayElem b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Syntax.$fShowTupleArrayElemTypeBase1
                             (GHC.Show.showList__
                                @ (Language.Futhark.Syntax.TupleArrayElemTypeBase
                                     Language.Futhark.Syntax.Rank Language.Futhark.Syntax.NoInfo ())
                                Language.Futhark.Syntax.$fShowArrayTypeBase2
                                b1
                                w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowTupleArrayElemTypeBase1
                                (GHC.Show.showList__
                                   @ (Language.Futhark.Syntax.TupleArrayElemTypeBase
                                        Language.Futhark.Syntax.Rank
                                        Language.Futhark.Syntax.NoInfo
                                        ())
                                   Language.Futhark.Syntax.$fShowArrayTypeBase2
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1))) } }) -}
045d6f1308d06873638ff1ec6949c67d
  $w$s$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Language.Futhark.Syntax.TypeBase
         Language.Futhark.Syntax.Rank Language.Futhark.Syntax.NoInfo ()
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   w :: Language.Futhark.Syntax.TypeBase
                          Language.Futhark.Syntax.Rank Language.Futhark.Syntax.NoInfo ()
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   Language.Futhark.Syntax.Prim b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Syntax.$fShowTypeBase4
                             (Language.Futhark.Syntax.$fShowArrayTypeBase_$cshowsPrec1
                                Language.Futhark.Syntax.$fShowArrayTypeBase6
                                b1
                                w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowTypeBase4
                                (Language.Futhark.Syntax.$fShowArrayTypeBase_$cshowsPrec1
                                   Language.Futhark.Syntax.$fShowArrayTypeBase6
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1))) }
                   Language.Futhark.Syntax.Array b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Syntax.$fShowTypeBase3
                             (Language.Futhark.Syntax.$w$s$cshowsPrec 11 b1 w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowTypeBase3
                                (Language.Futhark.Syntax.$w$s$cshowsPrec
                                   11
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1))) }
                   Language.Futhark.Syntax.Tuple b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Language.Futhark.Syntax.$fShowTypeBase2
                             (GHC.Show.showList__
                                @ (Language.Futhark.Syntax.TypeBase
                                     Language.Futhark.Syntax.Rank Language.Futhark.Syntax.NoInfo ())
                                Language.Futhark.Syntax.$fShowTypeBase1
                                b1
                                w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Futhark.Syntax.$fShowTypeBase2
                                (GHC.Show.showList__
                                   @ (Language.Futhark.Syntax.TypeBase
                                        Language.Futhark.Syntax.Rank
                                        Language.Futhark.Syntax.NoInfo
                                        ())
                                   Language.Futhark.Syntax.$fShowTypeBase1
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1))) } }) -}
db5424559d86b57e0eae1e402678b6f9
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
851f9142d8405bbec3911569df2c64ef
  class (GHC.Classes.Eq shape, GHC.Classes.Ord shape,
         GHC.Base.Monoid shape) =>
        ArrayShape shape where
    shapeRank :: shape -> GHC.Types.Int
    stripDims :: GHC.Types.Int -> shape -> GHC.Base.Maybe shape
f5e74c92dfc57aa431b0945cf61909a2
  type role ArrayTypeBase representational representational nominal
  data ArrayTypeBase (shape :: * -> *) (as :: * -> *) vn
    = PrimArray Language.Futhark.Syntax.PrimType
                (shape vn)
                Language.Futhark.Core.Uniqueness
                (as vn)
    | TupleArray [Language.Futhark.Syntax.TupleArrayElemTypeBase
                    shape as vn]
                 (shape vn)
                 Language.Futhark.Core.Uniqueness
d07c5b7b353387a89237c9062561c998
  data BinOp
    = Plus
    | Minus
    | Pow
    | Times
    | Divide
    | Mod
    | Quot
    | Rem
    | ShiftR
    | ZShiftR
    | ShiftL
    | Band
    | Xor
    | Bor
    | LogAnd
    | LogOr
    | Equal
    | NotEqual
    | Less
    | Leq
    | Greater
    | Geq
    Promotable
5bf7b66e4610350720f1714abf9f4913
  type CompTypeBase =
    Language.Futhark.Syntax.TypeBase
      Language.Futhark.Syntax.Rank Language.Futhark.Syntax.Names
0fa33a778e20c3a3e6c1bcf68b69cf89
  type role DecBase representational nominal
  data DecBase (f :: * -> *) vn
    = FunOrTypeDec (Language.Futhark.Syntax.FunOrTypeDecBase f vn)
    | SigDec (Language.Futhark.Syntax.SigDefBase f vn)
    | ModDec (Language.Futhark.Syntax.ModDefBase f vn)
3d93e93366100e8bdf1955ad58bdfa36
  type DeclArrayTypeBase =
    Language.Futhark.Syntax.ArrayTypeBase
      Language.Futhark.Syntax.ShapeDecl Language.Futhark.Syntax.NoInfo
f0cadfbecff364a97eca4d4f3238a783
  type DeclTupleArrayElemTypeBase =
    Language.Futhark.Syntax.TupleArrayElemTypeBase
      Language.Futhark.Syntax.ShapeDecl Language.Futhark.Syntax.NoInfo
db30d13db6ddfb68145b68842fcdae94
  data Diet
    = TupleDiet [Language.Futhark.Syntax.Diet] | Consume | Observe
    Promotable
1e77a56c44dbb158500633823a0c068b
  data DimDecl vn = NamedDim vn | ConstDim GHC.Types.Int | AnyDim
970de88f5513e7faf9ba9d7c216b7e50
  type role ExpBase representational nominal
  data ExpBase (f :: * -> *) vn
    = Literal Language.Futhark.Syntax.Value Data.Loc.SrcLoc
    | TupLit [Language.Futhark.Syntax.ExpBase f vn] Data.Loc.SrcLoc
    | ArrayLit [Language.Futhark.Syntax.ExpBase f vn]
               (f (Language.Futhark.Syntax.CompTypeBase vn))
               Data.Loc.SrcLoc
    | Empty (Language.Futhark.Syntax.TypeDeclBase f vn) Data.Loc.SrcLoc
    | Var (Language.Futhark.Syntax.IdentBase f vn)
    | LetPat (Language.Futhark.Syntax.PatternBase f vn)
             (Language.Futhark.Syntax.ExpBase f vn)
             (Language.Futhark.Syntax.ExpBase f vn)
             Data.Loc.SrcLoc
    | If (Language.Futhark.Syntax.ExpBase f vn)
         (Language.Futhark.Syntax.ExpBase f vn)
         (Language.Futhark.Syntax.ExpBase f vn)
         (f (Language.Futhark.Syntax.CompTypeBase vn))
         Data.Loc.SrcLoc
    | Apply Language.Futhark.Core.QualName
            [(Language.Futhark.Syntax.ExpBase f vn,
              Language.Futhark.Syntax.Diet)]
            (f (Language.Futhark.Syntax.CompTypeBase vn))
            Data.Loc.SrcLoc
    | DoLoop (Language.Futhark.Syntax.PatternBase f vn)
             (Language.Futhark.Syntax.ExpBase f vn)
             (Language.Futhark.Syntax.LoopFormBase f vn)
             (Language.Futhark.Syntax.ExpBase f vn)
             (Language.Futhark.Syntax.ExpBase f vn)
             Data.Loc.SrcLoc
    | BinOp Language.Futhark.Syntax.BinOp
            (Language.Futhark.Syntax.ExpBase f vn)
            (Language.Futhark.Syntax.ExpBase f vn)
            (f (Language.Futhark.Syntax.CompTypeBase vn))
            Data.Loc.SrcLoc
    | UnOp Language.Futhark.Syntax.UnOp
           (Language.Futhark.Syntax.ExpBase f vn)
           Data.Loc.SrcLoc
    | LetWith (Language.Futhark.Syntax.IdentBase f vn)
              (Language.Futhark.Syntax.IdentBase f vn)
              [Language.Futhark.Syntax.ExpBase f vn]
              (Language.Futhark.Syntax.ExpBase f vn)
              (Language.Futhark.Syntax.ExpBase f vn)
              Data.Loc.SrcLoc
    | Index (Language.Futhark.Syntax.ExpBase f vn)
            [Language.Futhark.Syntax.ExpBase f vn]
            Data.Loc.SrcLoc
    | TupleIndex (Language.Futhark.Syntax.ExpBase f vn)
                 GHC.Types.Int
                 (f (Language.Futhark.Syntax.CompTypeBase vn))
                 Data.Loc.SrcLoc
    | Size GHC.Types.Int
           (Language.Futhark.Syntax.ExpBase f vn)
           Data.Loc.SrcLoc
    | Split GHC.Types.Int
            [Language.Futhark.Syntax.ExpBase f vn]
            (Language.Futhark.Syntax.ExpBase f vn)
            Data.Loc.SrcLoc
    | Concat GHC.Types.Int
             (Language.Futhark.Syntax.ExpBase f vn)
             [Language.Futhark.Syntax.ExpBase f vn]
             Data.Loc.SrcLoc
    | Copy (Language.Futhark.Syntax.ExpBase f vn) Data.Loc.SrcLoc
    | Iota (Language.Futhark.Syntax.ExpBase f vn) Data.Loc.SrcLoc
    | Replicate (Language.Futhark.Syntax.ExpBase f vn)
                (Language.Futhark.Syntax.ExpBase f vn)
                Data.Loc.SrcLoc
    | Reshape [Language.Futhark.Syntax.ExpBase f vn]
              (Language.Futhark.Syntax.ExpBase f vn)
              Data.Loc.SrcLoc
    | Transpose (Language.Futhark.Syntax.ExpBase f vn) Data.Loc.SrcLoc
    | Rearrange [GHC.Types.Int]
                (Language.Futhark.Syntax.ExpBase f vn)
                Data.Loc.SrcLoc
    | Rotate GHC.Types.Int
             (Language.Futhark.Syntax.ExpBase f vn)
             (Language.Futhark.Syntax.ExpBase f vn)
             Data.Loc.SrcLoc
    | Map (Language.Futhark.Syntax.LambdaBase f vn)
          (Language.Futhark.Syntax.ExpBase f vn)
          Data.Loc.SrcLoc
    | Reduce Language.Futhark.Core.Commutativity
             (Language.Futhark.Syntax.LambdaBase f vn)
             (Language.Futhark.Syntax.ExpBase f vn)
             (Language.Futhark.Syntax.ExpBase f vn)
             Data.Loc.SrcLoc
    | Scan (Language.Futhark.Syntax.LambdaBase f vn)
           (Language.Futhark.Syntax.ExpBase f vn)
           (Language.Futhark.Syntax.ExpBase f vn)
           Data.Loc.SrcLoc
    | Filter (Language.Futhark.Syntax.LambdaBase f vn)
             (Language.Futhark.Syntax.ExpBase f vn)
             Data.Loc.SrcLoc
    | Partition [Language.Futhark.Syntax.LambdaBase f vn]
                (Language.Futhark.Syntax.ExpBase f vn)
                Data.Loc.SrcLoc
    | Stream (Language.Futhark.Syntax.StreamForm f vn)
             (Language.Futhark.Syntax.LambdaBase f vn)
             (Language.Futhark.Syntax.ExpBase f vn)
             Data.Loc.SrcLoc
    | Write (Language.Futhark.Syntax.ExpBase f vn)
            (Language.Futhark.Syntax.ExpBase f vn)
            [Language.Futhark.Syntax.ExpBase f vn]
            Data.Loc.SrcLoc
    | Zip [(Language.Futhark.Syntax.ExpBase f vn,
            f (Language.Futhark.Syntax.CompTypeBase vn))]
          Data.Loc.SrcLoc
    | Unzip (Language.Futhark.Syntax.ExpBase f vn)
            [f (Language.Futhark.Syntax.CompTypeBase vn)]
            Data.Loc.SrcLoc
    | Unsafe (Language.Futhark.Syntax.ExpBase f vn) Data.Loc.SrcLoc
6a7e7f623049cf90a3840b9e074fa90f
  data ForLoopDirection = FromUpTo | FromDownTo
    Promotable
7a0c20ff6ce6f0f3284eed57b4934773
  type role FunDefBase representational nominal
  data FunDefBase (f :: * -> *) vn
    = FunDef {funDefEntryPoint :: GHC.Types.Bool,
              funDefName :: Language.Futhark.Syntax.FunName,
              funDefRetType :: Language.Futhark.Syntax.TypeDeclBase f vn,
              funDefParams :: [Language.Futhark.Syntax.ParamBase f vn],
              funDefBody :: Language.Futhark.Syntax.ExpBase f vn,
              funDefLocation :: Data.Loc.SrcLoc}
0e0b71b0dea8c5cce747d3161ac77b77
  type FunName =
    (Language.Futhark.Core.Name, Language.Futhark.Core.QualName)
d421b41fdf8c94dbd148dd9f652f8857
  type role FunOrTypeDecBase representational nominal
  data FunOrTypeDecBase (f :: * -> *) vn
    = FunDec (Language.Futhark.Syntax.FunDefBase f vn)
    | TypeDec (Language.Futhark.Syntax.TypeDefBase f vn)
922bd38dbf61b406ded790909459e61d
  type role IdentBase representational nominal
  data IdentBase (f :: * -> *) vn
    = Ident {identName :: vn,
             identType :: f (Language.Futhark.Syntax.CompTypeBase vn),
             identSrcLoc :: Data.Loc.SrcLoc}
36b022f74c11b45b268c679b91cb8a0a
  newtype Info a = Info {unInfo :: a}
    Promotable
970de88f5513e7faf9ba9d7c216b7e50
  type role LambdaBase representational nominal
  data LambdaBase (f :: * -> *) vn
    = AnonymFun [Language.Futhark.Syntax.ParamBase f vn]
                (Language.Futhark.Syntax.ExpBase f vn)
                (Language.Futhark.Syntax.TypeDeclBase f vn)
                Data.Loc.SrcLoc
    | CurryFun Language.Futhark.Core.QualName
               [Language.Futhark.Syntax.ExpBase f vn]
               (f (Language.Futhark.Syntax.CompTypeBase vn))
               Data.Loc.SrcLoc
    | UnOpFun Language.Futhark.Syntax.UnOp
              (f (Language.Futhark.Syntax.CompTypeBase vn))
              (f (Language.Futhark.Syntax.CompTypeBase vn))
              Data.Loc.SrcLoc
    | BinOpFun Language.Futhark.Syntax.BinOp
               (f (Language.Futhark.Syntax.CompTypeBase vn))
               (f (Language.Futhark.Syntax.CompTypeBase vn))
               (f (Language.Futhark.Syntax.CompTypeBase vn))
               Data.Loc.SrcLoc
    | CurryBinOpLeft Language.Futhark.Syntax.BinOp
                     (Language.Futhark.Syntax.ExpBase f vn)
                     (f (Language.Futhark.Syntax.CompTypeBase vn))
                     (f (Language.Futhark.Syntax.CompTypeBase vn))
                     Data.Loc.SrcLoc
    | CurryBinOpRight Language.Futhark.Syntax.BinOp
                      (Language.Futhark.Syntax.ExpBase f vn)
                      (f (Language.Futhark.Syntax.CompTypeBase vn))
                      (f (Language.Futhark.Syntax.CompTypeBase vn))
                      Data.Loc.SrcLoc
970de88f5513e7faf9ba9d7c216b7e50
  type role LoopFormBase representational nominal
  data LoopFormBase (f :: * -> *) vn
    = For Language.Futhark.Syntax.ForLoopDirection
          (Language.Futhark.Syntax.ExpBase f vn)
          (Language.Futhark.Syntax.IdentBase f vn)
          (Language.Futhark.Syntax.ExpBase f vn)
    | While (Language.Futhark.Syntax.ExpBase f vn)
0fa33a778e20c3a3e6c1bcf68b69cf89
  type role ModDefBase representational nominal
  data ModDefBase (f :: * -> *) vn
    = ModDef {modName :: Language.Futhark.Core.Name,
              modDecls :: [Language.Futhark.Syntax.DecBase f vn],
              modDefLocation :: Data.Loc.SrcLoc}
9a44f70b738796da9c0f0fb752ffe928
  type Names = Data.HashSet.HashSet
13904bef35c7220bfbb9b2885b4fa96a
  type role NoInfo phantom
  data NoInfo a = NoInfo
    Promotable
3a9c647c4f90fbf4f3c0ed2a825c4fe2
  type role ParamBase representational nominal
  data ParamBase (f :: * -> *) vn
    = Param {paramName :: vn,
             paramTypeDecl :: Language.Futhark.Syntax.TypeDeclBase f vn,
             paramSrcLoc :: Data.Loc.SrcLoc}
a287655e57bb05ee92e568d795ff4dac
  type role PatternBase representational nominal
  data PatternBase (f :: * -> *) vn
    = TuplePattern [Language.Futhark.Syntax.PatternBase f vn]
                   Data.Loc.SrcLoc
    | Id (Language.Futhark.Syntax.IdentBase f vn)
    | Wildcard (f (Language.Futhark.Syntax.CompTypeBase vn))
               Data.Loc.SrcLoc
38fd8ca4b903061d48e25eb1353c4a5e
  data PrimType
    = Signed Futhark.Representation.Primitive.IntType
    | Unsigned Futhark.Representation.Primitive.IntType
    | FloatType Futhark.Representation.Primitive.FloatType
    | Bool
    Promotable
400b85f01ad530ac1a7fa288900f4e88
  data PrimValue
    = SignedValue !Futhark.Representation.Primitive.IntValue
    | UnsignedValue !Futhark.Representation.Primitive.IntValue
    | FloatValue !Futhark.Representation.Primitive.FloatValue
    | BoolValue !GHC.Types.Bool
be3df31fb3649abb3aedb26e333c7284
  type role ProgBase representational nominal
  data ProgBase (f :: * -> *) vn
    = Prog {progDecs :: [Language.Futhark.Syntax.DecBase f vn]}
3bb58d2aaa92639eabb3981dfc26d67b
  type role ProgBaseWithHeaders representational nominal
  data ProgBaseWithHeaders (f :: * -> *) vn
    = ProgWithHeaders {progWHHeaders :: [Language.Futhark.Syntax.ProgHeader],
                       progWHDecs :: [Language.Futhark.Syntax.DecBase f vn]}
24fb387b76f0de6e1364c57195f373ee
  data ProgHeader = Include [GHC.Base.String]
7a74fb247e0302d6f92110f5fb7a641c
  type role Rank phantom
  newtype Rank vn = Rank GHC.Types.Int
23c47b362b456c0c51d94a86b9652b66
  newtype ShapeDecl vn
    = ShapeDecl {shapeDims :: [Language.Futhark.Syntax.DimDecl vn]}
f8e3f59b8a464a8a0941f067d4d83b6d
  class (GHC.Show.Show vn, GHC.Show.Show (f vn),
         GHC.Show.Show (f (Language.Futhark.Syntax.CompTypeBase vn)),
         GHC.Show.Show (f (Language.Futhark.Syntax.StructTypeBase vn))) =>
        Showable (f :: * -> *) vn
24dc3bc96951607063cffb96c418a313
  type role SigDeclBase representational nominal
  data SigDeclBase (f :: * -> *) vn
    = FunSig {funSigName :: Language.Futhark.Core.Name,
              funSigParams :: [Language.Futhark.Syntax.TypeDeclBase f vn],
              funSigRettype :: Language.Futhark.Syntax.TypeDeclBase f vn}
    | TypeSig (Language.Futhark.Syntax.TypeDefBase f vn)
6858681131861f07ed3cbf6b3f8a38aa
  type role SigDefBase representational nominal
  data SigDefBase (f :: * -> *) vn
    = SigDef {sigName :: Language.Futhark.Core.Name,
              sigDecls :: [Language.Futhark.Syntax.SigDeclBase f vn],
              sigDefLocation :: Data.Loc.SrcLoc}
970de88f5513e7faf9ba9d7c216b7e50
  type role StreamForm representational nominal
  data StreamForm (f :: * -> *) vn
    = MapLike Language.Futhark.Core.StreamOrd
    | RedLike Language.Futhark.Core.StreamOrd
              Language.Futhark.Core.Commutativity
              (Language.Futhark.Syntax.LambdaBase f vn)
              (Language.Futhark.Syntax.ExpBase f vn)
    | Sequential (Language.Futhark.Syntax.ExpBase f vn)
41936f2bbbf33d32aa5ab83008cf65e3
  type StructTypeBase =
    Language.Futhark.Syntax.TypeBase
      Language.Futhark.Syntax.ShapeDecl Language.Futhark.Syntax.NoInfo
f5e74c92dfc57aa431b0945cf61909a2
  type role TupleArrayElemTypeBase representational representational nominal
  data TupleArrayElemTypeBase (shape :: * -> *) (as :: * -> *) vn
    = PrimArrayElem Language.Futhark.Syntax.PrimType
                    (as vn)
                    Language.Futhark.Core.Uniqueness
    | ArrayArrayElem (Language.Futhark.Syntax.ArrayTypeBase
                        shape as vn)
    | TupleArrayElem [Language.Futhark.Syntax.TupleArrayElemTypeBase
                        shape as vn]
99bd87deac1e318133c7179dfa4bd510
  type role TypeBase representational representational nominal
  data TypeBase (shape :: * -> *) (as :: * -> *) vn
    = Prim Language.Futhark.Syntax.PrimType
    | Array (Language.Futhark.Syntax.ArrayTypeBase shape as vn)
    | Tuple [Language.Futhark.Syntax.TypeBase shape as vn]
2ed3ebcf91b3218763d1480f708a9cc9
  type role TypeDeclBase representational nominal
  data TypeDeclBase (f :: * -> *) vn
    = TypeDecl {declaredType :: Language.Futhark.Syntax.UserType vn,
                expandedType :: f (Language.Futhark.Syntax.StructTypeBase vn)}
2da1e54d830a3cc0c1b5c70a77ffb606
  type role TypeDefBase representational nominal
  data TypeDefBase (f :: * -> *) vn
    = TypeDef {typeAlias :: Language.Futhark.Core.Name,
               userType :: Language.Futhark.Syntax.TypeDeclBase f vn,
               typeDefLocation :: Data.Loc.SrcLoc}
e22888e07cdc5159294b6b72f8ca9208
  data UnOp
    = Not
    | Negate
    | Complement
    | Abs
    | Signum
    | ToFloat Futhark.Representation.Primitive.FloatType
    | ToSigned Futhark.Representation.Primitive.IntType
    | ToUnsigned Futhark.Representation.Primitive.IntType
    Promotable
5e7052041c39992b8ea65ca85f152e71
  data UserType vn
    = UserPrim Language.Futhark.Syntax.PrimType Data.Loc.SrcLoc
    | UserArray (Language.Futhark.Syntax.UserType vn)
                (Language.Futhark.Syntax.DimDecl vn)
                Data.Loc.SrcLoc
    | UserTuple [Language.Futhark.Syntax.UserType vn] Data.Loc.SrcLoc
    | UserTypeAlias Language.Futhark.Core.QualName Data.Loc.SrcLoc
    | UserUnique (Language.Futhark.Syntax.UserType vn) Data.Loc.SrcLoc
f4ef904aac52050dcf1785f30dabc683
  data Value
    = PrimValue !Language.Futhark.Syntax.PrimValue
    | TupValue ![Language.Futhark.Syntax.Value]
    | ArrayValue !(GHC.Arr.Array
                     GHC.Types.Int Language.Futhark.Syntax.Value)
                 (Language.Futhark.Syntax.TypeBase
                    Language.Futhark.Syntax.Rank Language.Futhark.Syntax.NoInfo ())
4843c6ccad53eb8dd81253702a8033cf
  declaredType ::
    Language.Futhark.Syntax.TypeDeclBase f vn
    -> Language.Futhark.Syntax.UserType vn
  RecSel Language.Futhark.Syntax.TypeDeclBase
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.TypeDeclBase f vn ->
                 case ds of wild { Language.Futhark.Syntax.TypeDecl ds1 ds2 ->
                 ds1 }) -}
6dab40120c5386dcbb2d2f0b8ddf8493
  expandedType ::
    Language.Futhark.Syntax.TypeDeclBase f vn
    -> f (Language.Futhark.Syntax.StructTypeBase vn)
  RecSel Language.Futhark.Syntax.TypeDeclBase
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.TypeDeclBase f vn ->
                 case ds of wild { Language.Futhark.Syntax.TypeDecl ds1 ds2 ->
                 ds2 }) -}
5d2ae742b859c4713334788a59f39166
  funDefBody ::
    Language.Futhark.Syntax.FunDefBase f vn
    -> Language.Futhark.Syntax.ExpBase f vn
  RecSel Language.Futhark.Syntax.FunDefBase
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.FunDefBase f vn ->
                 case ds of wild { Language.Futhark.Syntax.FunDef ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds5 }) -}
5bb6fc0f560c7541ff40e9ddbe5ad2f4
  funDefEntryPoint ::
    Language.Futhark.Syntax.FunDefBase f vn -> GHC.Types.Bool
  RecSel Language.Futhark.Syntax.FunDefBase
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.FunDefBase f vn ->
                 case ds of wild { Language.Futhark.Syntax.FunDef ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds1 }) -}
8622b5197e2c55c7cc00ddcc392fc6d3
  funDefLocation ::
    Language.Futhark.Syntax.FunDefBase f vn -> Data.Loc.SrcLoc
  RecSel Language.Futhark.Syntax.FunDefBase
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.FunDefBase f vn ->
                 case ds of wild { Language.Futhark.Syntax.FunDef ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds6 }) -}
2cee591d5d8246da486fb409d8962347
  funDefName ::
    Language.Futhark.Syntax.FunDefBase f vn
    -> Language.Futhark.Syntax.FunName
  RecSel Language.Futhark.Syntax.FunDefBase
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U(U,U),A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.FunDefBase f vn ->
                 case ds of wild { Language.Futhark.Syntax.FunDef ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds2 }) -}
cea7ad682119b2686e10c84725444ff4
  funDefParams ::
    Language.Futhark.Syntax.FunDefBase f vn
    -> [Language.Futhark.Syntax.ParamBase f vn]
  RecSel Language.Futhark.Syntax.FunDefBase
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.FunDefBase f vn ->
                 case ds of wild { Language.Futhark.Syntax.FunDef ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds4 }) -}
ce078e4d373e0e5baa8ce53e86a98fc4
  funDefRetType ::
    Language.Futhark.Syntax.FunDefBase f vn
    -> Language.Futhark.Syntax.TypeDeclBase f vn
  RecSel Language.Futhark.Syntax.FunDefBase
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U(U,U),A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.FunDefBase f vn ->
                 case ds of wild { Language.Futhark.Syntax.FunDef ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 }) -}
a498db3dae259fc199f592d0dd8203be
  funSigName ::
    Language.Futhark.Syntax.SigDeclBase f vn
    -> Language.Futhark.Core.Name
  RecSel Language.Futhark.Syntax.SigDeclBase
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.SigDeclBase f vn ->
                 case ds of wild {
                   Language.Futhark.Syntax.FunSig ds1 ds2 ds3 -> ds1
                   Language.Futhark.Syntax.TypeSig ipv
                   -> Language.Futhark.Syntax.funSigName1 }) -}
e50d67bca6ebf8584128e63ae061e284
  funSigName1 :: Language.Futhark.Core.Name
  {- Strictness: b -}
b2c0af42b37885b47da35ab6174ee3ac
  funSigParams ::
    Language.Futhark.Syntax.SigDeclBase f vn
    -> [Language.Futhark.Syntax.TypeDeclBase f vn]
  RecSel Language.Futhark.Syntax.SigDeclBase
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.SigDeclBase f vn ->
                 case ds of wild {
                   Language.Futhark.Syntax.FunSig ds1 ds2 ds3 -> ds2
                   Language.Futhark.Syntax.TypeSig ipv
                   -> Language.Futhark.Syntax.funSigParams1 @ f @ vn }) -}
f489288bc00d6a079093cdaf9e6d1f4d
  funSigParams1 :: [Language.Futhark.Syntax.TypeDeclBase f vn]
  {- Strictness: b -}
e359020ac1035a7b70e9ce063a6a2340
  funSigRettype ::
    Language.Futhark.Syntax.SigDeclBase f vn
    -> Language.Futhark.Syntax.TypeDeclBase f vn
  RecSel Language.Futhark.Syntax.SigDeclBase
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.SigDeclBase f vn ->
                 case ds of wild {
                   Language.Futhark.Syntax.FunSig ds1 ds2 ds3 -> ds3
                   Language.Futhark.Syntax.TypeSig ipv
                   -> Language.Futhark.Syntax.funSigRettype1 @ f @ vn }) -}
54a63caedfbad8c16e26a5d5d3dead80
  funSigRettype1 :: Language.Futhark.Syntax.TypeDeclBase f vn
  {- Strictness: b -}
39079feb1e33b12fb8e585563e4bdb0a
  identName :: Language.Futhark.Syntax.IdentBase f vn -> vn
  RecSel Language.Futhark.Syntax.IdentBase
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.IdentBase f vn ->
                 case ds of wild { Language.Futhark.Syntax.Ident ds1 ds2 ds3 ->
                 ds1 }) -}
b2f19d15bfa595ba57f62862e8fb8e0f
  identSrcLoc ::
    Language.Futhark.Syntax.IdentBase f vn -> Data.Loc.SrcLoc
  RecSel Language.Futhark.Syntax.IdentBase
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.IdentBase f vn ->
                 case ds of wild { Language.Futhark.Syntax.Ident ds1 ds2 ds3 ->
                 ds3 }) -}
413913c09e04e82fa4ef7ea945d2bab9
  identType ::
    Language.Futhark.Syntax.IdentBase f vn
    -> f (Language.Futhark.Syntax.CompTypeBase vn)
  RecSel Language.Futhark.Syntax.IdentBase
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.IdentBase f vn ->
                 case ds of wild { Language.Futhark.Syntax.Ident ds1 ds2 ds3 ->
                 ds2 }) -}
2572988007fa418880201e76b9cee25f
  modDecls ::
    Language.Futhark.Syntax.ModDefBase f vn
    -> [Language.Futhark.Syntax.DecBase f vn]
  RecSel Language.Futhark.Syntax.ModDefBase
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.ModDefBase f vn ->
                 case ds of wild { Language.Futhark.Syntax.ModDef ds1 ds2 ds3 ->
                 ds2 }) -}
897e1d03a74443789f9069a6c4779721
  modDefLocation ::
    Language.Futhark.Syntax.ModDefBase f vn -> Data.Loc.SrcLoc
  RecSel Language.Futhark.Syntax.ModDefBase
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.ModDefBase f vn ->
                 case ds of wild { Language.Futhark.Syntax.ModDef ds1 ds2 ds3 ->
                 ds3 }) -}
bb80adbcc24d191130863ce79b21e40a
  modName ::
    Language.Futhark.Syntax.ModDefBase f vn
    -> Language.Futhark.Core.Name
  RecSel Language.Futhark.Syntax.ModDefBase
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U(U,U,U),A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.ModDefBase f vn ->
                 case ds of wild { Language.Futhark.Syntax.ModDef ds1 ds2 ds3 ->
                 ds1 }) -}
00f0687c091d7ac025d5478b5097d9d7
  paramName :: Language.Futhark.Syntax.ParamBase f vn -> vn
  RecSel Language.Futhark.Syntax.ParamBase
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.ParamBase f vn ->
                 case ds of wild { Language.Futhark.Syntax.Param ds1 ds2 ds3 ->
                 ds1 }) -}
4cc3216ec7069195447cd3bb83eeecb6
  paramSrcLoc ::
    Language.Futhark.Syntax.ParamBase f vn -> Data.Loc.SrcLoc
  RecSel Language.Futhark.Syntax.ParamBase
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.ParamBase f vn ->
                 case ds of wild { Language.Futhark.Syntax.Param ds1 ds2 ds3 ->
                 ds3 }) -}
1b70b35b7808d44867bb8ce7394d1b21
  paramTypeDecl ::
    Language.Futhark.Syntax.ParamBase f vn
    -> Language.Futhark.Syntax.TypeDeclBase f vn
  RecSel Language.Futhark.Syntax.ParamBase
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U,U),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.ParamBase f vn ->
                 case ds of wild { Language.Futhark.Syntax.Param ds1 ds2 ds3 ->
                 ds2 }) -}
033fd6a3ba9a40df45b17194d8b43d83
  progDecs ::
    Language.Futhark.Syntax.ProgBase f vn
    -> [Language.Futhark.Syntax.DecBase f vn]
  RecSel Language.Futhark.Syntax.ProgBase
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.ProgBase f vn ->
                 case ds of wild { Language.Futhark.Syntax.Prog ds1 -> ds1 }) -}
962694adcfe1f12e0a788afb84cf43a3
  progWHDecs ::
    Language.Futhark.Syntax.ProgBaseWithHeaders f vn
    -> [Language.Futhark.Syntax.DecBase f vn]
  RecSel Language.Futhark.Syntax.ProgBaseWithHeaders
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.ProgBaseWithHeaders f vn ->
                 case ds of wild { Language.Futhark.Syntax.ProgWithHeaders ds1 ds2 ->
                 ds2 }) -}
9547b3f8ddde788fe362b59ff7949cef
  progWHHeaders ::
    Language.Futhark.Syntax.ProgBaseWithHeaders f vn
    -> [Language.Futhark.Syntax.ProgHeader]
  RecSel Language.Futhark.Syntax.ProgBaseWithHeaders
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.ProgBaseWithHeaders f vn ->
                 case ds of wild { Language.Futhark.Syntax.ProgWithHeaders ds1 ds2 ->
                 ds1 }) -}
63c501f82e870cf9d68a06b43cccd893
  shapeDims ::
    Language.Futhark.Syntax.ShapeDecl vn
    -> [Language.Futhark.Syntax.DimDecl vn]
  RecSel Language.Futhark.Syntax.ShapeDecl
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.shapeDims1
                  `cast`
                (forall vn.
                 <Language.Futhark.Syntax.ShapeDecl vn>_R
                 ->_R Language.Futhark.Syntax.NTCo:ShapeDecl[0] <vn>_R) -}
1619a8dcaf38493a3520ee3ea55d8042
  shapeDims1 ::
    Language.Futhark.Syntax.ShapeDecl vn
    -> Language.Futhark.Syntax.ShapeDecl vn
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ vn ds :: Language.Futhark.Syntax.ShapeDecl vn -> ds) -}
304ef916cf549d73cdd3919a34d36cfe
  sigDecls ::
    Language.Futhark.Syntax.SigDefBase f vn
    -> [Language.Futhark.Syntax.SigDeclBase f vn]
  RecSel Language.Futhark.Syntax.SigDefBase
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.SigDefBase f vn ->
                 case ds of wild { Language.Futhark.Syntax.SigDef ds1 ds2 ds3 ->
                 ds2 }) -}
5a9e3b06ced333e0142207c97c3cbc1a
  sigDefLocation ::
    Language.Futhark.Syntax.SigDefBase f vn -> Data.Loc.SrcLoc
  RecSel Language.Futhark.Syntax.SigDefBase
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.SigDefBase f vn ->
                 case ds of wild { Language.Futhark.Syntax.SigDef ds1 ds2 ds3 ->
                 ds3 }) -}
957a0084fed95df0902a2b40d984aaf5
  sigName ::
    Language.Futhark.Syntax.SigDefBase f vn
    -> Language.Futhark.Core.Name
  RecSel Language.Futhark.Syntax.SigDefBase
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U(U,U,U),A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.SigDefBase f vn ->
                 case ds of wild { Language.Futhark.Syntax.SigDef ds1 ds2 ds3 ->
                 ds1 }) -}
5e130c05d18930f52a3c35683ce232ff
  typeAlias ::
    Language.Futhark.Syntax.TypeDefBase f vn
    -> Language.Futhark.Core.Name
  RecSel Language.Futhark.Syntax.TypeDefBase
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U(U,U,U),A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.TypeDefBase f vn ->
                 case ds of wild { Language.Futhark.Syntax.TypeDef ds1 ds2 ds3 ->
                 ds1 }) -}
a6de9f1be3de0499e4648e7f8fb56bd2
  typeDefLocation ::
    Language.Futhark.Syntax.TypeDefBase f vn -> Data.Loc.SrcLoc
  RecSel Language.Futhark.Syntax.TypeDefBase
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.TypeDefBase f vn ->
                 case ds of wild { Language.Futhark.Syntax.TypeDef ds1 ds2 ds3 ->
                 ds3 }) -}
bb6dc3203c60f1a550d6efa411fdaabe
  unInfo :: Language.Futhark.Syntax.Info a -> a
  RecSel Language.Futhark.Syntax.Info
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.Futhark.Syntax.unInfo1
                  `cast`
                (forall a5.
                 <Language.Futhark.Syntax.Info a5>_R
                 ->_R Language.Futhark.Syntax.NTCo:Info[0] <a5>_R) -}
66768cf4bcc9717566c59dea09323dad
  unInfo1 ::
    Language.Futhark.Syntax.Info a -> Language.Futhark.Syntax.Info a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a5 ds :: Language.Futhark.Syntax.Info a5 -> ds) -}
fbfaaafbe407909f3d6d9310db8d44a6
  userType ::
    Language.Futhark.Syntax.TypeDefBase f vn
    -> Language.Futhark.Syntax.TypeDeclBase f vn
  RecSel Language.Futhark.Syntax.TypeDefBase
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U,U),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *)
                   @ vn
                   ds :: Language.Futhark.Syntax.TypeDefBase f vn ->
                 case ds of wild { Language.Futhark.Syntax.TypeDef ds1 ds2 ds3 ->
                 ds2 }) -}
instance Language.Futhark.Syntax.ArrayShape [Language.Futhark.Syntax.Rank]
  = Language.Futhark.Syntax.$fArrayShapeRank
instance Language.Futhark.Syntax.ArrayShape [Language.Futhark.Syntax.ShapeDecl]
  = Language.Futhark.Syntax.$fArrayShapeShapeDecl
instance GHC.Enum.Bounded [Language.Futhark.Syntax.BinOp]
  = Language.Futhark.Syntax.$fBoundedBinOp
instance GHC.Enum.Enum [Language.Futhark.Syntax.BinOp]
  = Language.Futhark.Syntax.$fEnumBinOp
instance GHC.Classes.Eq [Language.Futhark.Syntax.ArrayTypeBase]
  = Language.Futhark.Syntax.$fEqArrayTypeBase
instance GHC.Classes.Eq [Language.Futhark.Syntax.BinOp]
  = Language.Futhark.Syntax.$fEqBinOp
instance GHC.Classes.Eq [Language.Futhark.Syntax.Diet]
  = Language.Futhark.Syntax.$fEqDiet
instance GHC.Classes.Eq [Language.Futhark.Syntax.DimDecl]
  = Language.Futhark.Syntax.$fEqDimDecl
instance GHC.Classes.Eq [Language.Futhark.Syntax.ForLoopDirection]
  = Language.Futhark.Syntax.$fEqForLoopDirection
instance GHC.Classes.Eq [Language.Futhark.Syntax.IdentBase]
  = Language.Futhark.Syntax.$fEqIdentBase
instance GHC.Classes.Eq [Language.Futhark.Syntax.Info]
  = Language.Futhark.Syntax.$fEqInfo
instance GHC.Classes.Eq [Language.Futhark.Syntax.NoInfo]
  = Language.Futhark.Syntax.$fEqNoInfo
instance GHC.Classes.Eq [Language.Futhark.Syntax.ParamBase]
  = Language.Futhark.Syntax.$fEqParamBase
instance GHC.Classes.Eq [Language.Futhark.Syntax.PrimType]
  = Language.Futhark.Syntax.$fEqPrimType
instance GHC.Classes.Eq [Language.Futhark.Syntax.PrimValue]
  = Language.Futhark.Syntax.$fEqPrimValue
instance GHC.Classes.Eq [Language.Futhark.Syntax.Rank]
  = Language.Futhark.Syntax.$fEqRank
instance GHC.Classes.Eq [Language.Futhark.Syntax.ShapeDecl]
  = Language.Futhark.Syntax.$fEqShapeDecl
instance GHC.Classes.Eq [Language.Futhark.Syntax.TupleArrayElemTypeBase]
  = Language.Futhark.Syntax.$fEqTupleArrayElemTypeBase
instance GHC.Classes.Eq [Language.Futhark.Syntax.TypeBase]
  = Language.Futhark.Syntax.$fEqTypeBase
instance GHC.Classes.Eq [Language.Futhark.Syntax.UnOp]
  = Language.Futhark.Syntax.$fEqUnOp
instance GHC.Classes.Eq [Language.Futhark.Syntax.Value]
  = Language.Futhark.Syntax.$fEqValue
instance Data.Foldable.Foldable [Language.Futhark.Syntax.Info]
  = Language.Futhark.Syntax.$fFoldableInfo
instance Data.Foldable.Foldable [Language.Futhark.Syntax.NoInfo]
  = Language.Futhark.Syntax.$fFoldableNoInfo
instance GHC.Base.Functor [Language.Futhark.Syntax.Info]
  = Language.Futhark.Syntax.$fFunctorInfo
instance GHC.Base.Functor [Language.Futhark.Syntax.NoInfo]
  = Language.Futhark.Syntax.$fFunctorNoInfo
instance Data.Hashable.Class.Hashable [Language.Futhark.Syntax.IdentBase]
  = Language.Futhark.Syntax.$fHashableIdentBase
instance Data.Hashable.Class.Hashable [Language.Futhark.Syntax.ParamBase]
  = Language.Futhark.Syntax.$fHashableParamBase
instance Data.Loc.Located [Language.Futhark.Syntax.ExpBase]
  = Language.Futhark.Syntax.$fLocatedExpBase
instance Data.Loc.Located [Language.Futhark.Syntax.IdentBase]
  = Language.Futhark.Syntax.$fLocatedIdentBase
instance Data.Loc.Located [Language.Futhark.Syntax.LambdaBase]
  = Language.Futhark.Syntax.$fLocatedLambdaBase
instance Data.Loc.Located [Language.Futhark.Syntax.ParamBase]
  = Language.Futhark.Syntax.$fLocatedParamBase
instance Data.Loc.Located [Language.Futhark.Syntax.PatternBase]
  = Language.Futhark.Syntax.$fLocatedPatternBase
instance Data.Loc.Located [Language.Futhark.Syntax.TypeDefBase]
  = Language.Futhark.Syntax.$fLocatedTypeDefBase
instance Data.Loc.Located [Language.Futhark.Syntax.UserType]
  = Language.Futhark.Syntax.$fLocatedUserType
instance GHC.Base.Monoid [Language.Futhark.Syntax.NoInfo]
  = Language.Futhark.Syntax.$fMonoidNoInfo
instance GHC.Base.Monoid [Language.Futhark.Syntax.Rank]
  = Language.Futhark.Syntax.$fMonoidRank
instance GHC.Base.Monoid [Language.Futhark.Syntax.ShapeDecl]
  = Language.Futhark.Syntax.$fMonoidShapeDecl
instance GHC.Classes.Ord [Language.Futhark.Syntax.BinOp]
  = Language.Futhark.Syntax.$fOrdBinOp
instance GHC.Classes.Ord [Language.Futhark.Syntax.Diet]
  = Language.Futhark.Syntax.$fOrdDiet
instance GHC.Classes.Ord [Language.Futhark.Syntax.DimDecl]
  = Language.Futhark.Syntax.$fOrdDimDecl
instance GHC.Classes.Ord [Language.Futhark.Syntax.ForLoopDirection]
  = Language.Futhark.Syntax.$fOrdForLoopDirection
instance GHC.Classes.Ord [Language.Futhark.Syntax.Info]
  = Language.Futhark.Syntax.$fOrdInfo
instance GHC.Classes.Ord [Language.Futhark.Syntax.NoInfo]
  = Language.Futhark.Syntax.$fOrdNoInfo
instance GHC.Classes.Ord [Language.Futhark.Syntax.PrimType]
  = Language.Futhark.Syntax.$fOrdPrimType
instance GHC.Classes.Ord [Language.Futhark.Syntax.PrimValue]
  = Language.Futhark.Syntax.$fOrdPrimValue
instance GHC.Classes.Ord [Language.Futhark.Syntax.Rank]
  = Language.Futhark.Syntax.$fOrdRank
instance GHC.Classes.Ord [Language.Futhark.Syntax.ShapeDecl]
  = Language.Futhark.Syntax.$fOrdShapeDecl
instance GHC.Classes.Ord [Language.Futhark.Syntax.UnOp]
  = Language.Futhark.Syntax.$fOrdUnOp
instance GHC.Show.Show [Language.Futhark.Syntax.ArrayTypeBase]
  = Language.Futhark.Syntax.$fShowArrayTypeBase
instance GHC.Show.Show [Language.Futhark.Syntax.BinOp]
  = Language.Futhark.Syntax.$fShowBinOp
instance GHC.Show.Show [Language.Futhark.Syntax.DecBase]
  = Language.Futhark.Syntax.$fShowDecBase
instance GHC.Show.Show [Language.Futhark.Syntax.Diet]
  = Language.Futhark.Syntax.$fShowDiet
instance GHC.Show.Show [Language.Futhark.Syntax.DimDecl]
  = Language.Futhark.Syntax.$fShowDimDecl
instance GHC.Show.Show [Language.Futhark.Syntax.ExpBase]
  = Language.Futhark.Syntax.$fShowExpBase
instance GHC.Show.Show [Language.Futhark.Syntax.ForLoopDirection]
  = Language.Futhark.Syntax.$fShowForLoopDirection
instance GHC.Show.Show [Language.Futhark.Syntax.FunDefBase]
  = Language.Futhark.Syntax.$fShowFunDefBase
instance GHC.Show.Show [Language.Futhark.Syntax.FunOrTypeDecBase]
  = Language.Futhark.Syntax.$fShowFunOrTypeDecBase
instance GHC.Show.Show [Language.Futhark.Syntax.IdentBase]
  = Language.Futhark.Syntax.$fShowIdentBase
instance GHC.Show.Show [Language.Futhark.Syntax.Info]
  = Language.Futhark.Syntax.$fShowInfo
instance GHC.Show.Show [Language.Futhark.Syntax.LambdaBase]
  = Language.Futhark.Syntax.$fShowLambdaBase
instance GHC.Show.Show [Language.Futhark.Syntax.LoopFormBase]
  = Language.Futhark.Syntax.$fShowLoopFormBase
instance GHC.Show.Show [Language.Futhark.Syntax.ModDefBase]
  = Language.Futhark.Syntax.$fShowModDefBase
instance GHC.Show.Show [Language.Futhark.Syntax.NoInfo]
  = Language.Futhark.Syntax.$fShowNoInfo
instance GHC.Show.Show [Language.Futhark.Syntax.ParamBase]
  = Language.Futhark.Syntax.$fShowParamBase
instance GHC.Show.Show [Language.Futhark.Syntax.PatternBase]
  = Language.Futhark.Syntax.$fShowPatternBase
instance GHC.Show.Show [Language.Futhark.Syntax.PrimType]
  = Language.Futhark.Syntax.$fShowPrimType
instance GHC.Show.Show [Language.Futhark.Syntax.PrimValue]
  = Language.Futhark.Syntax.$fShowPrimValue
instance GHC.Show.Show [Language.Futhark.Syntax.ProgBase]
  = Language.Futhark.Syntax.$fShowProgBase
instance GHC.Show.Show [Language.Futhark.Syntax.ProgBaseWithHeaders]
  = Language.Futhark.Syntax.$fShowProgBaseWithHeaders
instance GHC.Show.Show [Language.Futhark.Syntax.ProgHeader]
  = Language.Futhark.Syntax.$fShowProgHeader
instance GHC.Show.Show [Language.Futhark.Syntax.Rank]
  = Language.Futhark.Syntax.$fShowRank
instance GHC.Show.Show [Language.Futhark.Syntax.ShapeDecl]
  = Language.Futhark.Syntax.$fShowShapeDecl
instance GHC.Show.Show [Language.Futhark.Syntax.SigDeclBase]
  = Language.Futhark.Syntax.$fShowSigDeclBase
instance GHC.Show.Show [Language.Futhark.Syntax.SigDefBase]
  = Language.Futhark.Syntax.$fShowSigDefBase
instance GHC.Show.Show [Language.Futhark.Syntax.StreamForm]
  = Language.Futhark.Syntax.$fShowStreamForm
instance GHC.Show.Show [Language.Futhark.Syntax.TupleArrayElemTypeBase]
  = Language.Futhark.Syntax.$fShowTupleArrayElemTypeBase
instance GHC.Show.Show [Language.Futhark.Syntax.TypeBase]
  = Language.Futhark.Syntax.$fShowTypeBase
instance GHC.Show.Show [Language.Futhark.Syntax.TypeDeclBase]
  = Language.Futhark.Syntax.$fShowTypeDeclBase
instance GHC.Show.Show [Language.Futhark.Syntax.TypeDefBase]
  = Language.Futhark.Syntax.$fShowTypeDefBase
instance GHC.Show.Show [Language.Futhark.Syntax.UnOp]
  = Language.Futhark.Syntax.$fShowUnOp
instance GHC.Show.Show [Language.Futhark.Syntax.UserType]
  = Language.Futhark.Syntax.$fShowUserType
instance GHC.Show.Show [Language.Futhark.Syntax.Value]
  = Language.Futhark.Syntax.$fShowValue
instance Language.Futhark.Syntax.Showable [Language.Futhark.Syntax.Info,
                                           .]
  = Language.Futhark.Syntax.$fShowableInfovn
instance Language.Futhark.Syntax.Showable [Language.Futhark.Syntax.NoInfo,
                                           .]
  = Language.Futhark.Syntax.$fShowableNoInfovn
instance Data.Traversable.Traversable [Language.Futhark.Syntax.Info]
  = Language.Futhark.Syntax.$fTraversableInfo
instance Data.Traversable.Traversable [Language.Futhark.Syntax.NoInfo]
  = Language.Futhark.Syntax.$fTraversableNoInfo
"SPEC $c/= @ Rank _ @ ()" [ALWAYS] forall @ (as :: * -> *)
                                          $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.Rank ())
  Language.Futhark.Syntax.$fEqTupleArrayElemTypeBase_$c/= @ Language.Futhark.Syntax.Rank
                                                          @ as
                                                          @ ()
                                                          $dEq
  = Language.Futhark.Syntax.$fEqTupleArrayElemTypeBase_$s$c/= @ as
"SPEC $c/= @ Rank _ @ ()" [ALWAYS] forall @ (as :: * -> *)
                                          $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.Rank ())
  Language.Futhark.Syntax.$fEqTypeBase_$c/= @ Language.Futhark.Syntax.Rank
                                            @ as
                                            @ ()
                                            $dEq
  = Language.Futhark.Syntax.$fEqTypeBase_$s$c/= @ as
"SPEC $c== @ Rank _ @ ()" [ALWAYS] forall @ (as :: * -> *)
                                          $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.Rank ())
  Language.Futhark.Syntax.$fEqTupleArrayElemTypeBase_$c== @ Language.Futhark.Syntax.Rank
                                                          @ as
                                                          @ ()
                                                          $dEq
  = Language.Futhark.Syntax.$fEqTupleArrayElemTypeBase_$s$c== @ as
"SPEC $c== @ Rank _ @ ()" [ALWAYS] forall @ (as :: * -> *)
                                          $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.Rank ())
  Language.Futhark.Syntax.$fEqArrayTypeBase_$c== @ Language.Futhark.Syntax.Rank
                                                 @ as
                                                 @ ()
                                                 $dEq
  = Language.Futhark.Syntax.$fEqArrayTypeBase_$s$c== @ as
"SPEC $c== @ Rank _ @ ()" [ALWAYS] forall @ (as :: * -> *)
                                          $dEq :: GHC.Classes.Eq (Language.Futhark.Syntax.Rank ())
  Language.Futhark.Syntax.$fEqTypeBase_$c== @ Language.Futhark.Syntax.Rank
                                            @ as
                                            @ ()
                                            $dEq
  = Language.Futhark.Syntax.$fEqTypeBase_$s$c== @ as
"SPEC $fEqTupleArrayElemTypeBase @ Rank _ @ ()" [ALWAYS] forall @ (as :: *
                                                                         -> *)
                                                                $dEq :: GHC.Classes.Eq
                                                                          (Language.Futhark.Syntax.Rank
                                                                             ())
  Language.Futhark.Syntax.$fEqTupleArrayElemTypeBase @ Language.Futhark.Syntax.Rank
                                                     @ as
                                                     @ ()
                                                     $dEq
  = Language.Futhark.Syntax.$fEqTupleArrayElemTypeBase_$s$fEqTupleArrayElemTypeBase
      @ as
"SPEC $fEqTypeBase @ Rank _ @ ()" [ALWAYS] forall @ (as :: * -> *)
                                                  $dEq :: GHC.Classes.Eq
                                                            (Language.Futhark.Syntax.Rank ())
  Language.Futhark.Syntax.$fEqTypeBase @ Language.Futhark.Syntax.Rank
                                       @ as
                                       @ ()
                                       $dEq
  = Language.Futhark.Syntax.$fEqTypeBase_$s$fEqTypeBase @ as
"SPEC/Language.Futhark.Syntax $dmfold @ Info" [ALWAYS] forall $dFoldable :: Data.Foldable.Foldable
                                                                              Language.Futhark.Syntax.Info
  Data.Foldable.$dmfold @ Language.Futhark.Syntax.Info $dFoldable
  = Language.Futhark.Syntax.$fFoldableInfo_$s$dmfold
"SPEC/Language.Futhark.Syntax $dmfold @ NoInfo" [ALWAYS] forall $dFoldable :: Data.Foldable.Foldable
                                                                                Language.Futhark.Syntax.NoInfo
  Data.Foldable.$dmfold @ Language.Futhark.Syntax.NoInfo $dFoldable
  = Language.Futhark.Syntax.$fFoldableNoInfo_$s$dmfold
"SPEC/Language.Futhark.Syntax $dmfoldMap @ Info" [ALWAYS] forall $dFoldable :: Data.Foldable.Foldable
                                                                                 Language.Futhark.Syntax.Info
  Data.Foldable.$dmfoldMap @ Language.Futhark.Syntax.Info $dFoldable
  = Language.Futhark.Syntax.$fFoldableInfo_$s$dmfoldMap
"SPEC/Language.Futhark.Syntax $dmfoldMap @ NoInfo" [ALWAYS] forall $dFoldable :: Data.Foldable.Foldable
                                                                                   Language.Futhark.Syntax.NoInfo
  Data.Foldable.$dmfoldMap @ Language.Futhark.Syntax.NoInfo
                           $dFoldable
  = Language.Futhark.Syntax.$fFoldableNoInfo_$s$dmfoldMap
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

